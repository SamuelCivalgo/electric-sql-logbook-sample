export default [
  {
    "statements": [
      "CREATE TABLE \"ApiKey\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  \"userId\" TEXT,\n  CONSTRAINT \"ApiKey_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"ApiKey_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"ApiKey_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"DailyLog\" (\n  \"id\" TEXT NOT NULL,\n  \"date\" TEXT,\n  \"status\" TEXT NOT NULL,\n  \"note\" TEXT NOT NULL,\n  \"rating\" INTEGER NOT NULL,\n  \"ratingNote\" TEXT NOT NULL,\n  \"managerNote\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"DailyLog_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"DailyLog_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"DailyLog_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"DailyLogItem\" (\n  \"id\" TEXT NOT NULL,\n  \"note\" TEXT,\n  \"isNoteVisible\" INTEGER,\n  \"itemType\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"taskId\" TEXT,\n  \"dailyLogId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  \"equipmentId\" TEXT,\n  CONSTRAINT \"DailyLogItem_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"DailyLogItem_dailyLogId_fkey\" FOREIGN KEY (\"dailyLogId\") REFERENCES \"DailyLog\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"DailyLogItem_equipmentId_fkey\" FOREIGN KEY (\"equipmentId\") REFERENCES \"Equipment\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"DailyLogItem_taskId_fkey\" FOREIGN KEY (\"taskId\") REFERENCES \"Task\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"DailyLogItem_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"DailyLogItem_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"Equipment\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT,\n  \"type\" TEXT,\n  \"organization\" TEXT,\n  \"description\" TEXT,\n  \"updatedAt\" TEXT(3) NOT NULL,\n  \"createdAt\" TEXT(3) NOT NULL,\n  \"archivedAt\" TEXT(3),\n  \"deletedAt\" TEXT(3),\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  \"userId\" TEXT,\n  CONSTRAINT \"Equipment_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Equipment_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"Equipment_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Equipment_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"EquipmentProperty\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"order\" INTEGER NOT NULL,\n  \"createdAt\" TEXT(3) NOT NULL,\n  \"updatedAt\" TEXT(3) NOT NULL,\n  \"archivedAt\" TEXT(3),\n  \"deletedAt\" TEXT(3),\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"EquipmentProperty_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"EquipmentProperty_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"EquipmentProperty_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"EquipmentPropertyValue\" (\n  \"id\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  \"createdAt\" TEXT(3) NOT NULL,\n  \"updatedAt\" TEXT(3) NOT NULL,\n  \"archivedAt\" TEXT(3),\n  \"deletedAt\" TEXT(3),\n  \"createdBy\" TEXT,\n  \"equipmentId\" TEXT NOT NULL,\n  \"equipmentPropertyId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"EquipmentPropertyValue_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"EquipmentPropertyValue_equipmentId_fkey\" FOREIGN KEY (\"equipmentId\") REFERENCES \"Equipment\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"EquipmentPropertyValue_equipmentPropertyId_fkey\" FOREIGN KEY (\"equipmentPropertyId\") REFERENCES \"EquipmentProperty\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"EquipmentPropertyValue_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"EquipmentPropertyValue_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"Feedback\" (\n  \"id\" TEXT NOT NULL,\n  \"text\" TEXT,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"Feedback_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Feedback_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"Feedback_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"File\" (\n  \"id\" TEXT NOT NULL,\n  \"description\" TEXT,\n  \"locationLabel\" TEXT,\n  \"locationLatitude\" REAL,\n  \"locationLongitude\" REAL,\n  \"name\" TEXT,\n  \"type\" TEXT,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"imageId\" TEXT NOT NULL,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  \"projectId\" TEXT,\n  \"dailyLogId\" TEXT,\n  CONSTRAINT \"File_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"File_dailyLogId_fkey\" FOREIGN KEY (\"dailyLogId\") REFERENCES \"DailyLog\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"File_imageId_fkey\" FOREIGN KEY (\"imageId\") REFERENCES \"Image\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"File_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"Project\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"File_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"File_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"FileProperty\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"order\" INTEGER NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"FileProperty_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"FileProperty_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"FileProperty_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"FilePropertyValue\" (\n  \"id\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"fileId\" TEXT NOT NULL,\n  \"propertyId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"FilePropertyValue_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"FilePropertyValue_fileId_fkey\" FOREIGN KEY (\"fileId\") REFERENCES \"File\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"FilePropertyValue_propertyId_fkey\" FOREIGN KEY (\"propertyId\") REFERENCES \"FileProperty\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"FilePropertyValue_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"FilePropertyValue_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"Image\" (\n  \"id\" TEXT NOT NULL,\n  \"bucketId\" TEXT NOT NULL,\n  \"blurhash\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"Image_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Image_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"Image_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"LocationEntry\" (\n  \"id\" TEXT NOT NULL,\n  \"latitude\" REAL,\n  \"longitude\" REAL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"dailyLogId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"LocationEntry_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"LocationEntry_dailyLogId_fkey\" FOREIGN KEY (\"dailyLogId\") REFERENCES \"DailyLog\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"LocationEntry_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"LocationEntry_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"Project\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT,\n  \"progress\" REAL,\n  \"dueDate\" TEXT,\n  \"description\" TEXT,\n  \"locationLabel\" TEXT,\n  \"locationLatitude\" REAL,\n  \"locationLongitude\" REAL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"Project_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Project_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"Project_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"ProjectProperty\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"order\" INTEGER NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"ProjectProperty_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"ProjectProperty_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"ProjectProperty_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"ProjectPropertyValue\" (\n  \"id\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"projectId\" TEXT NOT NULL,\n  \"projectPropertyId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"ProjectPropertyValue_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"ProjectPropertyValue_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"Project\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"ProjectPropertyValue_projectPropertyId_fkey\" FOREIGN KEY (\"projectPropertyId\") REFERENCES \"ProjectProperty\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"ProjectPropertyValue_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"ProjectPropertyValue_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"Task\" (\n  \"id\" TEXT NOT NULL,\n  \"description\" TEXT,\n  \"name\" TEXT,\n  \"statusId\" TEXT,\n  \"systemStatusId\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"projectId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  \"parentId\" TEXT,\n  \"taskStatusId\" TEXT,\n  CONSTRAINT \"Task_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Task_parentId_fkey\" FOREIGN KEY (\"parentId\") REFERENCES \"Task\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Task_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"Project\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"Task_taskStatusId_fkey\" FOREIGN KEY (\"taskStatusId\") REFERENCES \"TaskStatus\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Task_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"Task_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"TaskProperty\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"order\" INTEGER NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"TaskProperty_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"TaskProperty_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TaskProperty_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"TaskPropertyValue\" (\n  \"id\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"taskPropertyId\" TEXT NOT NULL,\n  \"taskId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"TaskPropertyValue_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"TaskPropertyValue_taskId_fkey\" FOREIGN KEY (\"taskId\") REFERENCES \"Task\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TaskPropertyValue_taskPropertyId_fkey\" FOREIGN KEY (\"taskPropertyId\") REFERENCES \"TaskProperty\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TaskPropertyValue_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TaskPropertyValue_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"TaskStatus\" (\n  \"id\" TEXT NOT NULL,\n  \"displayOrder\" INTEGER NOT NULL,\n  \"iconColor\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"TaskStatus_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"TaskStatus_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TaskStatus_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"Tenant\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"settings\" TEXT_JSON NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  CONSTRAINT \"Tenant_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"Tenant_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"TenantUser\" (\n  \"id\" TEXT NOT NULL,\n  \"userRole\" TEXT NOT NULL,\n  \"inviteEmail\" TEXT,\n  \"inviteSentAt\" TEXT,\n  \"inviteStatus\" TEXT,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"userId\" TEXT,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"TenantUser_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"TenantUser_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"TenantUser_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"TenantUser_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"TimeBlock\" (\n  \"id\" TEXT NOT NULL,\n  \"duration\" INTEGER,\n  \"entryType\" TEXT NOT NULL,\n  \"rangeStartAt\" TEXT,\n  \"rangeEndAt\" TEXT,\n  \"timerStartLatitude\" REAL,\n  \"timerStartLongitude\" REAL,\n  \"timerStartAddress\" TEXT,\n  \"timerStartAt\" TEXT,\n  \"timerEndAt\" TEXT,\n  \"timerEndLatitude\" REAL,\n  \"timerEndLongitude\" REAL,\n  \"timerEndAddress\" TEXT,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT NOT NULL,\n  \"dailyLogItemId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  CONSTRAINT \"TimeBlock_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TimeBlock_dailyLogItemId_fkey\" FOREIGN KEY (\"dailyLogItemId\") REFERENCES \"DailyLogItem\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TimeBlock_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"TimeBlock_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"User\" (\n  \"id\" TEXT NOT NULL,\n  \"email\" TEXT,\n  \"name\" TEXT,\n  \"preferredLanguage\" TEXT,\n  \"settings\" TEXT_JSON NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"imageId\" TEXT,\n  \"currentTenantId\" TEXT NOT NULL,\n  CONSTRAINT \"User_currentTenantId_fkey\" FOREIGN KEY (\"currentTenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"User_imageId_fkey\" FOREIGN KEY (\"imageId\") REFERENCES \"Image\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"UserTask\" (\n  \"id\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"updatedAt\" TEXT NOT NULL,\n  \"archivedAt\" TEXT,\n  \"deletedAt\" TEXT,\n  \"createdBy\" TEXT,\n  \"taskId\" TEXT NOT NULL,\n  \"tenantId\" TEXT NOT NULL,\n  \"userId\" TEXT NOT NULL,\n  CONSTRAINT \"UserTask_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"User\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"UserTask_taskId_fkey\" FOREIGN KEY (\"taskId\") REFERENCES \"Task\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"UserTask_tenantId_fkey\" FOREIGN KEY (\"tenantId\") REFERENCES \"Tenant\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"UserTask_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"UserTask_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.ApiKey', 1);",
      "  /* Triggers for table ApiKey */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_ApiKey_primarykey;",
      "CREATE TRIGGER update_ensure_main_ApiKey_primarykey\n  BEFORE UPDATE ON \"main\".\"ApiKey\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_ApiKey_into_oplog;",
      "CREATE TRIGGER insert_main_ApiKey_into_oplog\n   AFTER INSERT ON \"main\".\"ApiKey\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ApiKey')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ApiKey', 'INSERT', json_object('id', new.\"id\"), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'name', new.\"name\", 'tenantId', new.\"tenantId\", 'userId', new.\"userId\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ApiKey_into_oplog;",
      "CREATE TRIGGER update_main_ApiKey_into_oplog\n   AFTER UPDATE ON \"main\".\"ApiKey\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ApiKey')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ApiKey', 'UPDATE', json_object('id', new.\"id\"), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'name', new.\"name\", 'tenantId', new.\"tenantId\", 'userId', new.\"userId\"), json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'name', old.\"name\", 'tenantId', old.\"tenantId\", 'userId', old.\"userId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ApiKey_into_oplog;",
      "CREATE TRIGGER delete_main_ApiKey_into_oplog\n   AFTER DELETE ON \"main\".\"ApiKey\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ApiKey')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ApiKey', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'name', old.\"name\", 'tenantId', old.\"tenantId\", 'userId', old.\"userId\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ApiKey_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ApiKey_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"ApiKey\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ApiKey_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ApiKey_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"ApiKey\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ApiKey_userId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ApiKey_userId_into_oplog\n  AFTER INSERT ON \"main\".\"ApiKey\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ApiKey_userId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ApiKey_userId_into_oplog\n   AFTER UPDATE ON \"main\".\"ApiKey\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.DailyLog', 1);",
      "  /* Triggers for table DailyLog */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_DailyLog_primarykey;",
      "CREATE TRIGGER update_ensure_main_DailyLog_primarykey\n  BEFORE UPDATE ON \"main\".\"DailyLog\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_DailyLog_into_oplog;",
      "CREATE TRIGGER insert_main_DailyLog_into_oplog\n   AFTER INSERT ON \"main\".\"DailyLog\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'DailyLog', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'date', new.\"date\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'managerNote', new.\"managerNote\", 'note', new.\"note\", 'rating', new.\"rating\", 'ratingNote', new.\"ratingNote\", 'status', new.\"status\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_DailyLog_into_oplog;",
      "CREATE TRIGGER update_main_DailyLog_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLog\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'DailyLog', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'date', new.\"date\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'managerNote', new.\"managerNote\", 'note', new.\"note\", 'rating', new.\"rating\", 'ratingNote', new.\"ratingNote\", 'status', new.\"status\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'date', old.\"date\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'managerNote', old.\"managerNote\", 'note', old.\"note\", 'rating', old.\"rating\", 'ratingNote', old.\"ratingNote\", 'status', old.\"status\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_DailyLog_into_oplog;",
      "CREATE TRIGGER delete_main_DailyLog_into_oplog\n   AFTER DELETE ON \"main\".\"DailyLog\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'DailyLog', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'date', old.\"date\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'managerNote', old.\"managerNote\", 'note', old.\"note\", 'rating', old.\"rating\", 'ratingNote', old.\"ratingNote\", 'status', old.\"status\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_DailyLog_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_DailyLog_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"DailyLog\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_DailyLog_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_DailyLog_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLog\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_DailyLog_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_DailyLog_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"DailyLog\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_DailyLog_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_DailyLog_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLog\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.DailyLogItem', 1);",
      "  /* Triggers for table DailyLogItem */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_DailyLogItem_primarykey;",
      "CREATE TRIGGER update_ensure_main_DailyLogItem_primarykey\n  BEFORE UPDATE ON \"main\".\"DailyLogItem\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_DailyLogItem_into_oplog;",
      "CREATE TRIGGER insert_main_DailyLogItem_into_oplog\n   AFTER INSERT ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLogItem')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'DailyLogItem', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogId', new.\"dailyLogId\", 'deletedAt', new.\"deletedAt\", 'equipmentId', new.\"equipmentId\", 'id', new.\"id\", 'isNoteVisible', new.\"isNoteVisible\", 'itemType', new.\"itemType\", 'note', new.\"note\", 'taskId', new.\"taskId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_DailyLogItem_into_oplog;",
      "CREATE TRIGGER update_main_DailyLogItem_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLogItem')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'DailyLogItem', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogId', new.\"dailyLogId\", 'deletedAt', new.\"deletedAt\", 'equipmentId', new.\"equipmentId\", 'id', new.\"id\", 'isNoteVisible', new.\"isNoteVisible\", 'itemType', new.\"itemType\", 'note', new.\"note\", 'taskId', new.\"taskId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogId', old.\"dailyLogId\", 'deletedAt', old.\"deletedAt\", 'equipmentId', old.\"equipmentId\", 'id', old.\"id\", 'isNoteVisible', old.\"isNoteVisible\", 'itemType', old.\"itemType\", 'note', old.\"note\", 'taskId', old.\"taskId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_DailyLogItem_into_oplog;",
      "CREATE TRIGGER delete_main_DailyLogItem_into_oplog\n   AFTER DELETE ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLogItem')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'DailyLogItem', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogId', old.\"dailyLogId\", 'deletedAt', old.\"deletedAt\", 'equipmentId', old.\"equipmentId\", 'id', old.\"id\", 'isNoteVisible', old.\"isNoteVisible\", 'itemType', old.\"itemType\", 'note', old.\"note\", 'taskId', old.\"taskId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_DailyLogItem_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_DailyLogItem_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"DailyLogItem\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_DailyLogItem_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_DailyLogItem_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_DailyLogItem_dailyLogId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_DailyLogItem_dailyLogId_into_oplog\n  AFTER INSERT ON \"main\".\"DailyLogItem\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLog', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLog\" WHERE \"id\" = new.\"dailyLogId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_DailyLogItem_dailyLogId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_DailyLogItem_dailyLogId_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLog', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLog\" WHERE \"id\" = new.\"dailyLogId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_DailyLogItem_equipmentId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_DailyLogItem_equipmentId_into_oplog\n  AFTER INSERT ON \"main\".\"DailyLogItem\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Equipment') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Equipment', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Equipment\" WHERE \"id\" = new.\"equipmentId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_DailyLogItem_equipmentId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_DailyLogItem_equipmentId_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Equipment') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Equipment', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Equipment\" WHERE \"id\" = new.\"equipmentId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_DailyLogItem_taskId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_DailyLogItem_taskId_into_oplog\n  AFTER INSERT ON \"main\".\"DailyLogItem\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"taskId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_DailyLogItem_taskId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_DailyLogItem_taskId_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"taskId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_DailyLogItem_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_DailyLogItem_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"DailyLogItem\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_DailyLogItem_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_DailyLogItem_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"DailyLogItem\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Equipment', 1);",
      "  /* Triggers for table Equipment */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_Equipment_primarykey;",
      "CREATE TRIGGER update_ensure_main_Equipment_primarykey\n  BEFORE UPDATE ON \"main\".\"Equipment\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_Equipment_into_oplog;",
      "CREATE TRIGGER insert_main_Equipment_into_oplog\n   AFTER INSERT ON \"main\".\"Equipment\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Equipment')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Equipment', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'organization', new.\"organization\", 'tenantId', new.\"tenantId\", 'type', new.\"type\", 'updatedAt', new.\"updatedAt\", 'userId', new.\"userId\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Equipment_into_oplog;",
      "CREATE TRIGGER update_main_Equipment_into_oplog\n   AFTER UPDATE ON \"main\".\"Equipment\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Equipment')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Equipment', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'organization', new.\"organization\", 'tenantId', new.\"tenantId\", 'type', new.\"type\", 'updatedAt', new.\"updatedAt\", 'userId', new.\"userId\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'organization', old.\"organization\", 'tenantId', old.\"tenantId\", 'type', old.\"type\", 'updatedAt', old.\"updatedAt\", 'userId', old.\"userId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Equipment_into_oplog;",
      "CREATE TRIGGER delete_main_Equipment_into_oplog\n   AFTER DELETE ON \"main\".\"Equipment\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Equipment')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Equipment', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'organization', old.\"organization\", 'tenantId', old.\"tenantId\", 'type', old.\"type\", 'updatedAt', old.\"updatedAt\", 'userId', old.\"userId\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Equipment_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Equipment_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"Equipment\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Equipment_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Equipment_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"Equipment\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Equipment_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Equipment_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"Equipment\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Equipment_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Equipment_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"Equipment\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Equipment_userId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Equipment_userId_into_oplog\n  AFTER INSERT ON \"main\".\"Equipment\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Equipment_userId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Equipment_userId_into_oplog\n   AFTER UPDATE ON \"main\".\"Equipment\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.EquipmentProperty', 1);",
      "  /* Triggers for table EquipmentProperty */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_EquipmentProperty_primarykey;",
      "CREATE TRIGGER update_ensure_main_EquipmentProperty_primarykey\n  BEFORE UPDATE ON \"main\".\"EquipmentProperty\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_EquipmentProperty_into_oplog;",
      "CREATE TRIGGER insert_main_EquipmentProperty_into_oplog\n   AFTER INSERT ON \"main\".\"EquipmentProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'EquipmentProperty', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_EquipmentProperty_into_oplog;",
      "CREATE TRIGGER update_main_EquipmentProperty_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'EquipmentProperty', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_EquipmentProperty_into_oplog;",
      "CREATE TRIGGER delete_main_EquipmentProperty_into_oplog\n   AFTER DELETE ON \"main\".\"EquipmentProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'EquipmentProperty', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_EquipmentProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_EquipmentProperty_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"EquipmentProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_EquipmentProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_EquipmentProperty_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_EquipmentProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_EquipmentProperty_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"EquipmentProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_EquipmentProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_EquipmentProperty_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.EquipmentPropertyValue', 1);",
      "  /* Triggers for table EquipmentPropertyValue */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_EquipmentPropertyValue_primarykey;",
      "CREATE TRIGGER update_ensure_main_EquipmentPropertyValue_primarykey\n  BEFORE UPDATE ON \"main\".\"EquipmentPropertyValue\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_EquipmentPropertyValue_into_oplog;",
      "CREATE TRIGGER insert_main_EquipmentPropertyValue_into_oplog\n   AFTER INSERT ON \"main\".\"EquipmentPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'EquipmentPropertyValue', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'equipmentId', new.\"equipmentId\", 'equipmentPropertyId', new.\"equipmentPropertyId\", 'id', new.\"id\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_EquipmentPropertyValue_into_oplog;",
      "CREATE TRIGGER update_main_EquipmentPropertyValue_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'EquipmentPropertyValue', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'equipmentId', new.\"equipmentId\", 'equipmentPropertyId', new.\"equipmentPropertyId\", 'id', new.\"id\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'equipmentId', old.\"equipmentId\", 'equipmentPropertyId', old.\"equipmentPropertyId\", 'id', old.\"id\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_EquipmentPropertyValue_into_oplog;",
      "CREATE TRIGGER delete_main_EquipmentPropertyValue_into_oplog\n   AFTER DELETE ON \"main\".\"EquipmentPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'EquipmentPropertyValue', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'equipmentId', old.\"equipmentId\", 'equipmentPropertyId', old.\"equipmentPropertyId\", 'id', old.\"id\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_EquipmentPropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_EquipmentPropertyValue_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"EquipmentPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_EquipmentPropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_EquipmentPropertyValue_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_EquipmentPropertyValue_equipmentId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_EquipmentPropertyValue_equipmentId_into_oplog\n  AFTER INSERT ON \"main\".\"EquipmentPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Equipment') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Equipment', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Equipment\" WHERE \"id\" = new.\"equipmentId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_EquipmentPropertyValue_equipmentId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_EquipmentPropertyValue_equipmentId_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Equipment') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Equipment', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Equipment\" WHERE \"id\" = new.\"equipmentId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_EquipmentPropertyValue_equipmentPropertyId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_EquipmentPropertyValue_equipmentPropertyId_into_oplog\n  AFTER INSERT ON \"main\".\"EquipmentPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentProperty') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'EquipmentProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"EquipmentProperty\" WHERE \"id\" = new.\"equipmentPropertyId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_EquipmentPropertyValue_equipmentPropertyId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_EquipmentPropertyValue_equipmentPropertyId_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.EquipmentProperty') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'EquipmentProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"EquipmentProperty\" WHERE \"id\" = new.\"equipmentPropertyId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_EquipmentPropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_EquipmentPropertyValue_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"EquipmentPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_EquipmentPropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_EquipmentPropertyValue_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"EquipmentPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Feedback', 1);",
      "  /* Triggers for table Feedback */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_Feedback_primarykey;",
      "CREATE TRIGGER update_ensure_main_Feedback_primarykey\n  BEFORE UPDATE ON \"main\".\"Feedback\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_Feedback_into_oplog;",
      "CREATE TRIGGER insert_main_Feedback_into_oplog\n   AFTER INSERT ON \"main\".\"Feedback\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Feedback')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Feedback', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'tenantId', new.\"tenantId\", 'text', new.\"text\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Feedback_into_oplog;",
      "CREATE TRIGGER update_main_Feedback_into_oplog\n   AFTER UPDATE ON \"main\".\"Feedback\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Feedback')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Feedback', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'tenantId', new.\"tenantId\", 'text', new.\"text\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'tenantId', old.\"tenantId\", 'text', old.\"text\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Feedback_into_oplog;",
      "CREATE TRIGGER delete_main_Feedback_into_oplog\n   AFTER DELETE ON \"main\".\"Feedback\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Feedback')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Feedback', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'tenantId', old.\"tenantId\", 'text', old.\"text\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Feedback_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Feedback_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"Feedback\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Feedback_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Feedback_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"Feedback\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Feedback_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Feedback_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"Feedback\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Feedback_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Feedback_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"Feedback\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.File', 1);",
      "  /* Triggers for table File */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_File_primarykey;",
      "CREATE TRIGGER update_ensure_main_File_primarykey\n  BEFORE UPDATE ON \"main\".\"File\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_File_into_oplog;",
      "CREATE TRIGGER insert_main_File_into_oplog\n   AFTER INSERT ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.File')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'File', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogId', new.\"dailyLogId\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'id', new.\"id\", 'imageId', new.\"imageId\", 'locationLabel', new.\"locationLabel\", 'locationLatitude', cast(new.\"locationLatitude\" as TEXT), 'locationLongitude', cast(new.\"locationLongitude\" as TEXT), 'name', new.\"name\", 'projectId', new.\"projectId\", 'tenantId', new.\"tenantId\", 'type', new.\"type\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_File_into_oplog;",
      "CREATE TRIGGER update_main_File_into_oplog\n   AFTER UPDATE ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.File')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'File', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogId', new.\"dailyLogId\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'id', new.\"id\", 'imageId', new.\"imageId\", 'locationLabel', new.\"locationLabel\", 'locationLatitude', cast(new.\"locationLatitude\" as TEXT), 'locationLongitude', cast(new.\"locationLongitude\" as TEXT), 'name', new.\"name\", 'projectId', new.\"projectId\", 'tenantId', new.\"tenantId\", 'type', new.\"type\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogId', old.\"dailyLogId\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'id', old.\"id\", 'imageId', old.\"imageId\", 'locationLabel', old.\"locationLabel\", 'locationLatitude', cast(old.\"locationLatitude\" as TEXT), 'locationLongitude', cast(old.\"locationLongitude\" as TEXT), 'name', old.\"name\", 'projectId', old.\"projectId\", 'tenantId', old.\"tenantId\", 'type', old.\"type\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_File_into_oplog;",
      "CREATE TRIGGER delete_main_File_into_oplog\n   AFTER DELETE ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.File')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'File', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogId', old.\"dailyLogId\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'id', old.\"id\", 'imageId', old.\"imageId\", 'locationLabel', old.\"locationLabel\", 'locationLatitude', cast(old.\"locationLatitude\" as TEXT), 'locationLongitude', cast(old.\"locationLongitude\" as TEXT), 'name', old.\"name\", 'projectId', old.\"projectId\", 'tenantId', old.\"tenantId\", 'type', old.\"type\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_File_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_File_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"File\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_File_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_File_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_File_dailyLogId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_File_dailyLogId_into_oplog\n  AFTER INSERT ON \"main\".\"File\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLog', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLog\" WHERE \"id\" = new.\"dailyLogId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_File_dailyLogId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_File_dailyLogId_into_oplog\n   AFTER UPDATE ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLog', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLog\" WHERE \"id\" = new.\"dailyLogId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_File_imageId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_File_imageId_into_oplog\n  AFTER INSERT ON \"main\".\"File\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Image') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Image', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Image\" WHERE \"id\" = new.\"imageId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_File_imageId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_File_imageId_into_oplog\n   AFTER UPDATE ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Image') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Image', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Image\" WHERE \"id\" = new.\"imageId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_File_projectId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_File_projectId_into_oplog\n  AFTER INSERT ON \"main\".\"File\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Project', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Project\" WHERE \"id\" = new.\"projectId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_File_projectId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_File_projectId_into_oplog\n   AFTER UPDATE ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Project', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Project\" WHERE \"id\" = new.\"projectId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_File_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_File_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"File\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_File_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_File_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"File\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.FileProperty', 1);",
      "  /* Triggers for table FileProperty */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_FileProperty_primarykey;",
      "CREATE TRIGGER update_ensure_main_FileProperty_primarykey\n  BEFORE UPDATE ON \"main\".\"FileProperty\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_FileProperty_into_oplog;",
      "CREATE TRIGGER insert_main_FileProperty_into_oplog\n   AFTER INSERT ON \"main\".\"FileProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FileProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'FileProperty', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_FileProperty_into_oplog;",
      "CREATE TRIGGER update_main_FileProperty_into_oplog\n   AFTER UPDATE ON \"main\".\"FileProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FileProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'FileProperty', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_FileProperty_into_oplog;",
      "CREATE TRIGGER delete_main_FileProperty_into_oplog\n   AFTER DELETE ON \"main\".\"FileProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FileProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'FileProperty', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_FileProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_FileProperty_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"FileProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_FileProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_FileProperty_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"FileProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_FileProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_FileProperty_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"FileProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_FileProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_FileProperty_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"FileProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.FilePropertyValue', 1);",
      "  /* Triggers for table FilePropertyValue */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_FilePropertyValue_primarykey;",
      "CREATE TRIGGER update_ensure_main_FilePropertyValue_primarykey\n  BEFORE UPDATE ON \"main\".\"FilePropertyValue\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_FilePropertyValue_into_oplog;",
      "CREATE TRIGGER insert_main_FilePropertyValue_into_oplog\n   AFTER INSERT ON \"main\".\"FilePropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FilePropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'FilePropertyValue', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'fileId', new.\"fileId\", 'id', new.\"id\", 'propertyId', new.\"propertyId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_FilePropertyValue_into_oplog;",
      "CREATE TRIGGER update_main_FilePropertyValue_into_oplog\n   AFTER UPDATE ON \"main\".\"FilePropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FilePropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'FilePropertyValue', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'fileId', new.\"fileId\", 'id', new.\"id\", 'propertyId', new.\"propertyId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'fileId', old.\"fileId\", 'id', old.\"id\", 'propertyId', old.\"propertyId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_FilePropertyValue_into_oplog;",
      "CREATE TRIGGER delete_main_FilePropertyValue_into_oplog\n   AFTER DELETE ON \"main\".\"FilePropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FilePropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'FilePropertyValue', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'fileId', old.\"fileId\", 'id', old.\"id\", 'propertyId', old.\"propertyId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_FilePropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_FilePropertyValue_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"FilePropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_FilePropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_FilePropertyValue_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"FilePropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_FilePropertyValue_fileId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_FilePropertyValue_fileId_into_oplog\n  AFTER INSERT ON \"main\".\"FilePropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.File') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'File', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"File\" WHERE \"id\" = new.\"fileId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_FilePropertyValue_fileId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_FilePropertyValue_fileId_into_oplog\n   AFTER UPDATE ON \"main\".\"FilePropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.File') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'File', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"File\" WHERE \"id\" = new.\"fileId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_FilePropertyValue_propertyId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_FilePropertyValue_propertyId_into_oplog\n  AFTER INSERT ON \"main\".\"FilePropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FileProperty') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'FileProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"FileProperty\" WHERE \"id\" = new.\"propertyId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_FilePropertyValue_propertyId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_FilePropertyValue_propertyId_into_oplog\n   AFTER UPDATE ON \"main\".\"FilePropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.FileProperty') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'FileProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"FileProperty\" WHERE \"id\" = new.\"propertyId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_FilePropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_FilePropertyValue_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"FilePropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_FilePropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_FilePropertyValue_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"FilePropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Image', 1);",
      "  /* Triggers for table Image */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_Image_primarykey;",
      "CREATE TRIGGER update_ensure_main_Image_primarykey\n  BEFORE UPDATE ON \"main\".\"Image\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_Image_into_oplog;",
      "CREATE TRIGGER insert_main_Image_into_oplog\n   AFTER INSERT ON \"main\".\"Image\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Image')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Image', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'blurhash', new.\"blurhash\", 'bucketId', new.\"bucketId\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Image_into_oplog;",
      "CREATE TRIGGER update_main_Image_into_oplog\n   AFTER UPDATE ON \"main\".\"Image\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Image')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Image', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'blurhash', new.\"blurhash\", 'bucketId', new.\"bucketId\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'blurhash', old.\"blurhash\", 'bucketId', old.\"bucketId\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Image_into_oplog;",
      "CREATE TRIGGER delete_main_Image_into_oplog\n   AFTER DELETE ON \"main\".\"Image\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Image')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Image', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'blurhash', old.\"blurhash\", 'bucketId', old.\"bucketId\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Image_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Image_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"Image\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Image_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Image_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"Image\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Image_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Image_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"Image\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Image_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Image_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"Image\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.LocationEntry', 1);",
      "  /* Triggers for table LocationEntry */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_LocationEntry_primarykey;",
      "CREATE TRIGGER update_ensure_main_LocationEntry_primarykey\n  BEFORE UPDATE ON \"main\".\"LocationEntry\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_LocationEntry_into_oplog;",
      "CREATE TRIGGER insert_main_LocationEntry_into_oplog\n   AFTER INSERT ON \"main\".\"LocationEntry\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.LocationEntry')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'LocationEntry', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogId', new.\"dailyLogId\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'latitude', cast(new.\"latitude\" as TEXT), 'longitude', cast(new.\"longitude\" as TEXT), 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_LocationEntry_into_oplog;",
      "CREATE TRIGGER update_main_LocationEntry_into_oplog\n   AFTER UPDATE ON \"main\".\"LocationEntry\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.LocationEntry')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'LocationEntry', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogId', new.\"dailyLogId\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'latitude', cast(new.\"latitude\" as TEXT), 'longitude', cast(new.\"longitude\" as TEXT), 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogId', old.\"dailyLogId\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'latitude', cast(old.\"latitude\" as TEXT), 'longitude', cast(old.\"longitude\" as TEXT), 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_LocationEntry_into_oplog;",
      "CREATE TRIGGER delete_main_LocationEntry_into_oplog\n   AFTER DELETE ON \"main\".\"LocationEntry\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.LocationEntry')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'LocationEntry', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogId', old.\"dailyLogId\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'latitude', cast(old.\"latitude\" as TEXT), 'longitude', cast(old.\"longitude\" as TEXT), 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_LocationEntry_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_LocationEntry_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"LocationEntry\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_LocationEntry_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_LocationEntry_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"LocationEntry\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_LocationEntry_dailyLogId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_LocationEntry_dailyLogId_into_oplog\n  AFTER INSERT ON \"main\".\"LocationEntry\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLog', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLog\" WHERE \"id\" = new.\"dailyLogId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_LocationEntry_dailyLogId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_LocationEntry_dailyLogId_into_oplog\n   AFTER UPDATE ON \"main\".\"LocationEntry\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLog') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLog', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLog\" WHERE \"id\" = new.\"dailyLogId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_LocationEntry_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_LocationEntry_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"LocationEntry\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_LocationEntry_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_LocationEntry_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"LocationEntry\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Project', 1);",
      "  /* Triggers for table Project */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_Project_primarykey;",
      "CREATE TRIGGER update_ensure_main_Project_primarykey\n  BEFORE UPDATE ON \"main\".\"Project\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_Project_into_oplog;",
      "CREATE TRIGGER insert_main_Project_into_oplog\n   AFTER INSERT ON \"main\".\"Project\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Project', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'dueDate', new.\"dueDate\", 'id', new.\"id\", 'locationLabel', new.\"locationLabel\", 'locationLatitude', cast(new.\"locationLatitude\" as TEXT), 'locationLongitude', cast(new.\"locationLongitude\" as TEXT), 'name', new.\"name\", 'progress', cast(new.\"progress\" as TEXT), 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Project_into_oplog;",
      "CREATE TRIGGER update_main_Project_into_oplog\n   AFTER UPDATE ON \"main\".\"Project\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Project', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'dueDate', new.\"dueDate\", 'id', new.\"id\", 'locationLabel', new.\"locationLabel\", 'locationLatitude', cast(new.\"locationLatitude\" as TEXT), 'locationLongitude', cast(new.\"locationLongitude\" as TEXT), 'name', new.\"name\", 'progress', cast(new.\"progress\" as TEXT), 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'dueDate', old.\"dueDate\", 'id', old.\"id\", 'locationLabel', old.\"locationLabel\", 'locationLatitude', cast(old.\"locationLatitude\" as TEXT), 'locationLongitude', cast(old.\"locationLongitude\" as TEXT), 'name', old.\"name\", 'progress', cast(old.\"progress\" as TEXT), 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Project_into_oplog;",
      "CREATE TRIGGER delete_main_Project_into_oplog\n   AFTER DELETE ON \"main\".\"Project\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Project', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'dueDate', old.\"dueDate\", 'id', old.\"id\", 'locationLabel', old.\"locationLabel\", 'locationLatitude', cast(old.\"locationLatitude\" as TEXT), 'locationLongitude', cast(old.\"locationLongitude\" as TEXT), 'name', old.\"name\", 'progress', cast(old.\"progress\" as TEXT), 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Project_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Project_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"Project\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Project_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Project_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"Project\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Project_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Project_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"Project\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Project_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Project_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"Project\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.ProjectProperty', 1);",
      "  /* Triggers for table ProjectProperty */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_ProjectProperty_primarykey;",
      "CREATE TRIGGER update_ensure_main_ProjectProperty_primarykey\n  BEFORE UPDATE ON \"main\".\"ProjectProperty\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_ProjectProperty_into_oplog;",
      "CREATE TRIGGER insert_main_ProjectProperty_into_oplog\n   AFTER INSERT ON \"main\".\"ProjectProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ProjectProperty', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ProjectProperty_into_oplog;",
      "CREATE TRIGGER update_main_ProjectProperty_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ProjectProperty', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ProjectProperty_into_oplog;",
      "CREATE TRIGGER delete_main_ProjectProperty_into_oplog\n   AFTER DELETE ON \"main\".\"ProjectProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ProjectProperty', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ProjectProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ProjectProperty_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"ProjectProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ProjectProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ProjectProperty_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ProjectProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ProjectProperty_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"ProjectProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ProjectProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ProjectProperty_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.ProjectPropertyValue', 1);",
      "  /* Triggers for table ProjectPropertyValue */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_ProjectPropertyValue_primarykey;",
      "CREATE TRIGGER update_ensure_main_ProjectPropertyValue_primarykey\n  BEFORE UPDATE ON \"main\".\"ProjectPropertyValue\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_ProjectPropertyValue_into_oplog;",
      "CREATE TRIGGER insert_main_ProjectPropertyValue_into_oplog\n   AFTER INSERT ON \"main\".\"ProjectPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ProjectPropertyValue', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'projectId', new.\"projectId\", 'projectPropertyId', new.\"projectPropertyId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ProjectPropertyValue_into_oplog;",
      "CREATE TRIGGER update_main_ProjectPropertyValue_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ProjectPropertyValue', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'projectId', new.\"projectId\", 'projectPropertyId', new.\"projectPropertyId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'projectId', old.\"projectId\", 'projectPropertyId', old.\"projectPropertyId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ProjectPropertyValue_into_oplog;",
      "CREATE TRIGGER delete_main_ProjectPropertyValue_into_oplog\n   AFTER DELETE ON \"main\".\"ProjectPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ProjectPropertyValue', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'projectId', old.\"projectId\", 'projectPropertyId', old.\"projectPropertyId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ProjectPropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ProjectPropertyValue_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"ProjectPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ProjectPropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ProjectPropertyValue_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ProjectPropertyValue_projectId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ProjectPropertyValue_projectId_into_oplog\n  AFTER INSERT ON \"main\".\"ProjectPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Project', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Project\" WHERE \"id\" = new.\"projectId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ProjectPropertyValue_projectId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ProjectPropertyValue_projectId_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Project', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Project\" WHERE \"id\" = new.\"projectId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ProjectPropertyValue_projectPropertyId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ProjectPropertyValue_projectPropertyId_into_oplog\n  AFTER INSERT ON \"main\".\"ProjectPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectProperty') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'ProjectProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"ProjectProperty\" WHERE \"id\" = new.\"projectPropertyId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ProjectPropertyValue_projectPropertyId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ProjectPropertyValue_projectPropertyId_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ProjectProperty') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'ProjectProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"ProjectProperty\" WHERE \"id\" = new.\"projectPropertyId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ProjectPropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ProjectPropertyValue_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"ProjectPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ProjectPropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ProjectPropertyValue_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"ProjectPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Task', 1);",
      "  /* Triggers for table Task */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_Task_primarykey;",
      "CREATE TRIGGER update_ensure_main_Task_primarykey\n  BEFORE UPDATE ON \"main\".\"Task\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_Task_into_oplog;",
      "CREATE TRIGGER insert_main_Task_into_oplog\n   AFTER INSERT ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Task', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'parentId', new.\"parentId\", 'projectId', new.\"projectId\", 'statusId', new.\"statusId\", 'systemStatusId', new.\"systemStatusId\", 'taskStatusId', new.\"taskStatusId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Task_into_oplog;",
      "CREATE TRIGGER update_main_Task_into_oplog\n   AFTER UPDATE ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Task', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'parentId', new.\"parentId\", 'projectId', new.\"projectId\", 'statusId', new.\"statusId\", 'systemStatusId', new.\"systemStatusId\", 'taskStatusId', new.\"taskStatusId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'parentId', old.\"parentId\", 'projectId', old.\"projectId\", 'statusId', old.\"statusId\", 'systemStatusId', old.\"systemStatusId\", 'taskStatusId', old.\"taskStatusId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Task_into_oplog;",
      "CREATE TRIGGER delete_main_Task_into_oplog\n   AFTER DELETE ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Task', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'parentId', old.\"parentId\", 'projectId', old.\"projectId\", 'statusId', old.\"statusId\", 'systemStatusId', old.\"systemStatusId\", 'taskStatusId', old.\"taskStatusId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Task_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Task_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"Task\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Task_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Task_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Task_parentId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Task_parentId_into_oplog\n  AFTER INSERT ON \"main\".\"Task\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"parentId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Task_parentId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Task_parentId_into_oplog\n   AFTER UPDATE ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"parentId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Task_projectId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Task_projectId_into_oplog\n  AFTER INSERT ON \"main\".\"Task\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Project', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Project\" WHERE \"id\" = new.\"projectId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Task_projectId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Task_projectId_into_oplog\n   AFTER UPDATE ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Project') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Project', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Project\" WHERE \"id\" = new.\"projectId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Task_taskStatusId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Task_taskStatusId_into_oplog\n  AFTER INSERT ON \"main\".\"Task\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskStatus') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'TaskStatus', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"TaskStatus\" WHERE \"id\" = new.\"taskStatusId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Task_taskStatusId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Task_taskStatusId_into_oplog\n   AFTER UPDATE ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskStatus') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'TaskStatus', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"TaskStatus\" WHERE \"id\" = new.\"taskStatusId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Task_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Task_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"Task\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Task_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Task_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"Task\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.TaskProperty', 1);",
      "  /* Triggers for table TaskProperty */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_TaskProperty_primarykey;",
      "CREATE TRIGGER update_ensure_main_TaskProperty_primarykey\n  BEFORE UPDATE ON \"main\".\"TaskProperty\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_TaskProperty_into_oplog;",
      "CREATE TRIGGER insert_main_TaskProperty_into_oplog\n   AFTER INSERT ON \"main\".\"TaskProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskProperty', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_TaskProperty_into_oplog;",
      "CREATE TRIGGER update_main_TaskProperty_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskProperty', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'order', new.\"order\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_TaskProperty_into_oplog;",
      "CREATE TRIGGER delete_main_TaskProperty_into_oplog\n   AFTER DELETE ON \"main\".\"TaskProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskProperty')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskProperty', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'order', old.\"order\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskProperty_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"TaskProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskProperty_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskProperty_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskProperty_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"TaskProperty\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskProperty_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskProperty_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskProperty\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.TaskPropertyValue', 1);",
      "  /* Triggers for table TaskPropertyValue */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_TaskPropertyValue_primarykey;",
      "CREATE TRIGGER update_ensure_main_TaskPropertyValue_primarykey\n  BEFORE UPDATE ON \"main\".\"TaskPropertyValue\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_TaskPropertyValue_into_oplog;",
      "CREATE TRIGGER insert_main_TaskPropertyValue_into_oplog\n   AFTER INSERT ON \"main\".\"TaskPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskPropertyValue', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'taskId', new.\"taskId\", 'taskPropertyId', new.\"taskPropertyId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_TaskPropertyValue_into_oplog;",
      "CREATE TRIGGER update_main_TaskPropertyValue_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskPropertyValue', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'taskId', new.\"taskId\", 'taskPropertyId', new.\"taskPropertyId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'value', new.\"value\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'taskId', old.\"taskId\", 'taskPropertyId', old.\"taskPropertyId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_TaskPropertyValue_into_oplog;",
      "CREATE TRIGGER delete_main_TaskPropertyValue_into_oplog\n   AFTER DELETE ON \"main\".\"TaskPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskPropertyValue')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskPropertyValue', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'taskId', old.\"taskId\", 'taskPropertyId', old.\"taskPropertyId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'value', old.\"value\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskPropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskPropertyValue_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"TaskPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskPropertyValue_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskPropertyValue_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskPropertyValue_taskId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskPropertyValue_taskId_into_oplog\n  AFTER INSERT ON \"main\".\"TaskPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"taskId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskPropertyValue_taskId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskPropertyValue_taskId_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"taskId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskPropertyValue_taskPropertyId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskPropertyValue_taskPropertyId_into_oplog\n  AFTER INSERT ON \"main\".\"TaskPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskProperty') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'TaskProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"TaskProperty\" WHERE \"id\" = new.\"taskPropertyId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskPropertyValue_taskPropertyId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskPropertyValue_taskPropertyId_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskProperty') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'TaskProperty', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"TaskProperty\" WHERE \"id\" = new.\"taskPropertyId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskPropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskPropertyValue_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"TaskPropertyValue\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskPropertyValue_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskPropertyValue_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskPropertyValue\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.TaskStatus', 1);",
      "  /* Triggers for table TaskStatus */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_TaskStatus_primarykey;",
      "CREATE TRIGGER update_ensure_main_TaskStatus_primarykey\n  BEFORE UPDATE ON \"main\".\"TaskStatus\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_TaskStatus_into_oplog;",
      "CREATE TRIGGER insert_main_TaskStatus_into_oplog\n   AFTER INSERT ON \"main\".\"TaskStatus\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskStatus')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskStatus', 'INSERT', json_object('id', new.\"id\"), json_object('createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'displayOrder', new.\"displayOrder\", 'iconColor', new.\"iconColor\", 'id', new.\"id\", 'name', new.\"name\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_TaskStatus_into_oplog;",
      "CREATE TRIGGER update_main_TaskStatus_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskStatus\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskStatus')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskStatus', 'UPDATE', json_object('id', new.\"id\"), json_object('createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'displayOrder', new.\"displayOrder\", 'iconColor', new.\"iconColor\", 'id', new.\"id\", 'name', new.\"name\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\"), json_object('createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'displayOrder', old.\"displayOrder\", 'iconColor', old.\"iconColor\", 'id', old.\"id\", 'name', old.\"name\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_TaskStatus_into_oplog;",
      "CREATE TRIGGER delete_main_TaskStatus_into_oplog\n   AFTER DELETE ON \"main\".\"TaskStatus\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TaskStatus')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TaskStatus', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'displayOrder', old.\"displayOrder\", 'iconColor', old.\"iconColor\", 'id', old.\"id\", 'name', old.\"name\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskStatus_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskStatus_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"TaskStatus\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskStatus_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskStatus_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskStatus\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TaskStatus_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TaskStatus_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"TaskStatus\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TaskStatus_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TaskStatus_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"TaskStatus\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Tenant', 1);",
      "  /* Triggers for table Tenant */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_Tenant_primarykey;",
      "CREATE TRIGGER update_ensure_main_Tenant_primarykey\n  BEFORE UPDATE ON \"main\".\"Tenant\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_Tenant_into_oplog;",
      "CREATE TRIGGER insert_main_Tenant_into_oplog\n   AFTER INSERT ON \"main\".\"Tenant\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Tenant', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'settings', new.\"settings\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Tenant_into_oplog;",
      "CREATE TRIGGER update_main_Tenant_into_oplog\n   AFTER UPDATE ON \"main\".\"Tenant\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Tenant', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'name', new.\"name\", 'settings', new.\"settings\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'settings', old.\"settings\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Tenant_into_oplog;",
      "CREATE TRIGGER delete_main_Tenant_into_oplog\n   AFTER DELETE ON \"main\".\"Tenant\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Tenant', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'name', old.\"name\", 'settings', old.\"settings\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_Tenant_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Tenant_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"Tenant\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Tenant_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Tenant_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"Tenant\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.TenantUser', 1);",
      "  /* Triggers for table TenantUser */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_TenantUser_primarykey;",
      "CREATE TRIGGER update_ensure_main_TenantUser_primarykey\n  BEFORE UPDATE ON \"main\".\"TenantUser\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_TenantUser_into_oplog;",
      "CREATE TRIGGER insert_main_TenantUser_into_oplog\n   AFTER INSERT ON \"main\".\"TenantUser\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TenantUser')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TenantUser', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'inviteEmail', new.\"inviteEmail\", 'inviteSentAt', new.\"inviteSentAt\", 'inviteStatus', new.\"inviteStatus\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'userId', new.\"userId\", 'userRole', new.\"userRole\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_TenantUser_into_oplog;",
      "CREATE TRIGGER update_main_TenantUser_into_oplog\n   AFTER UPDATE ON \"main\".\"TenantUser\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TenantUser')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TenantUser', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'inviteEmail', new.\"inviteEmail\", 'inviteSentAt', new.\"inviteSentAt\", 'inviteStatus', new.\"inviteStatus\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'userId', new.\"userId\", 'userRole', new.\"userRole\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'inviteEmail', old.\"inviteEmail\", 'inviteSentAt', old.\"inviteSentAt\", 'inviteStatus', old.\"inviteStatus\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'userId', old.\"userId\", 'userRole', old.\"userRole\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_TenantUser_into_oplog;",
      "CREATE TRIGGER delete_main_TenantUser_into_oplog\n   AFTER DELETE ON \"main\".\"TenantUser\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TenantUser')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TenantUser', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'inviteEmail', old.\"inviteEmail\", 'inviteSentAt', old.\"inviteSentAt\", 'inviteStatus', old.\"inviteStatus\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'userId', old.\"userId\", 'userRole', old.\"userRole\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TenantUser_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TenantUser_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"TenantUser\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TenantUser_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TenantUser_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"TenantUser\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TenantUser_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TenantUser_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"TenantUser\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TenantUser_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TenantUser_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"TenantUser\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TenantUser_userId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TenantUser_userId_into_oplog\n  AFTER INSERT ON \"main\".\"TenantUser\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TenantUser_userId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TenantUser_userId_into_oplog\n   AFTER UPDATE ON \"main\".\"TenantUser\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.TimeBlock', 1);",
      "  /* Triggers for table TimeBlock */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_TimeBlock_primarykey;",
      "CREATE TRIGGER update_ensure_main_TimeBlock_primarykey\n  BEFORE UPDATE ON \"main\".\"TimeBlock\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_TimeBlock_into_oplog;",
      "CREATE TRIGGER insert_main_TimeBlock_into_oplog\n   AFTER INSERT ON \"main\".\"TimeBlock\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TimeBlock')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TimeBlock', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogItemId', new.\"dailyLogItemId\", 'deletedAt', new.\"deletedAt\", 'duration', new.\"duration\", 'entryType', new.\"entryType\", 'id', new.\"id\", 'rangeEndAt', new.\"rangeEndAt\", 'rangeStartAt', new.\"rangeStartAt\", 'tenantId', new.\"tenantId\", 'timerEndAddress', new.\"timerEndAddress\", 'timerEndAt', new.\"timerEndAt\", 'timerEndLatitude', cast(new.\"timerEndLatitude\" as TEXT), 'timerEndLongitude', cast(new.\"timerEndLongitude\" as TEXT), 'timerStartAddress', new.\"timerStartAddress\", 'timerStartAt', new.\"timerStartAt\", 'timerStartLatitude', cast(new.\"timerStartLatitude\" as TEXT), 'timerStartLongitude', cast(new.\"timerStartLongitude\" as TEXT), 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_TimeBlock_into_oplog;",
      "CREATE TRIGGER update_main_TimeBlock_into_oplog\n   AFTER UPDATE ON \"main\".\"TimeBlock\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TimeBlock')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TimeBlock', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'dailyLogItemId', new.\"dailyLogItemId\", 'deletedAt', new.\"deletedAt\", 'duration', new.\"duration\", 'entryType', new.\"entryType\", 'id', new.\"id\", 'rangeEndAt', new.\"rangeEndAt\", 'rangeStartAt', new.\"rangeStartAt\", 'tenantId', new.\"tenantId\", 'timerEndAddress', new.\"timerEndAddress\", 'timerEndAt', new.\"timerEndAt\", 'timerEndLatitude', cast(new.\"timerEndLatitude\" as TEXT), 'timerEndLongitude', cast(new.\"timerEndLongitude\" as TEXT), 'timerStartAddress', new.\"timerStartAddress\", 'timerStartAt', new.\"timerStartAt\", 'timerStartLatitude', cast(new.\"timerStartLatitude\" as TEXT), 'timerStartLongitude', cast(new.\"timerStartLongitude\" as TEXT), 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogItemId', old.\"dailyLogItemId\", 'deletedAt', old.\"deletedAt\", 'duration', old.\"duration\", 'entryType', old.\"entryType\", 'id', old.\"id\", 'rangeEndAt', old.\"rangeEndAt\", 'rangeStartAt', old.\"rangeStartAt\", 'tenantId', old.\"tenantId\", 'timerEndAddress', old.\"timerEndAddress\", 'timerEndAt', old.\"timerEndAt\", 'timerEndLatitude', cast(old.\"timerEndLatitude\" as TEXT), 'timerEndLongitude', cast(old.\"timerEndLongitude\" as TEXT), 'timerStartAddress', old.\"timerStartAddress\", 'timerStartAt', old.\"timerStartAt\", 'timerStartLatitude', cast(old.\"timerStartLatitude\" as TEXT), 'timerStartLongitude', cast(old.\"timerStartLongitude\" as TEXT), 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_TimeBlock_into_oplog;",
      "CREATE TRIGGER delete_main_TimeBlock_into_oplog\n   AFTER DELETE ON \"main\".\"TimeBlock\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.TimeBlock')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'TimeBlock', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'dailyLogItemId', old.\"dailyLogItemId\", 'deletedAt', old.\"deletedAt\", 'duration', old.\"duration\", 'entryType', old.\"entryType\", 'id', old.\"id\", 'rangeEndAt', old.\"rangeEndAt\", 'rangeStartAt', old.\"rangeStartAt\", 'tenantId', old.\"tenantId\", 'timerEndAddress', old.\"timerEndAddress\", 'timerEndAt', old.\"timerEndAt\", 'timerEndLatitude', cast(old.\"timerEndLatitude\" as TEXT), 'timerEndLongitude', cast(old.\"timerEndLongitude\" as TEXT), 'timerStartAddress', old.\"timerStartAddress\", 'timerStartAt', old.\"timerStartAt\", 'timerStartLatitude', cast(old.\"timerStartLatitude\" as TEXT), 'timerStartLongitude', cast(old.\"timerStartLongitude\" as TEXT), 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TimeBlock_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TimeBlock_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"TimeBlock\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TimeBlock_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TimeBlock_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"TimeBlock\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TimeBlock_dailyLogItemId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TimeBlock_dailyLogItemId_into_oplog\n  AFTER INSERT ON \"main\".\"TimeBlock\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLogItem') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLogItem', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLogItem\" WHERE \"id\" = new.\"dailyLogItemId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TimeBlock_dailyLogItemId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TimeBlock_dailyLogItemId_into_oplog\n   AFTER UPDATE ON \"main\".\"TimeBlock\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.DailyLogItem') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'DailyLogItem', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"DailyLogItem\" WHERE \"id\" = new.\"dailyLogItemId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_TimeBlock_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_TimeBlock_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"TimeBlock\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_TimeBlock_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_TimeBlock_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"TimeBlock\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.User', 1);",
      "  /* Triggers for table User */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_User_primarykey;",
      "CREATE TRIGGER update_ensure_main_User_primarykey\n  BEFORE UPDATE ON \"main\".\"User\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_User_into_oplog;",
      "CREATE TRIGGER insert_main_User_into_oplog\n   AFTER INSERT ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'User', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'currentTenantId', new.\"currentTenantId\", 'deletedAt', new.\"deletedAt\", 'email', new.\"email\", 'id', new.\"id\", 'imageId', new.\"imageId\", 'name', new.\"name\", 'preferredLanguage', new.\"preferredLanguage\", 'settings', new.\"settings\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_User_into_oplog;",
      "CREATE TRIGGER update_main_User_into_oplog\n   AFTER UPDATE ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'User', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'currentTenantId', new.\"currentTenantId\", 'deletedAt', new.\"deletedAt\", 'email', new.\"email\", 'id', new.\"id\", 'imageId', new.\"imageId\", 'name', new.\"name\", 'preferredLanguage', new.\"preferredLanguage\", 'settings', new.\"settings\", 'updatedAt', new.\"updatedAt\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'currentTenantId', old.\"currentTenantId\", 'deletedAt', old.\"deletedAt\", 'email', old.\"email\", 'id', old.\"id\", 'imageId', old.\"imageId\", 'name', old.\"name\", 'preferredLanguage', old.\"preferredLanguage\", 'settings', old.\"settings\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_User_into_oplog;",
      "CREATE TRIGGER delete_main_User_into_oplog\n   AFTER DELETE ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'User', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'currentTenantId', old.\"currentTenantId\", 'deletedAt', old.\"deletedAt\", 'email', old.\"email\", 'id', old.\"id\", 'imageId', old.\"imageId\", 'name', old.\"name\", 'preferredLanguage', old.\"preferredLanguage\", 'settings', old.\"settings\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_User_currentTenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_User_currentTenantId_into_oplog\n  AFTER INSERT ON \"main\".\"User\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"currentTenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_User_currentTenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_User_currentTenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"currentTenantId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_User_imageId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_User_imageId_into_oplog\n  AFTER INSERT ON \"main\".\"User\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Image') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Image', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Image\" WHERE \"id\" = new.\"imageId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_User_imageId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_User_imageId_into_oplog\n   AFTER UPDATE ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Image') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Image', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Image\" WHERE \"id\" = new.\"imageId\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.UserTask', 1);",
      "  /* Triggers for table UserTask */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_UserTask_primarykey;",
      "CREATE TRIGGER update_ensure_main_UserTask_primarykey\n  BEFORE UPDATE ON \"main\".\"UserTask\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_UserTask_into_oplog;",
      "CREATE TRIGGER insert_main_UserTask_into_oplog\n   AFTER INSERT ON \"main\".\"UserTask\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.UserTask')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'UserTask', 'INSERT', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'taskId', new.\"taskId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'userId', new.\"userId\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_UserTask_into_oplog;",
      "CREATE TRIGGER update_main_UserTask_into_oplog\n   AFTER UPDATE ON \"main\".\"UserTask\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.UserTask')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'UserTask', 'UPDATE', json_object('id', new.\"id\"), json_object('archivedAt', new.\"archivedAt\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'deletedAt', new.\"deletedAt\", 'id', new.\"id\", 'taskId', new.\"taskId\", 'tenantId', new.\"tenantId\", 'updatedAt', new.\"updatedAt\", 'userId', new.\"userId\"), json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'taskId', old.\"taskId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'userId', old.\"userId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_UserTask_into_oplog;",
      "CREATE TRIGGER delete_main_UserTask_into_oplog\n   AFTER DELETE ON \"main\".\"UserTask\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.UserTask')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'UserTask', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('archivedAt', old.\"archivedAt\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'deletedAt', old.\"deletedAt\", 'id', old.\"id\", 'taskId', old.\"taskId\", 'tenantId', old.\"tenantId\", 'updatedAt', old.\"updatedAt\", 'userId', old.\"userId\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_UserTask_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_UserTask_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"UserTask\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_UserTask_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_UserTask_createdBy_into_oplog\n   AFTER UPDATE ON \"main\".\"UserTask\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_UserTask_taskId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_UserTask_taskId_into_oplog\n  AFTER INSERT ON \"main\".\"UserTask\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"taskId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_UserTask_taskId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_UserTask_taskId_into_oplog\n   AFTER UPDATE ON \"main\".\"UserTask\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Task') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Task', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Task\" WHERE \"id\" = new.\"taskId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_UserTask_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_UserTask_tenantId_into_oplog\n  AFTER INSERT ON \"main\".\"UserTask\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_UserTask_tenantId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_UserTask_tenantId_into_oplog\n   AFTER UPDATE ON \"main\".\"UserTask\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Tenant') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Tenant', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Tenant\" WHERE \"id\" = new.\"tenantId\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_UserTask_userId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_UserTask_userId_into_oplog\n  AFTER INSERT ON \"main\".\"UserTask\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_UserTask_userId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_UserTask_userId_into_oplog\n   AFTER UPDATE ON \"main\".\"UserTask\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"userId\";\nEND;"
    ],
    "version": "20240119200525_387"
  }
]
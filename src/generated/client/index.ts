import { z } from 'zod';
import type { Prisma } from './prismaClient';
import { type TableSchema, DbSchema, Relation, ElectricClient, type HKT } from 'electric-sql/client/model';
import migrations from './migrations';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null;


export const JsonValue: z.ZodType<Prisma.JsonValue> = z.union([
  z.null(),
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue)),
]);

export type JsonValueType = z.infer<typeof JsonValue>;

export const NullableJsonValue = JsonValue
  .nullable();

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValue: z.ZodType<Prisma.InputJsonValue> = z.union([
  z.null(),
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(InputJsonValue.nullable())),
  z.lazy(() => z.record(InputJsonValue.nullable())),
]);

export type InputJsonValueType = z.infer<typeof InputJsonValue>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const ApiKeyScalarFieldEnumSchema = z.enum(['id','name','createdAt','tenantId','userId']);

export const DailyLogItemScalarFieldEnumSchema = z.enum(['id','note','isNoteVisible','itemType','createdAt','updatedAt','archivedAt','deletedAt','createdBy','taskId','dailyLogId','tenantId','equipmentId']);

export const DailyLogScalarFieldEnumSchema = z.enum(['id','date','status','note','rating','ratingNote','managerNote','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const EquipmentPropertyScalarFieldEnumSchema = z.enum(['id','name','order','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const EquipmentPropertyValueScalarFieldEnumSchema = z.enum(['id','value','createdAt','updatedAt','archivedAt','deletedAt','createdBy','equipmentId','equipmentPropertyId','tenantId']);

export const EquipmentScalarFieldEnumSchema = z.enum(['id','name','type','organization','description','updatedAt','createdAt','archivedAt','deletedAt','createdBy','tenantId','userId']);

export const FeedbackScalarFieldEnumSchema = z.enum(['id','text','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const FilePropertyScalarFieldEnumSchema = z.enum(['id','name','order','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const FilePropertyValueScalarFieldEnumSchema = z.enum(['id','value','createdAt','updatedAt','archivedAt','deletedAt','createdBy','fileId','propertyId','tenantId']);

export const FileScalarFieldEnumSchema = z.enum(['id','description','locationLabel','locationLatitude','locationLongitude','name','type','createdAt','updatedAt','archivedAt','deletedAt','imageId','createdBy','tenantId','projectId','dailyLogId']);

export const ImageScalarFieldEnumSchema = z.enum(['id','bucketId','blurhash','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]);

export const LocationEntryScalarFieldEnumSchema = z.enum(['id','latitude','longitude','createdAt','updatedAt','archivedAt','deletedAt','createdBy','dailyLogId','tenantId']);

export const ProjectPropertyScalarFieldEnumSchema = z.enum(['id','name','order','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const ProjectPropertyValueScalarFieldEnumSchema = z.enum(['id','value','createdAt','updatedAt','archivedAt','deletedAt','createdBy','projectId','projectPropertyId','tenantId']);

export const ProjectScalarFieldEnumSchema = z.enum(['id','name','progress','dueDate','description','locationLabel','locationLatitude','locationLongitude','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const TaskPropertyScalarFieldEnumSchema = z.enum(['id','name','order','createdAt','updatedAt','archivedAt','deletedAt','createdBy','tenantId']);

export const TaskPropertyValueScalarFieldEnumSchema = z.enum(['id','value','createdAt','updatedAt','archivedAt','deletedAt','createdBy','taskPropertyId','taskId','tenantId']);

export const TaskScalarFieldEnumSchema = z.enum(['id','description','name','statusId','systemStatusId','createdAt','updatedAt','archivedAt','deletedAt','createdBy','projectId','tenantId','parentId','taskStatusId']);

export const TaskStatusScalarFieldEnumSchema = z.enum(['id','displayOrder','iconColor','name','createdAt','updatedAt','deletedAt','createdBy','tenantId']);

export const TenantScalarFieldEnumSchema = z.enum(['id','name','settings','createdAt','updatedAt','archivedAt','deletedAt','createdBy']);

export const TenantUserScalarFieldEnumSchema = z.enum(['id','userRole','inviteEmail','inviteSentAt','inviteStatus','createdAt','updatedAt','archivedAt','deletedAt','createdBy','userId','tenantId']);

export const TimeBlockScalarFieldEnumSchema = z.enum(['id','duration','entryType','rangeStartAt','rangeEndAt','timerStartLatitude','timerStartLongitude','timerStartAddress','timerStartAt','timerEndAt','timerEndLatitude','timerEndLongitude','timerEndAddress','createdAt','updatedAt','archivedAt','deletedAt','createdBy','dailyLogItemId','tenantId']);

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const UserScalarFieldEnumSchema = z.enum(['id','email','name','preferredLanguage','settings','createdAt','updatedAt','archivedAt','deletedAt','imageId','currentTenantId']);

export const UserTaskScalarFieldEnumSchema = z.enum(['id','createdAt','updatedAt','archivedAt','deletedAt','createdBy','taskId','tenantId','userId']);
/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// API KEY SCHEMA
/////////////////////////////////////////

export const ApiKeySchema = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  tenantId: z.string(),
  userId: z.string().nullable(),
})

export type ApiKey = z.infer<typeof ApiKeySchema>

/////////////////////////////////////////
// DAILY LOG SCHEMA
/////////////////////////////////////////

export const DailyLogSchema = z.object({
  id: z.string(),
  date: z.coerce.date().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number().int().gte(-2147483648).lte(2147483647),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type DailyLog = z.infer<typeof DailyLogSchema>

/////////////////////////////////////////
// DAILY LOG ITEM SCHEMA
/////////////////////////////////////////

export const DailyLogItemSchema = z.object({
  id: z.string(),
  note: z.string().nullable(),
  isNoteVisible: z.boolean().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  taskId: z.string().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().nullable(),
})

export type DailyLogItem = z.infer<typeof DailyLogItemSchema>

/////////////////////////////////////////
// EQUIPMENT SCHEMA
/////////////////////////////////////////

export const EquipmentSchema = z.object({
  id: z.string(),
  name: z.string().nullable(),
  type: z.string().nullable(),
  organization: z.string().nullable(),
  description: z.string().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
  userId: z.string().nullable(),
})

export type Equipment = z.infer<typeof EquipmentSchema>

/////////////////////////////////////////
// EQUIPMENT PROPERTY SCHEMA
/////////////////////////////////////////

export const EquipmentPropertySchema = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type EquipmentProperty = z.infer<typeof EquipmentPropertySchema>

/////////////////////////////////////////
// EQUIPMENT PROPERTY VALUE SCHEMA
/////////////////////////////////////////

export const EquipmentPropertyValueSchema = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  equipmentId: z.string(),
  equipmentPropertyId: z.string(),
  tenantId: z.string(),
})

export type EquipmentPropertyValue = z.infer<typeof EquipmentPropertyValueSchema>

/////////////////////////////////////////
// FEEDBACK SCHEMA
/////////////////////////////////////////

export const FeedbackSchema = z.object({
  id: z.string(),
  text: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type Feedback = z.infer<typeof FeedbackSchema>

/////////////////////////////////////////
// FILE SCHEMA
/////////////////////////////////////////

export const FileSchema = z.object({
  id: z.string(),
  description: z.string().nullable(),
  locationLabel: z.string().nullable(),
  locationLatitude: z.number().or(z.nan()).nullable(),
  locationLongitude: z.number().or(z.nan()).nullable(),
  name: z.string().nullable(),
  type: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  imageId: z.string(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
  projectId: z.string().nullable(),
  dailyLogId: z.string().nullable(),
})

export type File = z.infer<typeof FileSchema>

/////////////////////////////////////////
// FILE PROPERTY SCHEMA
/////////////////////////////////////////

export const FilePropertySchema = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type FileProperty = z.infer<typeof FilePropertySchema>

/////////////////////////////////////////
// FILE PROPERTY VALUE SCHEMA
/////////////////////////////////////////

export const FilePropertyValueSchema = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  fileId: z.string(),
  propertyId: z.string(),
  tenantId: z.string(),
})

export type FilePropertyValue = z.infer<typeof FilePropertyValueSchema>

/////////////////////////////////////////
// IMAGE SCHEMA
/////////////////////////////////////////

export const ImageSchema = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type Image = z.infer<typeof ImageSchema>

/////////////////////////////////////////
// LOCATION ENTRY SCHEMA
/////////////////////////////////////////

export const LocationEntrySchema = z.object({
  id: z.string(),
  latitude: z.number().or(z.nan()).nullable(),
  longitude: z.number().or(z.nan()).nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
})

export type LocationEntry = z.infer<typeof LocationEntrySchema>

/////////////////////////////////////////
// PROJECT SCHEMA
/////////////////////////////////////////

export const ProjectSchema = z.object({
  id: z.string(),
  name: z.string().nullable(),
  progress: z.number().or(z.nan()).nullable(),
  dueDate: z.coerce.date().nullable(),
  description: z.string().nullable(),
  locationLabel: z.string().nullable(),
  locationLatitude: z.number().or(z.nan()).nullable(),
  locationLongitude: z.number().or(z.nan()).nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type Project = z.infer<typeof ProjectSchema>

/////////////////////////////////////////
// PROJECT PROPERTY SCHEMA
/////////////////////////////////////////

export const ProjectPropertySchema = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type ProjectProperty = z.infer<typeof ProjectPropertySchema>

/////////////////////////////////////////
// PROJECT PROPERTY VALUE SCHEMA
/////////////////////////////////////////

export const ProjectPropertyValueSchema = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  projectId: z.string(),
  projectPropertyId: z.string(),
  tenantId: z.string(),
})

export type ProjectPropertyValue = z.infer<typeof ProjectPropertyValueSchema>

/////////////////////////////////////////
// TASK SCHEMA
/////////////////////////////////////////

export const TaskSchema = z.object({
  id: z.string(),
  description: z.string().nullable(),
  name: z.string().nullable(),
  statusId: z.string().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().nullable(),
  taskStatusId: z.string().nullable(),
})

export type Task = z.infer<typeof TaskSchema>

/////////////////////////////////////////
// TASK PROPERTY SCHEMA
/////////////////////////////////////////

export const TaskPropertySchema = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type TaskProperty = z.infer<typeof TaskPropertySchema>

/////////////////////////////////////////
// TASK PROPERTY VALUE SCHEMA
/////////////////////////////////////////

export const TaskPropertyValueSchema = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  taskPropertyId: z.string(),
  taskId: z.string(),
  tenantId: z.string(),
})

export type TaskPropertyValue = z.infer<typeof TaskPropertyValueSchema>

/////////////////////////////////////////
// TASK STATUS SCHEMA
/////////////////////////////////////////

export const TaskStatusSchema = z.object({
  id: z.string(),
  displayOrder: z.number().int().gte(-2147483648).lte(2147483647),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  tenantId: z.string(),
})

export type TaskStatus = z.infer<typeof TaskStatusSchema>

/////////////////////////////////////////
// TENANT SCHEMA
/////////////////////////////////////////

export const TenantSchema = z.object({
  id: z.string(),
  name: z.string(),
  settings: InputJsonValue,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
})

export type Tenant = z.infer<typeof TenantSchema>

/////////////////////////////////////////
// TENANT USER SCHEMA
/////////////////////////////////////////

export const TenantUserSchema = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().nullable(),
  inviteSentAt: z.coerce.date().nullable(),
  inviteStatus: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  userId: z.string().nullable(),
  tenantId: z.string(),
})

export type TenantUser = z.infer<typeof TenantUserSchema>

/////////////////////////////////////////
// TIME BLOCK SCHEMA
/////////////////////////////////////////

export const TimeBlockSchema = z.object({
  id: z.string(),
  duration: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().nullable(),
  rangeEndAt: z.coerce.date().nullable(),
  timerStartLatitude: z.number().or(z.nan()).nullable(),
  timerStartLongitude: z.number().or(z.nan()).nullable(),
  timerStartAddress: z.string().nullable(),
  timerStartAt: z.coerce.date().nullable(),
  timerEndAt: z.coerce.date().nullable(),
  timerEndLatitude: z.number().or(z.nan()).nullable(),
  timerEndLongitude: z.number().or(z.nan()).nullable(),
  timerEndAddress: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string(),
  dailyLogItemId: z.string(),
  tenantId: z.string(),
})

export type TimeBlock = z.infer<typeof TimeBlockSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string(),
  email: z.string().nullable(),
  name: z.string().nullable(),
  preferredLanguage: z.string().nullable(),
  settings: InputJsonValue,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  imageId: z.string().nullable(),
  currentTenantId: z.string(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// USER TASK SCHEMA
/////////////////////////////////////////

export const UserTaskSchema = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
  deletedAt: z.coerce.date().nullable(),
  createdBy: z.string().nullable(),
  taskId: z.string(),
  tenantId: z.string(),
  userId: z.string(),
})

export type UserTask = z.infer<typeof UserTaskSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// API KEY
//------------------------------------------------------

export const ApiKeyIncludeSchema: z.ZodType<Prisma.ApiKeyInclude> = z.object({
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const ApiKeyArgsSchema: z.ZodType<Prisma.ApiKeyArgs> = z.object({
  select: z.lazy(() => ApiKeySelectSchema).optional(),
  include: z.lazy(() => ApiKeyIncludeSchema).optional(),
}).strict();

export const ApiKeySelectSchema: z.ZodType<Prisma.ApiKeySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  userId: z.boolean().optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// DAILY LOG
//------------------------------------------------------

export const DailyLogIncludeSchema: z.ZodType<Prisma.DailyLogInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  LocationEntry: z.union([z.boolean(),z.lazy(() => LocationEntryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DailyLogCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DailyLogArgsSchema: z.ZodType<Prisma.DailyLogArgs> = z.object({
  select: z.lazy(() => DailyLogSelectSchema).optional(),
  include: z.lazy(() => DailyLogIncludeSchema).optional(),
}).strict();

export const DailyLogCountOutputTypeArgsSchema: z.ZodType<Prisma.DailyLogCountOutputTypeArgs> = z.object({
  select: z.lazy(() => DailyLogCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DailyLogCountOutputTypeSelectSchema: z.ZodType<Prisma.DailyLogCountOutputTypeSelect> = z.object({
  DailyLogItem: z.boolean().optional(),
  File: z.boolean().optional(),
  LocationEntry: z.boolean().optional(),
}).strict();

export const DailyLogSelectSchema: z.ZodType<Prisma.DailyLogSelect> = z.object({
  id: z.boolean().optional(),
  date: z.boolean().optional(),
  status: z.boolean().optional(),
  note: z.boolean().optional(),
  rating: z.boolean().optional(),
  ratingNote: z.boolean().optional(),
  managerNote: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  LocationEntry: z.union([z.boolean(),z.lazy(() => LocationEntryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DailyLogCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DAILY LOG ITEM
//------------------------------------------------------

export const DailyLogItemIncludeSchema: z.ZodType<Prisma.DailyLogItemInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogArgsSchema)]).optional(),
  Equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  TimeBlock: z.union([z.boolean(),z.lazy(() => TimeBlockFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DailyLogItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DailyLogItemArgsSchema: z.ZodType<Prisma.DailyLogItemArgs> = z.object({
  select: z.lazy(() => DailyLogItemSelectSchema).optional(),
  include: z.lazy(() => DailyLogItemIncludeSchema).optional(),
}).strict();

export const DailyLogItemCountOutputTypeArgsSchema: z.ZodType<Prisma.DailyLogItemCountOutputTypeArgs> = z.object({
  select: z.lazy(() => DailyLogItemCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DailyLogItemCountOutputTypeSelectSchema: z.ZodType<Prisma.DailyLogItemCountOutputTypeSelect> = z.object({
  TimeBlock: z.boolean().optional(),
}).strict();

export const DailyLogItemSelectSchema: z.ZodType<Prisma.DailyLogItemSelect> = z.object({
  id: z.boolean().optional(),
  note: z.boolean().optional(),
  isNoteVisible: z.boolean().optional(),
  itemType: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  taskId: z.boolean().optional(),
  dailyLogId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  equipmentId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogArgsSchema)]).optional(),
  Equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  TimeBlock: z.union([z.boolean(),z.lazy(() => TimeBlockFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DailyLogItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EQUIPMENT
//------------------------------------------------------

export const EquipmentIncludeSchema: z.ZodType<Prisma.EquipmentInclude> = z.object({
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  User_Equipment_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_Equipment_userIdToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EquipmentArgsSchema: z.ZodType<Prisma.EquipmentArgs> = z.object({
  select: z.lazy(() => EquipmentSelectSchema).optional(),
  include: z.lazy(() => EquipmentIncludeSchema).optional(),
}).strict();

export const EquipmentCountOutputTypeArgsSchema: z.ZodType<Prisma.EquipmentCountOutputTypeArgs> = z.object({
  select: z.lazy(() => EquipmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EquipmentCountOutputTypeSelectSchema: z.ZodType<Prisma.EquipmentCountOutputTypeSelect> = z.object({
  DailyLogItem: z.boolean().optional(),
  EquipmentPropertyValue: z.boolean().optional(),
}).strict();

export const EquipmentSelectSchema: z.ZodType<Prisma.EquipmentSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  organization: z.boolean().optional(),
  description: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  userId: z.boolean().optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  User_Equipment_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_Equipment_userIdToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EQUIPMENT PROPERTY
//------------------------------------------------------

export const EquipmentPropertyIncludeSchema: z.ZodType<Prisma.EquipmentPropertyInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EquipmentPropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EquipmentPropertyArgsSchema: z.ZodType<Prisma.EquipmentPropertyArgs> = z.object({
  select: z.lazy(() => EquipmentPropertySelectSchema).optional(),
  include: z.lazy(() => EquipmentPropertyIncludeSchema).optional(),
}).strict();

export const EquipmentPropertyCountOutputTypeArgsSchema: z.ZodType<Prisma.EquipmentPropertyCountOutputTypeArgs> = z.object({
  select: z.lazy(() => EquipmentPropertyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EquipmentPropertyCountOutputTypeSelectSchema: z.ZodType<Prisma.EquipmentPropertyCountOutputTypeSelect> = z.object({
  EquipmentPropertyValue: z.boolean().optional(),
}).strict();

export const EquipmentPropertySelectSchema: z.ZodType<Prisma.EquipmentPropertySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  order: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EquipmentPropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EQUIPMENT PROPERTY VALUE
//------------------------------------------------------

export const EquipmentPropertyValueIncludeSchema: z.ZodType<Prisma.EquipmentPropertyValueInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
  EquipmentProperty: z.union([z.boolean(),z.lazy(() => EquipmentPropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const EquipmentPropertyValueArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueArgs> = z.object({
  select: z.lazy(() => EquipmentPropertyValueSelectSchema).optional(),
  include: z.lazy(() => EquipmentPropertyValueIncludeSchema).optional(),
}).strict();

export const EquipmentPropertyValueSelectSchema: z.ZodType<Prisma.EquipmentPropertyValueSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  equipmentId: z.boolean().optional(),
  equipmentPropertyId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
  EquipmentProperty: z.union([z.boolean(),z.lazy(() => EquipmentPropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// FEEDBACK
//------------------------------------------------------

export const FeedbackIncludeSchema: z.ZodType<Prisma.FeedbackInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const FeedbackArgsSchema: z.ZodType<Prisma.FeedbackArgs> = z.object({
  select: z.lazy(() => FeedbackSelectSchema).optional(),
  include: z.lazy(() => FeedbackIncludeSchema).optional(),
}).strict();

export const FeedbackSelectSchema: z.ZodType<Prisma.FeedbackSelect> = z.object({
  id: z.boolean().optional(),
  text: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// FILE
//------------------------------------------------------

export const FileIncludeSchema: z.ZodType<Prisma.FileInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogArgsSchema)]).optional(),
  Image: z.union([z.boolean(),z.lazy(() => ImageArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FileCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FileArgsSchema: z.ZodType<Prisma.FileArgs> = z.object({
  select: z.lazy(() => FileSelectSchema).optional(),
  include: z.lazy(() => FileIncludeSchema).optional(),
}).strict();

export const FileCountOutputTypeArgsSchema: z.ZodType<Prisma.FileCountOutputTypeArgs> = z.object({
  select: z.lazy(() => FileCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FileCountOutputTypeSelectSchema: z.ZodType<Prisma.FileCountOutputTypeSelect> = z.object({
  FilePropertyValue: z.boolean().optional(),
}).strict();

export const FileSelectSchema: z.ZodType<Prisma.FileSelect> = z.object({
  id: z.boolean().optional(),
  description: z.boolean().optional(),
  locationLabel: z.boolean().optional(),
  locationLatitude: z.boolean().optional(),
  locationLongitude: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  imageId: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  projectId: z.boolean().optional(),
  dailyLogId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogArgsSchema)]).optional(),
  Image: z.union([z.boolean(),z.lazy(() => ImageArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FileCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FILE PROPERTY
//------------------------------------------------------

export const FilePropertyIncludeSchema: z.ZodType<Prisma.FilePropertyInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FilePropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FilePropertyArgsSchema: z.ZodType<Prisma.FilePropertyArgs> = z.object({
  select: z.lazy(() => FilePropertySelectSchema).optional(),
  include: z.lazy(() => FilePropertyIncludeSchema).optional(),
}).strict();

export const FilePropertyCountOutputTypeArgsSchema: z.ZodType<Prisma.FilePropertyCountOutputTypeArgs> = z.object({
  select: z.lazy(() => FilePropertyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FilePropertyCountOutputTypeSelectSchema: z.ZodType<Prisma.FilePropertyCountOutputTypeSelect> = z.object({
  FilePropertyValue: z.boolean().optional(),
}).strict();

export const FilePropertySelectSchema: z.ZodType<Prisma.FilePropertySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  order: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FilePropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FILE PROPERTY VALUE
//------------------------------------------------------

export const FilePropertyValueIncludeSchema: z.ZodType<Prisma.FilePropertyValueInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileArgsSchema)]).optional(),
  FileProperty: z.union([z.boolean(),z.lazy(() => FilePropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const FilePropertyValueArgsSchema: z.ZodType<Prisma.FilePropertyValueArgs> = z.object({
  select: z.lazy(() => FilePropertyValueSelectSchema).optional(),
  include: z.lazy(() => FilePropertyValueIncludeSchema).optional(),
}).strict();

export const FilePropertyValueSelectSchema: z.ZodType<Prisma.FilePropertyValueSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  fileId: z.boolean().optional(),
  propertyId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileArgsSchema)]).optional(),
  FileProperty: z.union([z.boolean(),z.lazy(() => FilePropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// IMAGE
//------------------------------------------------------

export const ImageIncludeSchema: z.ZodType<Prisma.ImageInclude> = z.object({
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  User_Image_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_User_imageIdToImage: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ImageCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ImageArgsSchema: z.ZodType<Prisma.ImageArgs> = z.object({
  select: z.lazy(() => ImageSelectSchema).optional(),
  include: z.lazy(() => ImageIncludeSchema).optional(),
}).strict();

export const ImageCountOutputTypeArgsSchema: z.ZodType<Prisma.ImageCountOutputTypeArgs> = z.object({
  select: z.lazy(() => ImageCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ImageCountOutputTypeSelectSchema: z.ZodType<Prisma.ImageCountOutputTypeSelect> = z.object({
  File: z.boolean().optional(),
  User_User_imageIdToImage: z.boolean().optional(),
}).strict();

export const ImageSelectSchema: z.ZodType<Prisma.ImageSelect> = z.object({
  id: z.boolean().optional(),
  bucketId: z.boolean().optional(),
  blurhash: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  User_Image_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_User_imageIdToImage: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ImageCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LOCATION ENTRY
//------------------------------------------------------

export const LocationEntryIncludeSchema: z.ZodType<Prisma.LocationEntryInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const LocationEntryArgsSchema: z.ZodType<Prisma.LocationEntryArgs> = z.object({
  select: z.lazy(() => LocationEntrySelectSchema).optional(),
  include: z.lazy(() => LocationEntryIncludeSchema).optional(),
}).strict();

export const LocationEntrySelectSchema: z.ZodType<Prisma.LocationEntrySelect> = z.object({
  id: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  dailyLogId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// PROJECT
//------------------------------------------------------

export const ProjectIncludeSchema: z.ZodType<Prisma.ProjectInclude> = z.object({
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProjectArgsSchema: z.ZodType<Prisma.ProjectArgs> = z.object({
  select: z.lazy(() => ProjectSelectSchema).optional(),
  include: z.lazy(() => ProjectIncludeSchema).optional(),
}).strict();

export const ProjectCountOutputTypeArgsSchema: z.ZodType<Prisma.ProjectCountOutputTypeArgs> = z.object({
  select: z.lazy(() => ProjectCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProjectCountOutputTypeSelectSchema: z.ZodType<Prisma.ProjectCountOutputTypeSelect> = z.object({
  File: z.boolean().optional(),
  ProjectPropertyValue: z.boolean().optional(),
  Task: z.boolean().optional(),
}).strict();

export const ProjectSelectSchema: z.ZodType<Prisma.ProjectSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  progress: z.boolean().optional(),
  dueDate: z.boolean().optional(),
  description: z.boolean().optional(),
  locationLabel: z.boolean().optional(),
  locationLatitude: z.boolean().optional(),
  locationLongitude: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROJECT PROPERTY
//------------------------------------------------------

export const ProjectPropertyIncludeSchema: z.ZodType<Prisma.ProjectPropertyInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectPropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProjectPropertyArgsSchema: z.ZodType<Prisma.ProjectPropertyArgs> = z.object({
  select: z.lazy(() => ProjectPropertySelectSchema).optional(),
  include: z.lazy(() => ProjectPropertyIncludeSchema).optional(),
}).strict();

export const ProjectPropertyCountOutputTypeArgsSchema: z.ZodType<Prisma.ProjectPropertyCountOutputTypeArgs> = z.object({
  select: z.lazy(() => ProjectPropertyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProjectPropertyCountOutputTypeSelectSchema: z.ZodType<Prisma.ProjectPropertyCountOutputTypeSelect> = z.object({
  ProjectPropertyValue: z.boolean().optional(),
}).strict();

export const ProjectPropertySelectSchema: z.ZodType<Prisma.ProjectPropertySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  order: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectPropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROJECT PROPERTY VALUE
//------------------------------------------------------

export const ProjectPropertyValueIncludeSchema: z.ZodType<Prisma.ProjectPropertyValueInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  ProjectProperty: z.union([z.boolean(),z.lazy(() => ProjectPropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const ProjectPropertyValueArgsSchema: z.ZodType<Prisma.ProjectPropertyValueArgs> = z.object({
  select: z.lazy(() => ProjectPropertyValueSelectSchema).optional(),
  include: z.lazy(() => ProjectPropertyValueIncludeSchema).optional(),
}).strict();

export const ProjectPropertyValueSelectSchema: z.ZodType<Prisma.ProjectPropertyValueSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  projectId: z.boolean().optional(),
  projectPropertyId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  ProjectProperty: z.union([z.boolean(),z.lazy(() => ProjectPropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// TASK
//------------------------------------------------------

export const TaskIncludeSchema: z.ZodType<Prisma.TaskInclude> = z.object({
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  other_Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  TaskStatus: z.union([z.boolean(),z.lazy(() => TaskStatusArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  UserTask: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaskArgsSchema: z.ZodType<Prisma.TaskArgs> = z.object({
  select: z.lazy(() => TaskSelectSchema).optional(),
  include: z.lazy(() => TaskIncludeSchema).optional(),
}).strict();

export const TaskCountOutputTypeArgsSchema: z.ZodType<Prisma.TaskCountOutputTypeArgs> = z.object({
  select: z.lazy(() => TaskCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaskCountOutputTypeSelectSchema: z.ZodType<Prisma.TaskCountOutputTypeSelect> = z.object({
  DailyLogItem: z.boolean().optional(),
  other_Task: z.boolean().optional(),
  TaskPropertyValue: z.boolean().optional(),
  UserTask: z.boolean().optional(),
}).strict();

export const TaskSelectSchema: z.ZodType<Prisma.TaskSelect> = z.object({
  id: z.boolean().optional(),
  description: z.boolean().optional(),
  name: z.boolean().optional(),
  statusId: z.boolean().optional(),
  systemStatusId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  projectId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  parentId: z.boolean().optional(),
  taskStatusId: z.boolean().optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  other_Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  TaskStatus: z.union([z.boolean(),z.lazy(() => TaskStatusArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  UserTask: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TASK PROPERTY
//------------------------------------------------------

export const TaskPropertyIncludeSchema: z.ZodType<Prisma.TaskPropertyInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskPropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaskPropertyArgsSchema: z.ZodType<Prisma.TaskPropertyArgs> = z.object({
  select: z.lazy(() => TaskPropertySelectSchema).optional(),
  include: z.lazy(() => TaskPropertyIncludeSchema).optional(),
}).strict();

export const TaskPropertyCountOutputTypeArgsSchema: z.ZodType<Prisma.TaskPropertyCountOutputTypeArgs> = z.object({
  select: z.lazy(() => TaskPropertyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaskPropertyCountOutputTypeSelectSchema: z.ZodType<Prisma.TaskPropertyCountOutputTypeSelect> = z.object({
  TaskPropertyValue: z.boolean().optional(),
}).strict();

export const TaskPropertySelectSchema: z.ZodType<Prisma.TaskPropertySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  order: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskPropertyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TASK PROPERTY VALUE
//------------------------------------------------------

export const TaskPropertyValueIncludeSchema: z.ZodType<Prisma.TaskPropertyValueInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  TaskProperty: z.union([z.boolean(),z.lazy(() => TaskPropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const TaskPropertyValueArgsSchema: z.ZodType<Prisma.TaskPropertyValueArgs> = z.object({
  select: z.lazy(() => TaskPropertyValueSelectSchema).optional(),
  include: z.lazy(() => TaskPropertyValueIncludeSchema).optional(),
}).strict();

export const TaskPropertyValueSelectSchema: z.ZodType<Prisma.TaskPropertyValueSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  taskPropertyId: z.boolean().optional(),
  taskId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  TaskProperty: z.union([z.boolean(),z.lazy(() => TaskPropertyArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// TASK STATUS
//------------------------------------------------------

export const TaskStatusIncludeSchema: z.ZodType<Prisma.TaskStatusInclude> = z.object({
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskStatusCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaskStatusArgsSchema: z.ZodType<Prisma.TaskStatusArgs> = z.object({
  select: z.lazy(() => TaskStatusSelectSchema).optional(),
  include: z.lazy(() => TaskStatusIncludeSchema).optional(),
}).strict();

export const TaskStatusCountOutputTypeArgsSchema: z.ZodType<Prisma.TaskStatusCountOutputTypeArgs> = z.object({
  select: z.lazy(() => TaskStatusCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaskStatusCountOutputTypeSelectSchema: z.ZodType<Prisma.TaskStatusCountOutputTypeSelect> = z.object({
  Task: z.boolean().optional(),
}).strict();

export const TaskStatusSelectSchema: z.ZodType<Prisma.TaskStatusSelect> = z.object({
  id: z.boolean().optional(),
  displayOrder: z.boolean().optional(),
  iconColor: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskStatusCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TENANT
//------------------------------------------------------

export const TenantIncludeSchema: z.ZodType<Prisma.TenantInclude> = z.object({
  ApiKey: z.union([z.boolean(),z.lazy(() => ApiKeyFindManyArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogFindManyArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  Equipment: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  EquipmentProperty: z.union([z.boolean(),z.lazy(() => EquipmentPropertyFindManyArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  Feedback: z.union([z.boolean(),z.lazy(() => FeedbackFindManyArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  FileProperty: z.union([z.boolean(),z.lazy(() => FilePropertyFindManyArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  Image: z.union([z.boolean(),z.lazy(() => ImageFindManyArgsSchema)]).optional(),
  LocationEntry: z.union([z.boolean(),z.lazy(() => LocationEntryFindManyArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  ProjectProperty: z.union([z.boolean(),z.lazy(() => ProjectPropertyFindManyArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  TaskProperty: z.union([z.boolean(),z.lazy(() => TaskPropertyFindManyArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  TaskStatus: z.union([z.boolean(),z.lazy(() => TaskStatusFindManyArgsSchema)]).optional(),
  User_Tenant_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  TenantUser: z.union([z.boolean(),z.lazy(() => TenantUserFindManyArgsSchema)]).optional(),
  TimeBlock: z.union([z.boolean(),z.lazy(() => TimeBlockFindManyArgsSchema)]).optional(),
  User_User_currentTenantIdToTenant: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  UserTask: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TenantCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TenantArgsSchema: z.ZodType<Prisma.TenantArgs> = z.object({
  select: z.lazy(() => TenantSelectSchema).optional(),
  include: z.lazy(() => TenantIncludeSchema).optional(),
}).strict();

export const TenantCountOutputTypeArgsSchema: z.ZodType<Prisma.TenantCountOutputTypeArgs> = z.object({
  select: z.lazy(() => TenantCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TenantCountOutputTypeSelectSchema: z.ZodType<Prisma.TenantCountOutputTypeSelect> = z.object({
  ApiKey: z.boolean().optional(),
  DailyLog: z.boolean().optional(),
  DailyLogItem: z.boolean().optional(),
  Equipment: z.boolean().optional(),
  EquipmentProperty: z.boolean().optional(),
  EquipmentPropertyValue: z.boolean().optional(),
  Feedback: z.boolean().optional(),
  File: z.boolean().optional(),
  FileProperty: z.boolean().optional(),
  FilePropertyValue: z.boolean().optional(),
  Image: z.boolean().optional(),
  LocationEntry: z.boolean().optional(),
  Project: z.boolean().optional(),
  ProjectProperty: z.boolean().optional(),
  ProjectPropertyValue: z.boolean().optional(),
  Task: z.boolean().optional(),
  TaskProperty: z.boolean().optional(),
  TaskPropertyValue: z.boolean().optional(),
  TaskStatus: z.boolean().optional(),
  TenantUser: z.boolean().optional(),
  TimeBlock: z.boolean().optional(),
  User_User_currentTenantIdToTenant: z.boolean().optional(),
  UserTask: z.boolean().optional(),
}).strict();

export const TenantSelectSchema: z.ZodType<Prisma.TenantSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  settings: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  ApiKey: z.union([z.boolean(),z.lazy(() => ApiKeyFindManyArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogFindManyArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  Equipment: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  EquipmentProperty: z.union([z.boolean(),z.lazy(() => EquipmentPropertyFindManyArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  Feedback: z.union([z.boolean(),z.lazy(() => FeedbackFindManyArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  FileProperty: z.union([z.boolean(),z.lazy(() => FilePropertyFindManyArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  Image: z.union([z.boolean(),z.lazy(() => ImageFindManyArgsSchema)]).optional(),
  LocationEntry: z.union([z.boolean(),z.lazy(() => LocationEntryFindManyArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  ProjectProperty: z.union([z.boolean(),z.lazy(() => ProjectPropertyFindManyArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  TaskProperty: z.union([z.boolean(),z.lazy(() => TaskPropertyFindManyArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  TaskStatus: z.union([z.boolean(),z.lazy(() => TaskStatusFindManyArgsSchema)]).optional(),
  User_Tenant_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  TenantUser: z.union([z.boolean(),z.lazy(() => TenantUserFindManyArgsSchema)]).optional(),
  TimeBlock: z.union([z.boolean(),z.lazy(() => TimeBlockFindManyArgsSchema)]).optional(),
  User_User_currentTenantIdToTenant: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  UserTask: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TenantCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TENANT USER
//------------------------------------------------------

export const TenantUserIncludeSchema: z.ZodType<Prisma.TenantUserInclude> = z.object({
  User_TenantUser_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_TenantUser_userIdToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TenantUserArgsSchema: z.ZodType<Prisma.TenantUserArgs> = z.object({
  select: z.lazy(() => TenantUserSelectSchema).optional(),
  include: z.lazy(() => TenantUserIncludeSchema).optional(),
}).strict();

export const TenantUserSelectSchema: z.ZodType<Prisma.TenantUserSelect> = z.object({
  id: z.boolean().optional(),
  userRole: z.boolean().optional(),
  inviteEmail: z.boolean().optional(),
  inviteSentAt: z.boolean().optional(),
  inviteStatus: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  userId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User_TenantUser_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_TenantUser_userIdToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TIME BLOCK
//------------------------------------------------------

export const TimeBlockIncludeSchema: z.ZodType<Prisma.TimeBlockInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const TimeBlockArgsSchema: z.ZodType<Prisma.TimeBlockArgs> = z.object({
  select: z.lazy(() => TimeBlockSelectSchema).optional(),
  include: z.lazy(() => TimeBlockIncludeSchema).optional(),
}).strict();

export const TimeBlockSelectSchema: z.ZodType<Prisma.TimeBlockSelect> = z.object({
  id: z.boolean().optional(),
  duration: z.boolean().optional(),
  entryType: z.boolean().optional(),
  rangeStartAt: z.boolean().optional(),
  rangeEndAt: z.boolean().optional(),
  timerStartLatitude: z.boolean().optional(),
  timerStartLongitude: z.boolean().optional(),
  timerStartAddress: z.boolean().optional(),
  timerStartAt: z.boolean().optional(),
  timerEndAt: z.boolean().optional(),
  timerEndLatitude: z.boolean().optional(),
  timerEndLongitude: z.boolean().optional(),
  timerEndAddress: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  dailyLogItemId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  ApiKey: z.union([z.boolean(),z.lazy(() => ApiKeyFindManyArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogFindManyArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  Equipment_Equipment_createdByToUser: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  Equipment_Equipment_userIdToUser: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  EquipmentProperty: z.union([z.boolean(),z.lazy(() => EquipmentPropertyFindManyArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  Feedback: z.union([z.boolean(),z.lazy(() => FeedbackFindManyArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  FileProperty: z.union([z.boolean(),z.lazy(() => FilePropertyFindManyArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  Image_Image_createdByToUser: z.union([z.boolean(),z.lazy(() => ImageFindManyArgsSchema)]).optional(),
  LocationEntry: z.union([z.boolean(),z.lazy(() => LocationEntryFindManyArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  ProjectProperty: z.union([z.boolean(),z.lazy(() => ProjectPropertyFindManyArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  TaskProperty: z.union([z.boolean(),z.lazy(() => TaskPropertyFindManyArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  TaskStatus: z.union([z.boolean(),z.lazy(() => TaskStatusFindManyArgsSchema)]).optional(),
  Tenant_Tenant_createdByToUser: z.union([z.boolean(),z.lazy(() => TenantFindManyArgsSchema)]).optional(),
  TenantUser_TenantUser_createdByToUser: z.union([z.boolean(),z.lazy(() => TenantUserFindManyArgsSchema)]).optional(),
  TenantUser_TenantUser_userIdToUser: z.union([z.boolean(),z.lazy(() => TenantUserFindManyArgsSchema)]).optional(),
  TimeBlock: z.union([z.boolean(),z.lazy(() => TimeBlockFindManyArgsSchema)]).optional(),
  Tenant_User_currentTenantIdToTenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  Image_User_imageIdToImage: z.union([z.boolean(),z.lazy(() => ImageArgsSchema)]).optional(),
  UserTask_UserTask_createdByToUser: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  UserTask_UserTask_userIdToUser: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  ApiKey: z.boolean().optional(),
  DailyLog: z.boolean().optional(),
  DailyLogItem: z.boolean().optional(),
  Equipment_Equipment_createdByToUser: z.boolean().optional(),
  Equipment_Equipment_userIdToUser: z.boolean().optional(),
  EquipmentProperty: z.boolean().optional(),
  EquipmentPropertyValue: z.boolean().optional(),
  Feedback: z.boolean().optional(),
  File: z.boolean().optional(),
  FileProperty: z.boolean().optional(),
  FilePropertyValue: z.boolean().optional(),
  Image_Image_createdByToUser: z.boolean().optional(),
  LocationEntry: z.boolean().optional(),
  Project: z.boolean().optional(),
  ProjectProperty: z.boolean().optional(),
  ProjectPropertyValue: z.boolean().optional(),
  Task: z.boolean().optional(),
  TaskProperty: z.boolean().optional(),
  TaskPropertyValue: z.boolean().optional(),
  TaskStatus: z.boolean().optional(),
  Tenant_Tenant_createdByToUser: z.boolean().optional(),
  TenantUser_TenantUser_createdByToUser: z.boolean().optional(),
  TenantUser_TenantUser_userIdToUser: z.boolean().optional(),
  TimeBlock: z.boolean().optional(),
  UserTask_UserTask_createdByToUser: z.boolean().optional(),
  UserTask_UserTask_userIdToUser: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  name: z.boolean().optional(),
  preferredLanguage: z.boolean().optional(),
  settings: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  imageId: z.boolean().optional(),
  currentTenantId: z.boolean().optional(),
  ApiKey: z.union([z.boolean(),z.lazy(() => ApiKeyFindManyArgsSchema)]).optional(),
  DailyLog: z.union([z.boolean(),z.lazy(() => DailyLogFindManyArgsSchema)]).optional(),
  DailyLogItem: z.union([z.boolean(),z.lazy(() => DailyLogItemFindManyArgsSchema)]).optional(),
  Equipment_Equipment_createdByToUser: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  Equipment_Equipment_userIdToUser: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  EquipmentProperty: z.union([z.boolean(),z.lazy(() => EquipmentPropertyFindManyArgsSchema)]).optional(),
  EquipmentPropertyValue: z.union([z.boolean(),z.lazy(() => EquipmentPropertyValueFindManyArgsSchema)]).optional(),
  Feedback: z.union([z.boolean(),z.lazy(() => FeedbackFindManyArgsSchema)]).optional(),
  File: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  FileProperty: z.union([z.boolean(),z.lazy(() => FilePropertyFindManyArgsSchema)]).optional(),
  FilePropertyValue: z.union([z.boolean(),z.lazy(() => FilePropertyValueFindManyArgsSchema)]).optional(),
  Image_Image_createdByToUser: z.union([z.boolean(),z.lazy(() => ImageFindManyArgsSchema)]).optional(),
  LocationEntry: z.union([z.boolean(),z.lazy(() => LocationEntryFindManyArgsSchema)]).optional(),
  Project: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  ProjectProperty: z.union([z.boolean(),z.lazy(() => ProjectPropertyFindManyArgsSchema)]).optional(),
  ProjectPropertyValue: z.union([z.boolean(),z.lazy(() => ProjectPropertyValueFindManyArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  TaskProperty: z.union([z.boolean(),z.lazy(() => TaskPropertyFindManyArgsSchema)]).optional(),
  TaskPropertyValue: z.union([z.boolean(),z.lazy(() => TaskPropertyValueFindManyArgsSchema)]).optional(),
  TaskStatus: z.union([z.boolean(),z.lazy(() => TaskStatusFindManyArgsSchema)]).optional(),
  Tenant_Tenant_createdByToUser: z.union([z.boolean(),z.lazy(() => TenantFindManyArgsSchema)]).optional(),
  TenantUser_TenantUser_createdByToUser: z.union([z.boolean(),z.lazy(() => TenantUserFindManyArgsSchema)]).optional(),
  TenantUser_TenantUser_userIdToUser: z.union([z.boolean(),z.lazy(() => TenantUserFindManyArgsSchema)]).optional(),
  TimeBlock: z.union([z.boolean(),z.lazy(() => TimeBlockFindManyArgsSchema)]).optional(),
  Tenant_User_currentTenantIdToTenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  Image_User_imageIdToImage: z.union([z.boolean(),z.lazy(() => ImageArgsSchema)]).optional(),
  UserTask_UserTask_createdByToUser: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  UserTask_UserTask_userIdToUser: z.union([z.boolean(),z.lazy(() => UserTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER TASK
//------------------------------------------------------

export const UserTaskIncludeSchema: z.ZodType<Prisma.UserTaskInclude> = z.object({
  User_UserTask_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_UserTask_userIdToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserTaskArgsSchema: z.ZodType<Prisma.UserTaskArgs> = z.object({
  select: z.lazy(() => UserTaskSelectSchema).optional(),
  include: z.lazy(() => UserTaskIncludeSchema).optional(),
}).strict();

export const UserTaskSelectSchema: z.ZodType<Prisma.UserTaskSelect> = z.object({
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  taskId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  userId: z.boolean().optional(),
  User_UserTask_createdByToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  Tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  User_UserTask_userIdToUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const ApiKeyWhereInputSchema: z.ZodType<Prisma.ApiKeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ApiKeyOrderByWithRelationInputSchema: z.ZodType<Prisma.ApiKeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const ApiKeyWhereUniqueInputSchema: z.ZodType<Prisma.ApiKeyWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const ApiKeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.ApiKeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ApiKeyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ApiKeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ApiKeyMinOrderByAggregateInputSchema).optional()
}).strict();

export const ApiKeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ApiKeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const DailyLogWhereInputSchema: z.ZodType<Prisma.DailyLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DailyLogWhereInputSchema),z.lazy(() => DailyLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyLogWhereInputSchema),z.lazy(() => DailyLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ratingNote: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  managerNote: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemListRelationFilterSchema).optional(),
  File: z.lazy(() => FileListRelationFilterSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryListRelationFilterSchema).optional()
}).strict();

export const DailyLogOrderByWithRelationInputSchema: z.ZodType<Prisma.DailyLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  ratingNote: z.lazy(() => SortOrderSchema).optional(),
  managerNote: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemOrderByRelationAggregateInputSchema).optional(),
  File: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryOrderByRelationAggregateInputSchema).optional()
}).strict();

export const DailyLogWhereUniqueInputSchema: z.ZodType<Prisma.DailyLogWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const DailyLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.DailyLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  ratingNote: z.lazy(() => SortOrderSchema).optional(),
  managerNote: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DailyLogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DailyLogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DailyLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DailyLogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DailyLogSumOrderByAggregateInputSchema).optional()
}).strict();

export const DailyLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DailyLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DailyLogScalarWhereWithAggregatesInputSchema),z.lazy(() => DailyLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyLogScalarWhereWithAggregatesInputSchema),z.lazy(() => DailyLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ratingNote: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  managerNote: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const DailyLogItemWhereInputSchema: z.ZodType<Prisma.DailyLogItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DailyLogItemWhereInputSchema),z.lazy(() => DailyLogItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyLogItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyLogItemWhereInputSchema),z.lazy(() => DailyLogItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isNoteVisible: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  itemType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  equipmentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  DailyLog: z.union([ z.lazy(() => DailyLogRelationFilterSchema),z.lazy(() => DailyLogWhereInputSchema) ]).optional(),
  Equipment: z.union([ z.lazy(() => EquipmentRelationFilterSchema),z.lazy(() => EquipmentWhereInputSchema) ]).optional().nullable(),
  Task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  TimeBlock: z.lazy(() => TimeBlockListRelationFilterSchema).optional()
}).strict();

export const DailyLogItemOrderByWithRelationInputSchema: z.ZodType<Prisma.DailyLogItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  isNoteVisible: z.lazy(() => SortOrderSchema).optional(),
  itemType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogOrderByWithRelationInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentOrderByWithRelationInputSchema).optional(),
  Task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockOrderByRelationAggregateInputSchema).optional()
}).strict();

export const DailyLogItemWhereUniqueInputSchema: z.ZodType<Prisma.DailyLogItemWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const DailyLogItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.DailyLogItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  isNoteVisible: z.lazy(() => SortOrderSchema).optional(),
  itemType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DailyLogItemCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DailyLogItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DailyLogItemMinOrderByAggregateInputSchema).optional()
}).strict();

export const DailyLogItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DailyLogItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DailyLogItemScalarWhereWithAggregatesInputSchema),z.lazy(() => DailyLogItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyLogItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyLogItemScalarWhereWithAggregatesInputSchema),z.lazy(() => DailyLogItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isNoteVisible: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  itemType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  equipmentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const EquipmentWhereInputSchema: z.ZodType<Prisma.EquipmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentWhereInputSchema),z.lazy(() => EquipmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentWhereInputSchema),z.lazy(() => EquipmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemListRelationFilterSchema).optional(),
  User_Equipment_createdByToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  User_Equipment_userIdToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueListRelationFilterSchema).optional()
}).strict();

export const EquipmentOrderByWithRelationInputSchema: z.ZodType<Prisma.EquipmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemOrderByRelationAggregateInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  User_Equipment_userIdToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EquipmentWhereUniqueInputSchema: z.ZodType<Prisma.EquipmentWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const EquipmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.EquipmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EquipmentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EquipmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EquipmentMinOrderByAggregateInputSchema).optional()
}).strict();

export const EquipmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EquipmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const EquipmentPropertyWhereInputSchema: z.ZodType<Prisma.EquipmentPropertyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentPropertyWhereInputSchema),z.lazy(() => EquipmentPropertyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentPropertyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentPropertyWhereInputSchema),z.lazy(() => EquipmentPropertyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueListRelationFilterSchema).optional()
}).strict();

export const EquipmentPropertyOrderByWithRelationInputSchema: z.ZodType<Prisma.EquipmentPropertyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EquipmentPropertyWhereUniqueInputSchema: z.ZodType<Prisma.EquipmentPropertyWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const EquipmentPropertyOrderByWithAggregationInputSchema: z.ZodType<Prisma.EquipmentPropertyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EquipmentPropertyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EquipmentPropertyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EquipmentPropertyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EquipmentPropertyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EquipmentPropertySumOrderByAggregateInputSchema).optional()
}).strict();

export const EquipmentPropertyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EquipmentPropertyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentPropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentPropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentPropertyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentPropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentPropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const EquipmentPropertyValueWhereInputSchema: z.ZodType<Prisma.EquipmentPropertyValueWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentPropertyValueWhereInputSchema),z.lazy(() => EquipmentPropertyValueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentPropertyValueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentPropertyValueWhereInputSchema),z.lazy(() => EquipmentPropertyValueWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  equipmentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  equipmentPropertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Equipment: z.union([ z.lazy(() => EquipmentRelationFilterSchema),z.lazy(() => EquipmentWhereInputSchema) ]).optional(),
  EquipmentProperty: z.union([ z.lazy(() => EquipmentPropertyRelationFilterSchema),z.lazy(() => EquipmentPropertyWhereInputSchema) ]).optional(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyValueOrderByWithRelationInputSchema: z.ZodType<Prisma.EquipmentPropertyValueOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  equipmentPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentOrderByWithRelationInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const EquipmentPropertyValueWhereUniqueInputSchema: z.ZodType<Prisma.EquipmentPropertyValueWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const EquipmentPropertyValueOrderByWithAggregationInputSchema: z.ZodType<Prisma.EquipmentPropertyValueOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  equipmentPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EquipmentPropertyValueCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EquipmentPropertyValueMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EquipmentPropertyValueMinOrderByAggregateInputSchema).optional()
}).strict();

export const EquipmentPropertyValueScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EquipmentPropertyValueScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentPropertyValueScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  equipmentId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  equipmentPropertyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const FeedbackWhereInputSchema: z.ZodType<Prisma.FeedbackWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeedbackWhereInputSchema),z.lazy(() => FeedbackWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeedbackWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeedbackWhereInputSchema),z.lazy(() => FeedbackWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  text: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const FeedbackOrderByWithRelationInputSchema: z.ZodType<Prisma.FeedbackOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  text: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const FeedbackWhereUniqueInputSchema: z.ZodType<Prisma.FeedbackWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const FeedbackOrderByWithAggregationInputSchema: z.ZodType<Prisma.FeedbackOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  text: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FeedbackCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FeedbackMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FeedbackMinOrderByAggregateInputSchema).optional()
}).strict();

export const FeedbackScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FeedbackScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FeedbackScalarWhereWithAggregatesInputSchema),z.lazy(() => FeedbackScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeedbackScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeedbackScalarWhereWithAggregatesInputSchema),z.lazy(() => FeedbackScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  text: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const FileWhereInputSchema: z.ZodType<Prisma.FileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FileWhereInputSchema),z.lazy(() => FileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileWhereInputSchema),z.lazy(() => FileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLabel: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  locationLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  imageId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  DailyLog: z.union([ z.lazy(() => DailyLogRelationFilterSchema),z.lazy(() => DailyLogWhereInputSchema) ]).optional().nullable(),
  Image: z.union([ z.lazy(() => ImageRelationFilterSchema),z.lazy(() => ImageWhereInputSchema) ]).optional(),
  Project: z.union([ z.lazy(() => ProjectRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueListRelationFilterSchema).optional()
}).strict();

export const FileOrderByWithRelationInputSchema: z.ZodType<Prisma.FileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogOrderByWithRelationInputSchema).optional(),
  Image: z.lazy(() => ImageOrderByWithRelationInputSchema).optional(),
  Project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FileWhereUniqueInputSchema: z.ZodType<Prisma.FileWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const FileOrderByWithAggregationInputSchema: z.ZodType<Prisma.FileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FileCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FileAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FileMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FileSumOrderByAggregateInputSchema).optional()
}).strict();

export const FileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FileScalarWhereWithAggregatesInputSchema),z.lazy(() => FileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileScalarWhereWithAggregatesInputSchema),z.lazy(() => FileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  locationLabel: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  locationLatitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  locationLongitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  imageId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const FilePropertyWhereInputSchema: z.ZodType<Prisma.FilePropertyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FilePropertyWhereInputSchema),z.lazy(() => FilePropertyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FilePropertyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FilePropertyWhereInputSchema),z.lazy(() => FilePropertyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueListRelationFilterSchema).optional()
}).strict();

export const FilePropertyOrderByWithRelationInputSchema: z.ZodType<Prisma.FilePropertyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FilePropertyWhereUniqueInputSchema: z.ZodType<Prisma.FilePropertyWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const FilePropertyOrderByWithAggregationInputSchema: z.ZodType<Prisma.FilePropertyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FilePropertyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FilePropertyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FilePropertyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FilePropertyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FilePropertySumOrderByAggregateInputSchema).optional()
}).strict();

export const FilePropertyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FilePropertyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FilePropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => FilePropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FilePropertyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FilePropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => FilePropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const FilePropertyValueWhereInputSchema: z.ZodType<Prisma.FilePropertyValueWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FilePropertyValueWhereInputSchema),z.lazy(() => FilePropertyValueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FilePropertyValueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FilePropertyValueWhereInputSchema),z.lazy(() => FilePropertyValueWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  File: z.union([ z.lazy(() => FileRelationFilterSchema),z.lazy(() => FileWhereInputSchema) ]).optional(),
  FileProperty: z.union([ z.lazy(() => FilePropertyRelationFilterSchema),z.lazy(() => FilePropertyWhereInputSchema) ]).optional(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueOrderByWithRelationInputSchema: z.ZodType<Prisma.FilePropertyValueOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  fileId: z.lazy(() => SortOrderSchema).optional(),
  propertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  File: z.lazy(() => FileOrderByWithRelationInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const FilePropertyValueWhereUniqueInputSchema: z.ZodType<Prisma.FilePropertyValueWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const FilePropertyValueOrderByWithAggregationInputSchema: z.ZodType<Prisma.FilePropertyValueOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  fileId: z.lazy(() => SortOrderSchema).optional(),
  propertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FilePropertyValueCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FilePropertyValueMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FilePropertyValueMinOrderByAggregateInputSchema).optional()
}).strict();

export const FilePropertyValueScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FilePropertyValueScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FilePropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => FilePropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FilePropertyValueScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FilePropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => FilePropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  propertyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ImageWhereInputSchema: z.ZodType<Prisma.ImageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ImageWhereInputSchema),z.lazy(() => ImageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ImageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ImageWhereInputSchema),z.lazy(() => ImageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bucketId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  blurhash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  File: z.lazy(() => FileListRelationFilterSchema).optional(),
  User_Image_createdByToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  User_User_imageIdToImage: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const ImageOrderByWithRelationInputSchema: z.ZodType<Prisma.ImageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bucketId: z.lazy(() => SortOrderSchema).optional(),
  blurhash: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  File: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  User_Image_createdByToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ImageWhereUniqueInputSchema: z.ZodType<Prisma.ImageWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const ImageOrderByWithAggregationInputSchema: z.ZodType<Prisma.ImageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bucketId: z.lazy(() => SortOrderSchema).optional(),
  blurhash: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ImageCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ImageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ImageMinOrderByAggregateInputSchema).optional()
}).strict();

export const ImageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ImageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ImageScalarWhereWithAggregatesInputSchema),z.lazy(() => ImageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ImageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ImageScalarWhereWithAggregatesInputSchema),z.lazy(() => ImageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bucketId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  blurhash: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const LocationEntryWhereInputSchema: z.ZodType<Prisma.LocationEntryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LocationEntryWhereInputSchema),z.lazy(() => LocationEntryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LocationEntryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LocationEntryWhereInputSchema),z.lazy(() => LocationEntryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  DailyLog: z.union([ z.lazy(() => DailyLogRelationFilterSchema),z.lazy(() => DailyLogWhereInputSchema) ]).optional(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const LocationEntryOrderByWithRelationInputSchema: z.ZodType<Prisma.LocationEntryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const LocationEntryWhereUniqueInputSchema: z.ZodType<Prisma.LocationEntryWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const LocationEntryOrderByWithAggregationInputSchema: z.ZodType<Prisma.LocationEntryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LocationEntryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LocationEntryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LocationEntryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LocationEntryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LocationEntrySumOrderByAggregateInputSchema).optional()
}).strict();

export const LocationEntryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LocationEntryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LocationEntryScalarWhereWithAggregatesInputSchema),z.lazy(() => LocationEntryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LocationEntryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LocationEntryScalarWhereWithAggregatesInputSchema),z.lazy(() => LocationEntryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ProjectWhereInputSchema: z.ZodType<Prisma.ProjectWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  progress: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLabel: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  locationLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  File: z.lazy(() => FileListRelationFilterSchema).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueListRelationFilterSchema).optional(),
  Task: z.lazy(() => TaskListRelationFilterSchema).optional()
}).strict();

export const ProjectOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  progress: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  File: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueOrderByRelationAggregateInputSchema).optional(),
  Task: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProjectWhereUniqueInputSchema: z.ZodType<Prisma.ProjectWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const ProjectOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  progress: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProjectAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProjectSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  progress: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  locationLabel: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  locationLatitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  locationLongitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ProjectPropertyWhereInputSchema: z.ZodType<Prisma.ProjectPropertyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectPropertyWhereInputSchema),z.lazy(() => ProjectPropertyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectPropertyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectPropertyWhereInputSchema),z.lazy(() => ProjectPropertyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueListRelationFilterSchema).optional()
}).strict();

export const ProjectPropertyOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectPropertyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProjectPropertyWhereUniqueInputSchema: z.ZodType<Prisma.ProjectPropertyWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const ProjectPropertyOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectPropertyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectPropertyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProjectPropertyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectPropertyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectPropertyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProjectPropertySumOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectPropertyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectPropertyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectPropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectPropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectPropertyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectPropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectPropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ProjectPropertyValueWhereInputSchema: z.ZodType<Prisma.ProjectPropertyValueWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectPropertyValueWhereInputSchema),z.lazy(() => ProjectPropertyValueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectPropertyValueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectPropertyValueWhereInputSchema),z.lazy(() => ProjectPropertyValueWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectPropertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Project: z.union([ z.lazy(() => ProjectRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  ProjectProperty: z.union([ z.lazy(() => ProjectPropertyRelationFilterSchema),z.lazy(() => ProjectPropertyWhereInputSchema) ]).optional(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyValueOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectPropertyValueOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  projectPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const ProjectPropertyValueWhereUniqueInputSchema: z.ZodType<Prisma.ProjectPropertyValueWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const ProjectPropertyValueOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectPropertyValueOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  projectPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectPropertyValueCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectPropertyValueMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectPropertyValueMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectPropertyValueScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectPropertyValueScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectPropertyValueScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectPropertyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TaskWhereInputSchema: z.ZodType<Prisma.TaskWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  statusId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  systemStatusId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskStatusId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemListRelationFilterSchema).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
  other_Task: z.lazy(() => TaskListRelationFilterSchema).optional(),
  Project: z.union([ z.lazy(() => ProjectRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  TaskStatus: z.union([ z.lazy(() => TaskStatusRelationFilterSchema),z.lazy(() => TaskStatusWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueListRelationFilterSchema).optional(),
  UserTask: z.lazy(() => UserTaskListRelationFilterSchema).optional()
}).strict();

export const TaskOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  systemStatusId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  taskStatusId: z.lazy(() => SortOrderSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemOrderByRelationAggregateInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional(),
  other_Task: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  Project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueOrderByRelationAggregateInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TaskWhereUniqueInputSchema: z.ZodType<Prisma.TaskWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const TaskOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  systemStatusId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  taskStatusId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaskScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  statusId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  systemStatusId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  parentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taskStatusId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TaskPropertyWhereInputSchema: z.ZodType<Prisma.TaskPropertyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskPropertyWhereInputSchema),z.lazy(() => TaskPropertyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskPropertyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskPropertyWhereInputSchema),z.lazy(() => TaskPropertyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueListRelationFilterSchema).optional()
}).strict();

export const TaskPropertyOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskPropertyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TaskPropertyWhereUniqueInputSchema: z.ZodType<Prisma.TaskPropertyWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const TaskPropertyOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskPropertyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskPropertyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TaskPropertyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskPropertyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskPropertyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TaskPropertySumOrderByAggregateInputSchema).optional()
}).strict();

export const TaskPropertyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskPropertyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskPropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskPropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskPropertyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskPropertyScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskPropertyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TaskPropertyValueWhereInputSchema: z.ZodType<Prisma.TaskPropertyValueWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskPropertyValueWhereInputSchema),z.lazy(() => TaskPropertyValueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskPropertyValueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskPropertyValueWhereInputSchema),z.lazy(() => TaskPropertyValueWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskPropertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  TaskProperty: z.union([ z.lazy(() => TaskPropertyRelationFilterSchema),z.lazy(() => TaskPropertyWhereInputSchema) ]).optional(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const TaskPropertyValueOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskPropertyValueOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskPropertyId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const TaskPropertyValueWhereUniqueInputSchema: z.ZodType<Prisma.TaskPropertyValueWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const TaskPropertyValueOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskPropertyValueOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskPropertyId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskPropertyValueCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskPropertyValueMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskPropertyValueMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaskPropertyValueScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskPropertyValueScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskPropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskPropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskPropertyValueScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskPropertyValueScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskPropertyValueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taskPropertyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TaskStatusWhereInputSchema: z.ZodType<Prisma.TaskStatusWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskStatusWhereInputSchema),z.lazy(() => TaskStatusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskStatusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskStatusWhereInputSchema),z.lazy(() => TaskStatusWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  displayOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  iconColor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Task: z.lazy(() => TaskListRelationFilterSchema).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const TaskStatusOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskStatusOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  iconColor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  Task: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const TaskStatusWhereUniqueInputSchema: z.ZodType<Prisma.TaskStatusWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const TaskStatusOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskStatusOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  iconColor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskStatusCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TaskStatusAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskStatusMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskStatusMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TaskStatusSumOrderByAggregateInputSchema).optional()
}).strict();

export const TaskStatusScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskStatusScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskStatusScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskStatusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskStatusScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskStatusScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskStatusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  displayOrder: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  iconColor: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TenantWhereInputSchema: z.ZodType<Prisma.TenantWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  settings: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyListRelationFilterSchema).optional(),
  DailyLog: z.lazy(() => DailyLogListRelationFilterSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemListRelationFilterSchema).optional(),
  Equipment: z.lazy(() => EquipmentListRelationFilterSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyListRelationFilterSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueListRelationFilterSchema).optional(),
  Feedback: z.lazy(() => FeedbackListRelationFilterSchema).optional(),
  File: z.lazy(() => FileListRelationFilterSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyListRelationFilterSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueListRelationFilterSchema).optional(),
  Image: z.lazy(() => ImageListRelationFilterSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryListRelationFilterSchema).optional(),
  Project: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyListRelationFilterSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueListRelationFilterSchema).optional(),
  Task: z.lazy(() => TaskListRelationFilterSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyListRelationFilterSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueListRelationFilterSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusListRelationFilterSchema).optional(),
  User_Tenant_createdByToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  TenantUser: z.lazy(() => TenantUserListRelationFilterSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockListRelationFilterSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserListRelationFilterSchema).optional(),
  UserTask: z.lazy(() => UserTaskListRelationFilterSchema).optional()
}).strict();

export const TenantOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  settings: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  ApiKey: z.lazy(() => ApiKeyOrderByRelationAggregateInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogOrderByRelationAggregateInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemOrderByRelationAggregateInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentOrderByRelationAggregateInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyOrderByRelationAggregateInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueOrderByRelationAggregateInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackOrderByRelationAggregateInputSchema).optional(),
  File: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyOrderByRelationAggregateInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueOrderByRelationAggregateInputSchema).optional(),
  Image: z.lazy(() => ImageOrderByRelationAggregateInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryOrderByRelationAggregateInputSchema).optional(),
  Project: z.lazy(() => ProjectOrderByRelationAggregateInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyOrderByRelationAggregateInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueOrderByRelationAggregateInputSchema).optional(),
  Task: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyOrderByRelationAggregateInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueOrderByRelationAggregateInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusOrderByRelationAggregateInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserOrderByRelationAggregateInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockOrderByRelationAggregateInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TenantWhereUniqueInputSchema: z.ZodType<Prisma.TenantWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const TenantOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  settings: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TenantCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TenantMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TenantMinOrderByAggregateInputSchema).optional()
}).strict();

export const TenantScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  settings: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TenantUserWhereInputSchema: z.ZodType<Prisma.TenantUserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantUserWhereInputSchema),z.lazy(() => TenantUserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantUserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantUserWhereInputSchema),z.lazy(() => TenantUserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userRole: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  inviteEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inviteSentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  inviteStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User_TenantUser_createdByToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  User_TenantUser_userIdToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUserOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantUserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userRole: z.lazy(() => SortOrderSchema).optional(),
  inviteEmail: z.lazy(() => SortOrderSchema).optional(),
  inviteSentAt: z.lazy(() => SortOrderSchema).optional(),
  inviteStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User_TenantUser_createdByToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  User_TenantUser_userIdToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TenantUserWhereUniqueInputSchema: z.ZodType<Prisma.TenantUserWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const TenantUserOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantUserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userRole: z.lazy(() => SortOrderSchema).optional(),
  inviteEmail: z.lazy(() => SortOrderSchema).optional(),
  inviteSentAt: z.lazy(() => SortOrderSchema).optional(),
  inviteStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TenantUserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TenantUserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TenantUserMinOrderByAggregateInputSchema).optional()
}).strict();

export const TenantUserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantUserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TenantUserScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantUserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantUserScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userRole: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  inviteEmail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  inviteSentAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  inviteStatus: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TimeBlockWhereInputSchema: z.ZodType<Prisma.TimeBlockWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeBlockWhereInputSchema),z.lazy(() => TimeBlockWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeBlockWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeBlockWhereInputSchema),z.lazy(() => TimeBlockWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  entryType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rangeStartAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rangeEndAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerStartLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerStartLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerStartAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timerStartAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerEndAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerEndLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerEndLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerEndAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dailyLogItemId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  DailyLogItem: z.union([ z.lazy(() => DailyLogItemRelationFilterSchema),z.lazy(() => DailyLogItemWhereInputSchema) ]).optional(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const TimeBlockOrderByWithRelationInputSchema: z.ZodType<Prisma.TimeBlockOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  entryType: z.lazy(() => SortOrderSchema).optional(),
  rangeStartAt: z.lazy(() => SortOrderSchema).optional(),
  rangeEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerStartLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartAddress: z.lazy(() => SortOrderSchema).optional(),
  timerStartAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndAddress: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogItemId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const TimeBlockWhereUniqueInputSchema: z.ZodType<Prisma.TimeBlockWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const TimeBlockOrderByWithAggregationInputSchema: z.ZodType<Prisma.TimeBlockOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  entryType: z.lazy(() => SortOrderSchema).optional(),
  rangeStartAt: z.lazy(() => SortOrderSchema).optional(),
  rangeEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerStartLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartAddress: z.lazy(() => SortOrderSchema).optional(),
  timerStartAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndAddress: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogItemId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TimeBlockCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TimeBlockAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TimeBlockMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TimeBlockMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TimeBlockSumOrderByAggregateInputSchema).optional()
}).strict();

export const TimeBlockScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TimeBlockScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TimeBlockScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeBlockScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeBlockScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeBlockScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeBlockScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  duration: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  entryType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rangeStartAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  rangeEndAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerStartLatitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  timerStartLongitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  timerStartAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  timerStartAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerEndAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerEndLatitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  timerEndLongitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  timerEndAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  dailyLogItemId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  preferredLanguage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  settings: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  imageId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  currentTenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ApiKey: z.lazy(() => ApiKeyListRelationFilterSchema).optional(),
  DailyLog: z.lazy(() => DailyLogListRelationFilterSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemListRelationFilterSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentListRelationFilterSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentListRelationFilterSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyListRelationFilterSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueListRelationFilterSchema).optional(),
  Feedback: z.lazy(() => FeedbackListRelationFilterSchema).optional(),
  File: z.lazy(() => FileListRelationFilterSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyListRelationFilterSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueListRelationFilterSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageListRelationFilterSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryListRelationFilterSchema).optional(),
  Project: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyListRelationFilterSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueListRelationFilterSchema).optional(),
  Task: z.lazy(() => TaskListRelationFilterSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyListRelationFilterSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueListRelationFilterSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusListRelationFilterSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantListRelationFilterSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserListRelationFilterSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserListRelationFilterSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockListRelationFilterSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  Image_User_imageIdToImage: z.union([ z.lazy(() => ImageRelationFilterSchema),z.lazy(() => ImageWhereInputSchema) ]).optional().nullable(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskListRelationFilterSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  preferredLanguage: z.lazy(() => SortOrderSchema).optional(),
  settings: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  currentTenantId: z.lazy(() => SortOrderSchema).optional(),
  ApiKey: z.lazy(() => ApiKeyOrderByRelationAggregateInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogOrderByRelationAggregateInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemOrderByRelationAggregateInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentOrderByRelationAggregateInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentOrderByRelationAggregateInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyOrderByRelationAggregateInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueOrderByRelationAggregateInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackOrderByRelationAggregateInputSchema).optional(),
  File: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyOrderByRelationAggregateInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueOrderByRelationAggregateInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageOrderByRelationAggregateInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryOrderByRelationAggregateInputSchema).optional(),
  Project: z.lazy(() => ProjectOrderByRelationAggregateInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyOrderByRelationAggregateInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueOrderByRelationAggregateInputSchema).optional(),
  Task: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyOrderByRelationAggregateInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueOrderByRelationAggregateInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusOrderByRelationAggregateInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantOrderByRelationAggregateInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserOrderByRelationAggregateInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserOrderByRelationAggregateInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockOrderByRelationAggregateInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageOrderByWithRelationInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskOrderByRelationAggregateInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  preferredLanguage: z.lazy(() => SortOrderSchema).optional(),
  settings: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  currentTenantId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  preferredLanguage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  settings: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  imageId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  currentTenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const UserTaskWhereInputSchema: z.ZodType<Prisma.UserTaskWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserTaskWhereInputSchema),z.lazy(() => UserTaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserTaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserTaskWhereInputSchema),z.lazy(() => UserTaskWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  User_UserTask_createdByToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  Tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  User_UserTask_userIdToUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserTaskOrderByWithRelationInputSchema: z.ZodType<Prisma.UserTaskOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  User_UserTask_createdByToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional(),
  Tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  User_UserTask_userIdToUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const UserTaskWhereUniqueInputSchema: z.ZodType<Prisma.UserTaskWhereUniqueInput> = z.object({
  id: z.string().optional()
}).strict();

export const UserTaskOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserTaskOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserTaskCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserTaskMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserTaskMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserTaskScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserTaskScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserTaskScalarWhereWithAggregatesInputSchema),z.lazy(() => UserTaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserTaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserTaskScalarWhereWithAggregatesInputSchema),z.lazy(() => UserTaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ApiKeyCreateInputSchema: z.ZodType<Prisma.ApiKeyCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutApiKeyInputSchema),
  User: z.lazy(() => UserCreateNestedOneWithoutApiKeyInputSchema).optional()
}).strict();

export const ApiKeyUncheckedCreateInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  tenantId: z.string(),
  userId: z.string().optional().nullable()
}).strict();

export const ApiKeyUpdateInputSchema: z.ZodType<Prisma.ApiKeyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutApiKeyNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutApiKeyNestedInputSchema).optional()
}).strict();

export const ApiKeyUncheckedUpdateInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ApiKeyCreateManyInputSchema: z.ZodType<Prisma.ApiKeyCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  tenantId: z.string(),
  userId: z.string().optional().nullable()
}).strict();

export const ApiKeyUpdateManyMutationInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const DailyLogCreateInputSchema: z.ZodType<Prisma.DailyLogCreateInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number().int().gte(-2147483648).lte(2147483647),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogInputSchema),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogUncheckedCreateInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number().int().gte(-2147483648).lte(2147483647),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogUpdateInputSchema: z.ZodType<Prisma.DailyLogUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogUncheckedUpdateInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogCreateManyInputSchema: z.ZodType<Prisma.DailyLogCreateManyInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number().int().gte(-2147483648).lte(2147483647),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const DailyLogUpdateManyMutationInputSchema: z.ZodType<Prisma.DailyLogUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const DailyLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyLogItemCreateInputSchema: z.ZodType<Prisma.DailyLogItemCreateInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutDailyLogItemInputSchema),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogItemInputSchema),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedCreateInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemUpdateInputSchema: z.ZodType<Prisma.DailyLogItemUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemCreateManyInputSchema: z.ZodType<Prisma.DailyLogItemCreateManyInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable()
}).strict();

export const DailyLogItemUpdateManyMutationInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const DailyLogItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentCreateInputSchema: z.ZodType<Prisma.EquipmentCreateInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutEquipmentInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentInputSchema),
  User_Equipment_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_userIdToUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  userId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUpdateInputSchema: z.ZodType<Prisma.EquipmentUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_userIdToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentCreateManyInputSchema: z.ZodType<Prisma.EquipmentCreateManyInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  userId: z.string().optional().nullable()
}).strict();

export const EquipmentUpdateManyMutationInputSchema: z.ZodType<Prisma.EquipmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentPropertyCreateInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEquipmentPropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentPropertyInputSchema),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentPropertyInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedCreateInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentPropertyInputSchema).optional()
}).strict();

export const EquipmentPropertyUpdateInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutEquipmentPropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentPropertyNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentPropertyNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedUpdateInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyCreateManyInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyUpdateManyMutationInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentPropertyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyValueCreateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEquipmentPropertyValueInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutEquipmentPropertyValueInputSchema),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedOneWithoutEquipmentPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentPropertyValueInputSchema)
}).strict();

export const EquipmentPropertyValueUncheckedCreateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentId: z.string(),
  equipmentPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueUpdateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUncheckedUpdateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyValueCreateManyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentId: z.string(),
  equipmentPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueUpdateManyMutationInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentPropertyValueUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackCreateInputSchema: z.ZodType<Prisma.FeedbackCreateInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFeedbackInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFeedbackInputSchema)
}).strict();

export const FeedbackUncheckedCreateInputSchema: z.ZodType<Prisma.FeedbackUncheckedCreateInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const FeedbackUpdateInputSchema: z.ZodType<Prisma.FeedbackUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFeedbackNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFeedbackNestedInputSchema).optional()
}).strict();

export const FeedbackUncheckedUpdateInputSchema: z.ZodType<Prisma.FeedbackUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackCreateManyInputSchema: z.ZodType<Prisma.FeedbackCreateManyInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const FeedbackUpdateManyMutationInputSchema: z.ZodType<Prisma.FeedbackUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeedbackUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FeedbackUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileCreateInputSchema: z.ZodType<Prisma.FileCreateInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFileInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutFileInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedOneWithoutFileInputSchema),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutFileInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFileInputSchema),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileUncheckedCreateInputSchema: z.ZodType<Prisma.FileUncheckedCreateInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileUpdateInputSchema: z.ZodType<Prisma.FileUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFileNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneWithoutFileNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneWithoutFileNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateInputSchema: z.ZodType<Prisma.FileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileCreateManyInputSchema: z.ZodType<Prisma.FileCreateManyInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable()
}).strict();

export const FileUpdateManyMutationInputSchema: z.ZodType<Prisma.FileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FilePropertyCreateInputSchema: z.ZodType<Prisma.FilePropertyCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFilePropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFilePropertyInputSchema),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFilePropertyInputSchema).optional()
}).strict();

export const FilePropertyUncheckedCreateInputSchema: z.ZodType<Prisma.FilePropertyUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFilePropertyInputSchema).optional()
}).strict();

export const FilePropertyUpdateInputSchema: z.ZodType<Prisma.FilePropertyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFilePropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilePropertyNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFilePropertyNestedInputSchema).optional()
}).strict();

export const FilePropertyUncheckedUpdateInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFilePropertyNestedInputSchema).optional()
}).strict();

export const FilePropertyCreateManyInputSchema: z.ZodType<Prisma.FilePropertyCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const FilePropertyUpdateManyMutationInputSchema: z.ZodType<Prisma.FilePropertyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FilePropertyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueCreateInputSchema: z.ZodType<Prisma.FilePropertyValueCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFilePropertyValueInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedOneWithoutFilePropertyValueInputSchema),
  FileProperty: z.lazy(() => FilePropertyCreateNestedOneWithoutFilePropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFilePropertyValueInputSchema)
}).strict();

export const FilePropertyValueUncheckedCreateInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  fileId: z.string(),
  propertyId: z.string(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueUpdateInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFilePropertyValueNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUncheckedUpdateInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueCreateManyInputSchema: z.ZodType<Prisma.FilePropertyValueCreateManyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  fileId: z.string(),
  propertyId: z.string(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueUpdateManyMutationInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FilePropertyValueUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImageCreateInputSchema: z.ZodType<Prisma.ImageCreateInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutImageInputSchema).optional(),
  User_Image_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutImage_Image_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutImageInputSchema),
  User_User_imageIdToImage: z.lazy(() => UserCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageUncheckedCreateInputSchema: z.ZodType<Prisma.ImageUncheckedCreateInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutImageInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageUpdateInputSchema: z.ZodType<Prisma.ImageUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutImageNestedInputSchema).optional(),
  User_Image_createdByToUser: z.lazy(() => UserUpdateOneWithoutImage_Image_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutImageNestedInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ImageUncheckedUpdateInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutImageNestedInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ImageCreateManyInputSchema: z.ZodType<Prisma.ImageCreateManyInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const ImageUpdateManyMutationInputSchema: z.ZodType<Prisma.ImageUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ImageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LocationEntryCreateInputSchema: z.ZodType<Prisma.LocationEntryCreateInput> = z.object({
  id: z.string(),
  latitude: z.number().or(z.nan()).optional().nullable(),
  longitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutLocationEntryInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutLocationEntryInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutLocationEntryInputSchema)
}).strict();

export const LocationEntryUncheckedCreateInputSchema: z.ZodType<Prisma.LocationEntryUncheckedCreateInput> = z.object({
  id: z.string(),
  latitude: z.number().or(z.nan()).optional().nullable(),
  longitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string()
}).strict();

export const LocationEntryUpdateInputSchema: z.ZodType<Prisma.LocationEntryUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutLocationEntryNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutLocationEntryNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutLocationEntryNestedInputSchema).optional()
}).strict();

export const LocationEntryUncheckedUpdateInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LocationEntryCreateManyInputSchema: z.ZodType<Prisma.LocationEntryCreateManyInput> = z.object({
  id: z.string(),
  latitude: z.number().or(z.nan()).optional().nullable(),
  longitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string()
}).strict();

export const LocationEntryUpdateManyMutationInputSchema: z.ZodType<Prisma.LocationEntryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LocationEntryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateInputSchema: z.ZodType<Prisma.ProjectCreateInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().or(z.nan()).optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutProjectInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectInputSchema),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().or(z.nan()).optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUpdateInputSchema: z.ZodType<Prisma.ProjectUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutProjectNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutProjectNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectCreateManyInputSchema: z.ZodType<Prisma.ProjectCreateManyInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().or(z.nan()).optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const ProjectUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyCreateInputSchema: z.ZodType<Prisma.ProjectPropertyCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectPropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectPropertyInputSchema),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectPropertyInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectPropertyInputSchema).optional()
}).strict();

export const ProjectPropertyUpdateInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectPropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectPropertyNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectPropertyNestedInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyNestedInputSchema).optional()
}).strict();

export const ProjectPropertyCreateManyInputSchema: z.ZodType<Prisma.ProjectPropertyCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectPropertyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyValueCreateInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectPropertyValueInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutProjectPropertyValueInputSchema),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedOneWithoutProjectPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectPropertyValueInputSchema)
}).strict();

export const ProjectPropertyValueUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  projectPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyValueUpdateInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectPropertyValueNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyValueCreateManyInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  projectPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyValueUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectPropertyValueUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateInputSchema: z.ZodType<Prisma.TaskCreateInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateInputSchema: z.ZodType<Prisma.TaskUncheckedCreateInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUpdateInputSchema: z.ZodType<Prisma.TaskUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskCreateManyInputSchema: z.ZodType<Prisma.TaskCreateManyInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable()
}).strict();

export const TaskUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskPropertyCreateInputSchema: z.ZodType<Prisma.TaskPropertyCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskPropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskPropertyInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskPropertyInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedCreateInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskPropertyInputSchema).optional()
}).strict();

export const TaskPropertyUpdateInputSchema: z.ZodType<Prisma.TaskPropertyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskPropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskPropertyNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskPropertyNestedInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyNestedInputSchema).optional()
}).strict();

export const TaskPropertyCreateManyInputSchema: z.ZodType<Prisma.TaskPropertyCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TaskPropertyUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskPropertyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskPropertyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskPropertyValueCreateInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskPropertyValueInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutTaskPropertyValueInputSchema),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedOneWithoutTaskPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskPropertyValueInputSchema)
}).strict();

export const TaskPropertyValueUncheckedCreateInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskPropertyId: z.string(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskPropertyValueUpdateInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskPropertyValueNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskPropertyValueCreateManyInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskPropertyId: z.string(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskPropertyValueUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskPropertyValueUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskStatusCreateInputSchema: z.ZodType<Prisma.TaskStatusCreateInput> = z.object({
  id: z.string(),
  displayOrder: z.number().int().gte(-2147483648).lte(2147483647),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTaskStatusInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskStatusInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskStatusInputSchema)
}).strict();

export const TaskStatusUncheckedCreateInputSchema: z.ZodType<Prisma.TaskStatusUncheckedCreateInput> = z.object({
  id: z.string(),
  displayOrder: z.number().int().gte(-2147483648).lte(2147483647),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskStatusInputSchema).optional()
}).strict();

export const TaskStatusUpdateInputSchema: z.ZodType<Prisma.TaskStatusUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Task: z.lazy(() => TaskUpdateManyWithoutTaskStatusNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskStatusNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskStatusNestedInputSchema).optional()
}).strict();

export const TaskStatusUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskStatusNestedInputSchema).optional()
}).strict();

export const TaskStatusCreateManyInputSchema: z.ZodType<Prisma.TaskStatusCreateManyInput> = z.object({
  id: z.string(),
  displayOrder: z.number().int().gte(-2147483648).lte(2147483647),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TaskStatusUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskStatusUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskStatusUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantCreateInputSchema: z.ZodType<Prisma.TenantCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateInputSchema: z.ZodType<Prisma.TenantUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUpdateInputSchema: z.ZodType<Prisma.TenantUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantCreateManyInputSchema: z.ZodType<Prisma.TenantCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const TenantUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUserCreateInputSchema: z.ZodType<Prisma.TenantUserCreateInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_TenantUser_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenantUser_TenantUser_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTenantUserInputSchema),
  User_TenantUser_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutTenantUser_TenantUser_userIdToUserInputSchema).optional()
}).strict();

export const TenantUserUncheckedCreateInputSchema: z.ZodType<Prisma.TenantUserUncheckedCreateInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TenantUserUpdateInputSchema: z.ZodType<Prisma.TenantUserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_TenantUser_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenantUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTenantUserNestedInputSchema).optional(),
  User_TenantUser_userIdToUser: z.lazy(() => UserUpdateOneWithoutTenantUser_TenantUser_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUserUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUserCreateManyInputSchema: z.ZodType<Prisma.TenantUserCreateManyInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TenantUserUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantUserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeBlockCreateInputSchema: z.ZodType<Prisma.TimeBlockCreateInput> = z.object({
  id: z.string(),
  duration: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().or(z.nan()).optional().nullable(),
  timerStartLongitude: z.number().or(z.nan()).optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().or(z.nan()).optional().nullable(),
  timerEndLongitude: z.number().or(z.nan()).optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTimeBlockInputSchema),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedOneWithoutTimeBlockInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTimeBlockInputSchema)
}).strict();

export const TimeBlockUncheckedCreateInputSchema: z.ZodType<Prisma.TimeBlockUncheckedCreateInput> = z.object({
  id: z.string(),
  duration: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().or(z.nan()).optional().nullable(),
  timerStartLongitude: z.number().or(z.nan()).optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().or(z.nan()).optional().nullable(),
  timerEndLongitude: z.number().or(z.nan()).optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string(),
  dailyLogItemId: z.string(),
  tenantId: z.string()
}).strict();

export const TimeBlockUpdateInputSchema: z.ZodType<Prisma.TimeBlockUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional()
}).strict();

export const TimeBlockUncheckedUpdateInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dailyLogItemId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeBlockCreateManyInputSchema: z.ZodType<Prisma.TimeBlockCreateManyInput> = z.object({
  id: z.string(),
  duration: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().or(z.nan()).optional().nullable(),
  timerStartLongitude: z.number().or(z.nan()).optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().or(z.nan()).optional().nullable(),
  timerEndLongitude: z.number().or(z.nan()).optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string(),
  dailyLogItemId: z.string(),
  tenantId: z.string()
}).strict();

export const TimeBlockUpdateManyMutationInputSchema: z.ZodType<Prisma.TimeBlockUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TimeBlockUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dailyLogItemId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskCreateInputSchema: z.ZodType<Prisma.UserTaskCreateInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_createdByToUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutUserTaskInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutUserTaskInputSchema),
  User_UserTask_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_userIdToUserInputSchema)
}).strict();

export const UserTaskUncheckedCreateInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string(),
  userId: z.string()
}).strict();

export const UserTaskUpdateInputSchema: z.ZodType<Prisma.UserTaskUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserUpdateOneWithoutUserTask_UserTask_createdByToUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional(),
  User_UserTask_userIdToUser: z.lazy(() => UserUpdateOneRequiredWithoutUserTask_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserTaskUncheckedUpdateInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskCreateManyInputSchema: z.ZodType<Prisma.UserTaskCreateManyInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string(),
  userId: z.string()
}).strict();

export const UserTaskUpdateManyMutationInputSchema: z.ZodType<Prisma.UserTaskUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserTaskUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const TenantRelationFilterSchema: z.ZodType<Prisma.TenantRelationFilter> = z.object({
  is: z.lazy(() => TenantWhereInputSchema).optional(),
  isNot: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const ApiKeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const DailyLogItemListRelationFilterSchema: z.ZodType<Prisma.DailyLogItemListRelationFilter> = z.object({
  every: z.lazy(() => DailyLogItemWhereInputSchema).optional(),
  some: z.lazy(() => DailyLogItemWhereInputSchema).optional(),
  none: z.lazy(() => DailyLogItemWhereInputSchema).optional()
}).strict();

export const FileListRelationFilterSchema: z.ZodType<Prisma.FileListRelationFilter> = z.object({
  every: z.lazy(() => FileWhereInputSchema).optional(),
  some: z.lazy(() => FileWhereInputSchema).optional(),
  none: z.lazy(() => FileWhereInputSchema).optional()
}).strict();

export const LocationEntryListRelationFilterSchema: z.ZodType<Prisma.LocationEntryListRelationFilter> = z.object({
  every: z.lazy(() => LocationEntryWhereInputSchema).optional(),
  some: z.lazy(() => LocationEntryWhereInputSchema).optional(),
  none: z.lazy(() => LocationEntryWhereInputSchema).optional()
}).strict();

export const DailyLogItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DailyLogItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LocationEntryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LocationEntryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  ratingNote: z.lazy(() => SortOrderSchema).optional(),
  managerNote: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogAvgOrderByAggregateInput> = z.object({
  rating: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  ratingNote: z.lazy(() => SortOrderSchema).optional(),
  managerNote: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  ratingNote: z.lazy(() => SortOrderSchema).optional(),
  managerNote: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogSumOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogSumOrderByAggregateInput> = z.object({
  rating: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DailyLogRelationFilterSchema: z.ZodType<Prisma.DailyLogRelationFilter> = z.object({
  is: z.lazy(() => DailyLogWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => DailyLogWhereInputSchema).optional().nullable()
}).strict();

export const EquipmentRelationFilterSchema: z.ZodType<Prisma.EquipmentRelationFilter> = z.object({
  is: z.lazy(() => EquipmentWhereInputSchema).optional(),
  isNot: z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();

export const TaskRelationFilterSchema: z.ZodType<Prisma.TaskRelationFilter> = z.object({
  is: z.lazy(() => TaskWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaskWhereInputSchema).optional().nullable()
}).strict();

export const TimeBlockListRelationFilterSchema: z.ZodType<Prisma.TimeBlockListRelationFilter> = z.object({
  every: z.lazy(() => TimeBlockWhereInputSchema).optional(),
  some: z.lazy(() => TimeBlockWhereInputSchema).optional(),
  none: z.lazy(() => TimeBlockWhereInputSchema).optional()
}).strict();

export const TimeBlockOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TimeBlockOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  isNoteVisible: z.lazy(() => SortOrderSchema).optional(),
  itemType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  isNoteVisible: z.lazy(() => SortOrderSchema).optional(),
  itemType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.DailyLogItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  isNoteVisible: z.lazy(() => SortOrderSchema).optional(),
  itemType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const EquipmentPropertyValueListRelationFilterSchema: z.ZodType<Prisma.EquipmentPropertyValueListRelationFilter> = z.object({
  every: z.lazy(() => EquipmentPropertyValueWhereInputSchema).optional(),
  some: z.lazy(() => EquipmentPropertyValueWhereInputSchema).optional(),
  none: z.lazy(() => EquipmentPropertyValueWhereInputSchema).optional()
}).strict();

export const EquipmentPropertyValueOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyCountOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyMinOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertySumOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertySumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyRelationFilterSchema: z.ZodType<Prisma.EquipmentPropertyRelationFilter> = z.object({
  is: z.lazy(() => EquipmentPropertyWhereInputSchema).optional(),
  isNot: z.lazy(() => EquipmentPropertyWhereInputSchema).optional()
}).strict();

export const EquipmentPropertyValueCountOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  equipmentPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyValueMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  equipmentPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyValueMinOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyValueMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  equipmentPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackCountOrderByAggregateInputSchema: z.ZodType<Prisma.FeedbackCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  text: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FeedbackMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  text: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackMinOrderByAggregateInputSchema: z.ZodType<Prisma.FeedbackMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  text: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ImageRelationFilterSchema: z.ZodType<Prisma.ImageRelationFilter> = z.object({
  is: z.lazy(() => ImageWhereInputSchema).optional(),
  isNot: z.lazy(() => ImageWhereInputSchema).optional()
}).strict();

export const ProjectRelationFilterSchema: z.ZodType<Prisma.ProjectRelationFilter> = z.object({
  is: z.lazy(() => ProjectWhereInputSchema).optional(),
  isNot: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const FilePropertyValueListRelationFilterSchema: z.ZodType<Prisma.FilePropertyValueListRelationFilter> = z.object({
  every: z.lazy(() => FilePropertyValueWhereInputSchema).optional(),
  some: z.lazy(() => FilePropertyValueWhereInputSchema).optional(),
  none: z.lazy(() => FilePropertyValueWhereInputSchema).optional()
}).strict();

export const FilePropertyValueOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FilePropertyValueOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileCountOrderByAggregateInputSchema: z.ZodType<Prisma.FileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FileAvgOrderByAggregateInput> = z.object({
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMinOrderByAggregateInputSchema: z.ZodType<Prisma.FileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileSumOrderByAggregateInputSchema: z.ZodType<Prisma.FileSumOrderByAggregateInput> = z.object({
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const FilePropertyCountOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FilePropertyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertyAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FilePropertyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FilePropertyMinOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FilePropertySumOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertySumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileRelationFilterSchema: z.ZodType<Prisma.FileRelationFilter> = z.object({
  is: z.lazy(() => FileWhereInputSchema).optional(),
  isNot: z.lazy(() => FileWhereInputSchema).optional()
}).strict();

export const FilePropertyRelationFilterSchema: z.ZodType<Prisma.FilePropertyRelationFilter> = z.object({
  is: z.lazy(() => FilePropertyWhereInputSchema).optional(),
  isNot: z.lazy(() => FilePropertyWhereInputSchema).optional()
}).strict();

export const FilePropertyValueCountOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertyValueCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  fileId: z.lazy(() => SortOrderSchema).optional(),
  propertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FilePropertyValueMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertyValueMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  fileId: z.lazy(() => SortOrderSchema).optional(),
  propertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FilePropertyValueMinOrderByAggregateInputSchema: z.ZodType<Prisma.FilePropertyValueMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  fileId: z.lazy(() => SortOrderSchema).optional(),
  propertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImageCountOrderByAggregateInputSchema: z.ZodType<Prisma.ImageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bucketId: z.lazy(() => SortOrderSchema).optional(),
  blurhash: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ImageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bucketId: z.lazy(() => SortOrderSchema).optional(),
  blurhash: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImageMinOrderByAggregateInputSchema: z.ZodType<Prisma.ImageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bucketId: z.lazy(() => SortOrderSchema).optional(),
  blurhash: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LocationEntryCountOrderByAggregateInputSchema: z.ZodType<Prisma.LocationEntryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LocationEntryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LocationEntryAvgOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LocationEntryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LocationEntryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LocationEntryMinOrderByAggregateInputSchema: z.ZodType<Prisma.LocationEntryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LocationEntrySumOrderByAggregateInputSchema: z.ZodType<Prisma.LocationEntrySumOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyValueListRelationFilterSchema: z.ZodType<Prisma.ProjectPropertyValueListRelationFilter> = z.object({
  every: z.lazy(() => ProjectPropertyValueWhereInputSchema).optional(),
  some: z.lazy(() => ProjectPropertyValueWhereInputSchema).optional(),
  none: z.lazy(() => ProjectPropertyValueWhereInputSchema).optional()
}).strict();

export const TaskListRelationFilterSchema: z.ZodType<Prisma.TaskListRelationFilter> = z.object({
  every: z.lazy(() => TaskWhereInputSchema).optional(),
  some: z.lazy(() => TaskWhereInputSchema).optional(),
  none: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const ProjectPropertyValueOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyValueOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  progress: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectAvgOrderByAggregateInput> = z.object({
  progress: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  progress: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  progress: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  locationLabel: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectSumOrderByAggregateInput> = z.object({
  progress: z.lazy(() => SortOrderSchema).optional(),
  locationLatitude: z.lazy(() => SortOrderSchema).optional(),
  locationLongitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertySumOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertySumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyRelationFilterSchema: z.ZodType<Prisma.ProjectPropertyRelationFilter> = z.object({
  is: z.lazy(() => ProjectPropertyWhereInputSchema).optional(),
  isNot: z.lazy(() => ProjectPropertyWhereInputSchema).optional()
}).strict();

export const ProjectPropertyValueCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyValueCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  projectPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyValueMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyValueMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  projectPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyValueMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyValueMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  projectPropertyId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskStatusRelationFilterSchema: z.ZodType<Prisma.TaskStatusRelationFilter> = z.object({
  is: z.lazy(() => TaskStatusWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaskStatusWhereInputSchema).optional().nullable()
}).strict();

export const TaskPropertyValueListRelationFilterSchema: z.ZodType<Prisma.TaskPropertyValueListRelationFilter> = z.object({
  every: z.lazy(() => TaskPropertyValueWhereInputSchema).optional(),
  some: z.lazy(() => TaskPropertyValueWhereInputSchema).optional(),
  none: z.lazy(() => TaskPropertyValueWhereInputSchema).optional()
}).strict();

export const UserTaskListRelationFilterSchema: z.ZodType<Prisma.UserTaskListRelationFilter> = z.object({
  every: z.lazy(() => UserTaskWhereInputSchema).optional(),
  some: z.lazy(() => UserTaskWhereInputSchema).optional(),
  none: z.lazy(() => UserTaskWhereInputSchema).optional()
}).strict();

export const TaskPropertyValueOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskPropertyValueOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserTaskOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserTaskOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  systemStatusId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  taskStatusId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  systemStatusId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  taskStatusId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  systemStatusId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  taskStatusId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertyAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertySumOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertySumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyRelationFilterSchema: z.ZodType<Prisma.TaskPropertyRelationFilter> = z.object({
  is: z.lazy(() => TaskPropertyWhereInputSchema).optional(),
  isNot: z.lazy(() => TaskPropertyWhereInputSchema).optional()
}).strict();

export const TaskPropertyValueCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertyValueCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskPropertyId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyValueMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertyValueMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskPropertyId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyValueMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskPropertyValueMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskPropertyId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskStatusCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskStatusCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  iconColor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskStatusAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TaskStatusAvgOrderByAggregateInput> = z.object({
  displayOrder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskStatusMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskStatusMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  iconColor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskStatusMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskStatusMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  iconColor: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskStatusSumOrderByAggregateInputSchema: z.ZodType<Prisma.TaskStatusSumOrderByAggregateInput> = z.object({
  displayOrder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
}).strict();

export const ApiKeyListRelationFilterSchema: z.ZodType<Prisma.ApiKeyListRelationFilter> = z.object({
  every: z.lazy(() => ApiKeyWhereInputSchema).optional(),
  some: z.lazy(() => ApiKeyWhereInputSchema).optional(),
  none: z.lazy(() => ApiKeyWhereInputSchema).optional()
}).strict();

export const DailyLogListRelationFilterSchema: z.ZodType<Prisma.DailyLogListRelationFilter> = z.object({
  every: z.lazy(() => DailyLogWhereInputSchema).optional(),
  some: z.lazy(() => DailyLogWhereInputSchema).optional(),
  none: z.lazy(() => DailyLogWhereInputSchema).optional()
}).strict();

export const EquipmentListRelationFilterSchema: z.ZodType<Prisma.EquipmentListRelationFilter> = z.object({
  every: z.lazy(() => EquipmentWhereInputSchema).optional(),
  some: z.lazy(() => EquipmentWhereInputSchema).optional(),
  none: z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();

export const EquipmentPropertyListRelationFilterSchema: z.ZodType<Prisma.EquipmentPropertyListRelationFilter> = z.object({
  every: z.lazy(() => EquipmentPropertyWhereInputSchema).optional(),
  some: z.lazy(() => EquipmentPropertyWhereInputSchema).optional(),
  none: z.lazy(() => EquipmentPropertyWhereInputSchema).optional()
}).strict();

export const FeedbackListRelationFilterSchema: z.ZodType<Prisma.FeedbackListRelationFilter> = z.object({
  every: z.lazy(() => FeedbackWhereInputSchema).optional(),
  some: z.lazy(() => FeedbackWhereInputSchema).optional(),
  none: z.lazy(() => FeedbackWhereInputSchema).optional()
}).strict();

export const FilePropertyListRelationFilterSchema: z.ZodType<Prisma.FilePropertyListRelationFilter> = z.object({
  every: z.lazy(() => FilePropertyWhereInputSchema).optional(),
  some: z.lazy(() => FilePropertyWhereInputSchema).optional(),
  none: z.lazy(() => FilePropertyWhereInputSchema).optional()
}).strict();

export const ImageListRelationFilterSchema: z.ZodType<Prisma.ImageListRelationFilter> = z.object({
  every: z.lazy(() => ImageWhereInputSchema).optional(),
  some: z.lazy(() => ImageWhereInputSchema).optional(),
  none: z.lazy(() => ImageWhereInputSchema).optional()
}).strict();

export const ProjectListRelationFilterSchema: z.ZodType<Prisma.ProjectListRelationFilter> = z.object({
  every: z.lazy(() => ProjectWhereInputSchema).optional(),
  some: z.lazy(() => ProjectWhereInputSchema).optional(),
  none: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectPropertyListRelationFilterSchema: z.ZodType<Prisma.ProjectPropertyListRelationFilter> = z.object({
  every: z.lazy(() => ProjectPropertyWhereInputSchema).optional(),
  some: z.lazy(() => ProjectPropertyWhereInputSchema).optional(),
  none: z.lazy(() => ProjectPropertyWhereInputSchema).optional()
}).strict();

export const TaskPropertyListRelationFilterSchema: z.ZodType<Prisma.TaskPropertyListRelationFilter> = z.object({
  every: z.lazy(() => TaskPropertyWhereInputSchema).optional(),
  some: z.lazy(() => TaskPropertyWhereInputSchema).optional(),
  none: z.lazy(() => TaskPropertyWhereInputSchema).optional()
}).strict();

export const TaskStatusListRelationFilterSchema: z.ZodType<Prisma.TaskStatusListRelationFilter> = z.object({
  every: z.lazy(() => TaskStatusWhereInputSchema).optional(),
  some: z.lazy(() => TaskStatusWhereInputSchema).optional(),
  none: z.lazy(() => TaskStatusWhereInputSchema).optional()
}).strict();

export const TenantUserListRelationFilterSchema: z.ZodType<Prisma.TenantUserListRelationFilter> = z.object({
  every: z.lazy(() => TenantUserWhereInputSchema).optional(),
  some: z.lazy(() => TenantUserWhereInputSchema).optional(),
  none: z.lazy(() => TenantUserWhereInputSchema).optional()
}).strict();

export const ApiKeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ApiKeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DailyLogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DailyLogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EquipmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentPropertyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EquipmentPropertyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FeedbackOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FilePropertyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FilePropertyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ImageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectPropertyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectPropertyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskPropertyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskPropertyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskStatusOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskStatusOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantUserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TenantUserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  settings: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const TenantUserCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantUserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userRole: z.lazy(() => SortOrderSchema).optional(),
  inviteEmail: z.lazy(() => SortOrderSchema).optional(),
  inviteSentAt: z.lazy(() => SortOrderSchema).optional(),
  inviteStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantUserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantUserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userRole: z.lazy(() => SortOrderSchema).optional(),
  inviteEmail: z.lazy(() => SortOrderSchema).optional(),
  inviteSentAt: z.lazy(() => SortOrderSchema).optional(),
  inviteStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantUserMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantUserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userRole: z.lazy(() => SortOrderSchema).optional(),
  inviteEmail: z.lazy(() => SortOrderSchema).optional(),
  inviteSentAt: z.lazy(() => SortOrderSchema).optional(),
  inviteStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DailyLogItemRelationFilterSchema: z.ZodType<Prisma.DailyLogItemRelationFilter> = z.object({
  is: z.lazy(() => DailyLogItemWhereInputSchema).optional(),
  isNot: z.lazy(() => DailyLogItemWhereInputSchema).optional()
}).strict();

export const TimeBlockCountOrderByAggregateInputSchema: z.ZodType<Prisma.TimeBlockCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  entryType: z.lazy(() => SortOrderSchema).optional(),
  rangeStartAt: z.lazy(() => SortOrderSchema).optional(),
  rangeEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerStartLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartAddress: z.lazy(() => SortOrderSchema).optional(),
  timerStartAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndAddress: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogItemId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeBlockAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TimeBlockAvgOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  timerStartLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLongitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeBlockMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TimeBlockMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  entryType: z.lazy(() => SortOrderSchema).optional(),
  rangeStartAt: z.lazy(() => SortOrderSchema).optional(),
  rangeEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerStartLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartAddress: z.lazy(() => SortOrderSchema).optional(),
  timerStartAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndAddress: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogItemId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeBlockMinOrderByAggregateInputSchema: z.ZodType<Prisma.TimeBlockMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  entryType: z.lazy(() => SortOrderSchema).optional(),
  rangeStartAt: z.lazy(() => SortOrderSchema).optional(),
  rangeEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerStartLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartAddress: z.lazy(() => SortOrderSchema).optional(),
  timerStartAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndAt: z.lazy(() => SortOrderSchema).optional(),
  timerEndLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndAddress: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  dailyLogItemId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeBlockSumOrderByAggregateInputSchema: z.ZodType<Prisma.TimeBlockSumOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  timerStartLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerStartLongitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLatitude: z.lazy(() => SortOrderSchema).optional(),
  timerEndLongitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const TenantListRelationFilterSchema: z.ZodType<Prisma.TenantListRelationFilter> = z.object({
  every: z.lazy(() => TenantWhereInputSchema).optional(),
  some: z.lazy(() => TenantWhereInputSchema).optional(),
  none: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TenantOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  preferredLanguage: z.lazy(() => SortOrderSchema).optional(),
  settings: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  currentTenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  preferredLanguage: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  currentTenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  preferredLanguage: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  imageId: z.lazy(() => SortOrderSchema).optional(),
  currentTenantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserTaskCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserTaskCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserTaskMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserTaskMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserTaskMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserTaskMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutApiKeyInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutApiKeyInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutApiKeyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutApiKeyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutApiKeyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutApiKeyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutApiKeyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutApiKeyInputSchema),z.lazy(() => UserUncheckedCreateWithoutApiKeyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutApiKeyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const TenantUpdateOneRequiredWithoutApiKeyNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutApiKeyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutApiKeyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutApiKeyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutApiKeyInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutApiKeyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutApiKeyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutApiKeyInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutApiKeyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutApiKeyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutApiKeyInputSchema),z.lazy(() => UserUncheckedCreateWithoutApiKeyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutApiKeyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutApiKeyInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutApiKeyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutApiKeyInputSchema) ]).optional(),
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const UserCreateNestedOneWithoutDailyLogInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDailyLogInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutDailyLogInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutDailyLogInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const DailyLogItemCreateNestedManyWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemCreateNestedManyWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyDailyLogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutDailyLogInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutDailyLogInputSchema),z.lazy(() => FileCreateWithoutDailyLogInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyDailyLogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryCreateNestedManyWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryCreateNestedManyWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyDailyLogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedCreateNestedManyWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateNestedManyWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyDailyLogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutDailyLogInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutDailyLogInputSchema),z.lazy(() => FileCreateWithoutDailyLogInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyDailyLogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUncheckedCreateNestedManyWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryUncheckedCreateNestedManyWithoutDailyLogInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyDailyLogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDailyLogInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutDailyLogInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutDailyLogInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDailyLogInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutDailyLogInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutDailyLogInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutDailyLogInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutDailyLogInputSchema) ]).optional(),
}).strict();

export const DailyLogItemUpdateManyWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyDailyLogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutDailyLogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutDailyLogInputSchema),z.lazy(() => FileCreateWithoutDailyLogInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyDailyLogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutDailyLogInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutDailyLogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUpdateManyWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.LocationEntryUpdateManyWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyDailyLogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LocationEntryUpdateManyWithWhereWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUpdateManyWithWhereWithoutDailyLogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedUpdateManyWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateManyWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyDailyLogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutDailyLogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutDailyLogInputSchema),z.lazy(() => FileCreateWithoutDailyLogInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => FileCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyDailyLogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutDailyLogInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutDailyLogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUncheckedUpdateManyWithoutDailyLogNestedInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateManyWithoutDailyLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutDailyLogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyDailyLogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutDailyLogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LocationEntryUpdateManyWithWhereWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUpdateManyWithWhereWithoutDailyLogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutDailyLogItemInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutDailyLogItemInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogItemInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DailyLogCreateNestedOneWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogCreateNestedOneWithoutDailyLogItemInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutDailyLogItemInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  connect: z.lazy(() => DailyLogWhereUniqueInputSchema).optional()
}).strict();

export const EquipmentCreateNestedOneWithoutDailyLogItemInputSchema: z.ZodType<Prisma.EquipmentCreateNestedOneWithoutDailyLogItemInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutDailyLogItemInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedOneWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutDailyLogItemInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutDailyLogItemInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutDailyLogItemInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogItemInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const TimeBlockCreateNestedManyWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockCreateNestedManyWithoutDailyLogItemInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyDailyLogItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyDailyLogItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const UserUpdateOneWithoutDailyLogItemNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutDailyLogItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogItemInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutDailyLogItemInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutDailyLogItemInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDailyLogItemInputSchema) ]).optional(),
}).strict();

export const DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInputSchema: z.ZodType<Prisma.DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutDailyLogItemInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  upsert: z.lazy(() => DailyLogUpsertWithoutDailyLogItemInputSchema).optional(),
  connect: z.lazy(() => DailyLogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutDailyLogItemInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutDailyLogItemInputSchema) ]).optional(),
}).strict();

export const EquipmentUpdateOneWithoutDailyLogItemNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateOneWithoutDailyLogItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutDailyLogItemInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  upsert: z.lazy(() => EquipmentUpsertWithoutDailyLogItemInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutDailyLogItemInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutDailyLogItemInputSchema) ]).optional(),
}).strict();

export const TaskUpdateOneWithoutDailyLogItemNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneWithoutDailyLogItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutDailyLogItemInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutDailyLogItemInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithoutDailyLogItemInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutDailyLogItemInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutDailyLogItemNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutDailyLogItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogItemInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutDailyLogItemInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutDailyLogItemInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutDailyLogItemInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutDailyLogItemInputSchema) ]).optional(),
}).strict();

export const TimeBlockUpdateManyWithoutDailyLogItemNestedInputSchema: z.ZodType<Prisma.TimeBlockUpdateManyWithoutDailyLogItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutDailyLogItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyDailyLogItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutDailyLogItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeBlockUpdateManyWithWhereWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUpdateManyWithWhereWithoutDailyLogItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutDailyLogItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyDailyLogItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutDailyLogItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeBlockUpdateManyWithWhereWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUpdateManyWithWhereWithoutDailyLogItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutEquipmentInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEquipmentInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_userIdToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipment_Equipment_userIdToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EquipmentPropertyValueCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutEquipment_Equipment_createdByToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutEquipment_Equipment_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipment_Equipment_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipment_Equipment_createdByToUserInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEquipmentInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutEquipmentInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutEquipmentInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEquipmentInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutEquipment_Equipment_userIdToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutEquipment_Equipment_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_userIdToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipment_Equipment_userIdToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEquipment_Equipment_userIdToUserInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipment_Equipment_userIdToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipment_Equipment_userIdToUserInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyValueUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEquipmentPropertyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipmentPropertyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutEquipmentPropertyInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEquipmentPropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const EquipmentPropertyValueCreateNestedManyWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateNestedManyWithoutEquipmentPropertyInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentPropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentPropertyInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentPropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutEquipmentPropertyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutEquipmentPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipmentPropertyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEquipmentPropertyInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipmentPropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipmentPropertyInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutEquipmentPropertyNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutEquipmentPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEquipmentPropertyInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutEquipmentPropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutEquipmentPropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEquipmentPropertyInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyValueUpdateManyWithoutEquipmentPropertyNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithoutEquipmentPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentPropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentPropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentPropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEquipmentPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EquipmentCreateNestedOneWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentCreateNestedOneWithoutEquipmentPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();

export const EquipmentPropertyCreateNestedOneWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateNestedOneWithoutEquipmentPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentPropertyCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  connect: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutEquipmentPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutEquipmentPropertyValueNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutEquipmentPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEquipmentPropertyValueInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
}).strict();

export const EquipmentUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateOneRequiredWithoutEquipmentPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => EquipmentUpsertWithoutEquipmentPropertyValueInputSchema).optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateOneRequiredWithoutEquipmentPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentPropertyCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => EquipmentPropertyUpsertWithoutEquipmentPropertyValueInputSchema).optional(),
  connect: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutEquipmentPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEquipmentPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutEquipmentPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutFeedbackInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFeedbackInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeedbackInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeedbackInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeedbackInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutFeedbackInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutFeedbackInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFeedbackInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFeedbackInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFeedbackInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutFeedbackNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFeedbackNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeedbackInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeedbackInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeedbackInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFeedbackInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutFeedbackInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeedbackInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutFeedbackNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutFeedbackNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFeedbackInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFeedbackInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFeedbackInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutFeedbackInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutFeedbackInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFeedbackInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutFileInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFileInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFileInputSchema),z.lazy(() => UserUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFileInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DailyLogCreateNestedOneWithoutFileInputSchema: z.ZodType<Prisma.DailyLogCreateNestedOneWithoutFileInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutFileInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogCreateOrConnectWithoutFileInputSchema).optional(),
  connect: z.lazy(() => DailyLogWhereUniqueInputSchema).optional()
}).strict();

export const ImageCreateNestedOneWithoutFileInputSchema: z.ZodType<Prisma.ImageCreateNestedOneWithoutFileInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutFileInputSchema),z.lazy(() => ImageUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ImageCreateOrConnectWithoutFileInputSchema).optional(),
  connect: z.lazy(() => ImageWhereUniqueInputSchema).optional()
}).strict();

export const ProjectCreateNestedOneWithoutFileInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutFileInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutFileInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutFileInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutFileInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutFileInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFileInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const FilePropertyValueCreateNestedManyWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueCreateNestedManyWithoutFileInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedCreateNestedManyWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateNestedManyWithoutFileInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneWithoutFileNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFileNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFileInputSchema),z.lazy(() => UserUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFileInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFileInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutFileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFileInputSchema) ]).optional(),
}).strict();

export const DailyLogUpdateOneWithoutFileNestedInputSchema: z.ZodType<Prisma.DailyLogUpdateOneWithoutFileNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutFileInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogCreateOrConnectWithoutFileInputSchema).optional(),
  upsert: z.lazy(() => DailyLogUpsertWithoutFileInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => DailyLogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutFileInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutFileInputSchema) ]).optional(),
}).strict();

export const ImageUpdateOneRequiredWithoutFileNestedInputSchema: z.ZodType<Prisma.ImageUpdateOneRequiredWithoutFileNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutFileInputSchema),z.lazy(() => ImageUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ImageCreateOrConnectWithoutFileInputSchema).optional(),
  upsert: z.lazy(() => ImageUpsertWithoutFileInputSchema).optional(),
  connect: z.lazy(() => ImageWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ImageUpdateWithoutFileInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutFileInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateOneWithoutFileNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneWithoutFileNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutFileInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutFileInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutFileInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutFileInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutFileInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutFileNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutFileNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFileInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutFileInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutFileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFileInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueUpdateManyWithoutFileNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithoutFileNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFileInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFileInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFileInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedUpdateManyWithoutFileNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateManyWithoutFileNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFileInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFileInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFileInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutFilePropertyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFilePropertyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFilePropertyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutFilePropertyInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutFilePropertyInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFilePropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const FilePropertyValueCreateNestedManyWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueCreateNestedManyWithoutFilePropertyInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFilePropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedCreateNestedManyWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateNestedManyWithoutFilePropertyInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFilePropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutFilePropertyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFilePropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFilePropertyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFilePropertyInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutFilePropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFilePropertyInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutFilePropertyNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutFilePropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFilePropertyInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutFilePropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutFilePropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFilePropertyInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueUpdateManyWithoutFilePropertyNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithoutFilePropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFilePropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFilePropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFilePropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFilePropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedUpdateManyWithoutFilePropertyNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateManyWithoutFilePropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutFilePropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyFilePropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutFilePropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutFilePropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFilePropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const FileCreateNestedOneWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FileCreateNestedOneWithoutFilePropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FileUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FileCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  connect: z.lazy(() => FileWhereUniqueInputSchema).optional()
}).strict();

export const FilePropertyCreateNestedOneWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyCreateNestedOneWithoutFilePropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FilePropertyCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  connect: z.lazy(() => FilePropertyWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutFilePropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutFilePropertyValueNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFilePropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFilePropertyValueInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFilePropertyValueInputSchema) ]).optional(),
}).strict();

export const FileUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema: z.ZodType<Prisma.FileUpdateOneRequiredWithoutFilePropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FileUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FileCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  upsert: z.lazy(() => FileUpsertWithoutFilePropertyValueInputSchema).optional(),
  connect: z.lazy(() => FileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => FileUncheckedUpdateWithoutFilePropertyValueInputSchema) ]).optional(),
}).strict();

export const FilePropertyUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema: z.ZodType<Prisma.FilePropertyUpdateOneRequiredWithoutFilePropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FilePropertyCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  upsert: z.lazy(() => FilePropertyUpsertWithoutFilePropertyValueInputSchema).optional(),
  connect: z.lazy(() => FilePropertyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FilePropertyUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => FilePropertyUncheckedUpdateWithoutFilePropertyValueInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutFilePropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFilePropertyValueInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutFilePropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFilePropertyValueInputSchema) ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutImageInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutImageInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutImageInputSchema),z.lazy(() => FileCreateWithoutImageInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutImageInputSchema),z.lazy(() => FileCreateOrConnectWithoutImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyImageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutImage_Image_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImage_Image_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_Image_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutImage_Image_createdByToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutImageInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutImageInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutImageInputSchema),z.lazy(() => TenantUncheckedCreateWithoutImageInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutImageInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutImage_User_imageIdToImageInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyImage_User_imageIdToImageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutImageInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutImageInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutImageInputSchema),z.lazy(() => FileCreateWithoutImageInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutImageInputSchema),z.lazy(() => FileCreateOrConnectWithoutImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyImageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutImage_User_imageIdToImageInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyImage_User_imageIdToImageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutImageNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutImageNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutImageInputSchema),z.lazy(() => FileCreateWithoutImageInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutImageInputSchema),z.lazy(() => FileCreateOrConnectWithoutImageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutImageInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyImageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutImageInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutImageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutImageInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutImageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutImage_Image_createdByToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutImage_Image_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImage_Image_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_Image_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutImage_Image_createdByToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutImage_Image_createdByToUserInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutImage_Image_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutImage_Image_createdByToUserInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutImageNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutImageNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutImageInputSchema),z.lazy(() => TenantUncheckedCreateWithoutImageInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutImageInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutImageInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutImageInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutImageInputSchema) ]).optional(),
}).strict();

export const UserUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutImage_User_imageIdToImageNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyImage_User_imageIdToImageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutImageNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutImageNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutImageInputSchema),z.lazy(() => FileCreateWithoutImageInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutImageInputSchema),z.lazy(() => FileCreateOrConnectWithoutImageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutImageInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyImageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutImageInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutImageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutImageInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutImageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutImage_User_imageIdToImageNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyImage_User_imageIdToImageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutImage_User_imageIdToImageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutLocationEntryInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutLocationEntryInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLocationEntryInputSchema),z.lazy(() => UserUncheckedCreateWithoutLocationEntryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLocationEntryInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DailyLogCreateNestedOneWithoutLocationEntryInputSchema: z.ZodType<Prisma.DailyLogCreateNestedOneWithoutLocationEntryInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutLocationEntryInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutLocationEntryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogCreateOrConnectWithoutLocationEntryInputSchema).optional(),
  connect: z.lazy(() => DailyLogWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutLocationEntryInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutLocationEntryInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutLocationEntryInputSchema),z.lazy(() => TenantUncheckedCreateWithoutLocationEntryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutLocationEntryInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutLocationEntryNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutLocationEntryNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLocationEntryInputSchema),z.lazy(() => UserUncheckedCreateWithoutLocationEntryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLocationEntryInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutLocationEntryInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutLocationEntryInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLocationEntryInputSchema) ]).optional(),
}).strict();

export const DailyLogUpdateOneRequiredWithoutLocationEntryNestedInputSchema: z.ZodType<Prisma.DailyLogUpdateOneRequiredWithoutLocationEntryNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutLocationEntryInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutLocationEntryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogCreateOrConnectWithoutLocationEntryInputSchema).optional(),
  upsert: z.lazy(() => DailyLogUpsertWithoutLocationEntryInputSchema).optional(),
  connect: z.lazy(() => DailyLogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutLocationEntryInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutLocationEntryInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutLocationEntryNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutLocationEntryNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutLocationEntryInputSchema),z.lazy(() => TenantUncheckedCreateWithoutLocationEntryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutLocationEntryInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutLocationEntryInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutLocationEntryInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutLocationEntryInputSchema) ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutProjectInputSchema),z.lazy(() => FileCreateWithoutProjectInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutProjectInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProjectInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProjectInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutProjectInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProjectInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const ProjectPropertyValueCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutProjectInputSchema),z.lazy(() => FileCreateWithoutProjectInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutProjectInputSchema),z.lazy(() => FileCreateWithoutProjectInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutProjectNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProjectInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProjectInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutProjectInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutProjectInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProjectInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutProjectNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProjectInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProjectInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutProjectInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProjectInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyValueUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutProjectInputSchema),z.lazy(() => FileCreateWithoutProjectInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FileCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutProjectPropertyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutProjectPropertyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProjectPropertyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutProjectPropertyInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutProjectPropertyInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProjectPropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const ProjectPropertyValueCreateNestedManyWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateNestedManyWithoutProjectPropertyInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectPropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectPropertyInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectPropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutProjectPropertyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutProjectPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProjectPropertyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutProjectPropertyInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutProjectPropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProjectPropertyInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutProjectPropertyNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutProjectPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProjectPropertyInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProjectPropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutProjectPropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProjectPropertyInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyValueUpdateManyWithoutProjectPropertyNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithoutProjectPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectPropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectPropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectPropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyProjectPropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectPropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutProjectPropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutProjectPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProjectCreateNestedOneWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutProjectPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const ProjectPropertyCreateNestedOneWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyCreateNestedOneWithoutProjectPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectPropertyCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  connect: z.lazy(() => ProjectPropertyWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutProjectPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutProjectPropertyValueNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutProjectPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutProjectPropertyValueInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutProjectPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutProjectPropertyValueInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateOneRequiredWithoutProjectPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectPropertyCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => ProjectPropertyUpsertWithoutProjectPropertyValueInputSchema).optional(),
  connect: z.lazy(() => ProjectPropertyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutProjectPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProjectPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProjectPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]).optional(),
}).strict();

export const DailyLogItemCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTaskInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedOneWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutOther_TaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutOther_TaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOther_TaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutOther_TaskInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskInputSchema),z.lazy(() => TaskCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutTaskInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTaskInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutTaskInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const TaskStatusCreateNestedOneWithoutTaskInputSchema: z.ZodType<Prisma.TaskStatusCreateNestedOneWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTaskInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskStatusCreateOrConnectWithoutTaskInputSchema).optional(),
  connect: z.lazy(() => TaskStatusWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutTaskInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const TaskPropertyValueCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserTaskCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTaskInputSchema),z.lazy(() => UserTaskCreateWithoutTaskInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskInputSchema),z.lazy(() => TaskCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTaskInputSchema),z.lazy(() => UserTaskCreateWithoutTaskInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutTaskNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTaskInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskInputSchema) ]).optional(),
}).strict();

export const TaskUpdateOneWithoutOther_TaskNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneWithoutOther_TaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutOther_TaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOther_TaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutOther_TaskInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutOther_TaskInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithoutOther_TaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutOther_TaskInputSchema) ]).optional(),
}).strict();

export const TaskUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskInputSchema),z.lazy(() => TaskCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateOneRequiredWithoutTaskNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTaskInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutTaskInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutTaskInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutTaskInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTaskInputSchema) ]).optional(),
}).strict();

export const TaskStatusUpdateOneWithoutTaskNestedInputSchema: z.ZodType<Prisma.TaskStatusUpdateOneWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTaskInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskStatusCreateOrConnectWithoutTaskInputSchema).optional(),
  upsert: z.lazy(() => TaskStatusUpsertWithoutTaskInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => TaskStatusWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskStatusUpdateWithoutTaskInputSchema),z.lazy(() => TaskStatusUncheckedUpdateWithoutTaskInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutTaskNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutTaskInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskInputSchema) ]).optional(),
}).strict();

export const TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTaskInputSchema),z.lazy(() => UserTaskCreateWithoutTaskInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskInputSchema),z.lazy(() => TaskCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTaskInputSchema),z.lazy(() => UserTaskCreateWithoutTaskInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTaskPropertyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTaskPropertyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskPropertyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutTaskPropertyInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskPropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const TaskPropertyValueCreateNestedManyWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateNestedManyWithoutTaskPropertyInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskPropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedCreateNestedManyWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateNestedManyWithoutTaskPropertyInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskPropertyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutTaskPropertyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTaskPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskPropertyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTaskPropertyInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskPropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskPropertyInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutTaskPropertyNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutTaskPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskPropertyInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutTaskPropertyInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskPropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskPropertyInputSchema) ]).optional(),
}).strict();

export const TaskPropertyValueUpdateManyWithoutTaskPropertyNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithoutTaskPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskPropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskPropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskPropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTaskPropertyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTaskPropertyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTaskPropertyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTaskPropertyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTaskPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedOneWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutTaskPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const TaskPropertyCreateNestedOneWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyCreateNestedOneWithoutTaskPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskPropertyCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TaskPropertyWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutTaskPropertyValueInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutTaskPropertyValueNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTaskPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTaskPropertyValueInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]).optional(),
}).strict();

export const TaskUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneRequiredWithoutTaskPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutTaskPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]).optional(),
}).strict();

export const TaskPropertyUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema: z.ZodType<Prisma.TaskPropertyUpdateOneRequiredWithoutTaskPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskPropertyCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => TaskPropertyUpsertWithoutTaskPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TaskPropertyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutTaskPropertyValueNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyValueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskPropertyValueInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutTaskPropertyValueInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutTaskStatusInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateWithoutTaskStatusInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskStatusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTaskStatusInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTaskStatusInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskStatusInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskStatusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskStatusInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutTaskStatusInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutTaskStatusInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskStatusInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskStatusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskStatusInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const TaskUncheckedCreateNestedManyWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutTaskStatusInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateWithoutTaskStatusInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskStatusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutTaskStatusNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutTaskStatusNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateWithoutTaskStatusInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskStatusInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskStatusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskStatusInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskStatusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutTaskStatusInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutTaskStatusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutTaskStatusNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTaskStatusNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskStatusInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskStatusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskStatusInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTaskStatusInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskStatusInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskStatusInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutTaskStatusNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutTaskStatusNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskStatusInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskStatusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTaskStatusInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutTaskStatusInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskStatusInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskStatusInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutTaskStatusNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutTaskStatusNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateWithoutTaskStatusInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTaskStatusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskStatusInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutTaskStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTaskStatusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskStatusInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutTaskStatusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutTaskStatusInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutTaskStatusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateWithoutTenantInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutTenantInputSchema),z.lazy(() => DailyLogCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutTenantInputSchema),z.lazy(() => EquipmentCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeedbackCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutTenantInputSchema),z.lazy(() => FeedbackCreateWithoutTenantInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImageCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ImageCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutTenantInputSchema),z.lazy(() => ImageCreateWithoutTenantInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateWithoutTenantInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProjectCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTenantInputSchema),z.lazy(() => ProjectCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTenantInputSchema),z.lazy(() => TaskCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_Tenant_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_Tenant_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantUserCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutTenantInputSchema),z.lazy(() => TenantUserCreateWithoutTenantInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateWithoutTenantInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenant_User_currentTenantIdToTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserTaskCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTenantInputSchema),z.lazy(() => UserTaskCreateWithoutTenantInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateWithoutTenantInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutTenantInputSchema),z.lazy(() => DailyLogCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutTenantInputSchema),z.lazy(() => EquipmentCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutTenantInputSchema),z.lazy(() => FeedbackCreateWithoutTenantInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImageUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ImageUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutTenantInputSchema),z.lazy(() => ImageCreateWithoutTenantInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateWithoutTenantInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTenantInputSchema),z.lazy(() => ProjectCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTenantInputSchema),z.lazy(() => TaskCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutTenantInputSchema),z.lazy(() => TenantUserCreateWithoutTenantInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateWithoutTenantInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenant_User_currentTenantIdToTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTenantInputSchema),z.lazy(() => UserTaskCreateWithoutTenantInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateWithoutTenantInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ApiKeyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ApiKeyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.DailyLogUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutTenantInputSchema),z.lazy(() => DailyLogCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => DailyLogUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogScalarWhereInputSchema),z.lazy(() => DailyLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutTenantInputSchema),z.lazy(() => EquipmentCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyScalarWhereInputSchema),z.lazy(() => EquipmentPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeedbackUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FeedbackUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutTenantInputSchema),z.lazy(() => FeedbackCreateWithoutTenantInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeedbackUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FeedbackUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeedbackScalarWhereInputSchema),z.lazy(() => FeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FilePropertyUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FilePropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyScalarWhereInputSchema),z.lazy(() => FilePropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImageUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ImageUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutTenantInputSchema),z.lazy(() => ImageCreateWithoutTenantInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImageUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ImageUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImageUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ImageUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImageUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ImageUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImageScalarWhereInputSchema),z.lazy(() => ImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.LocationEntryUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateWithoutTenantInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LocationEntryUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => LocationEntryUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTenantInputSchema),z.lazy(() => ProjectCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyScalarWhereInputSchema),z.lazy(() => ProjectPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTenantInputSchema),z.lazy(() => TaskCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskPropertyUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyScalarWhereInputSchema),z.lazy(() => TaskPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskStatusUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskStatusUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskStatusUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskStatusScalarWhereInputSchema),z.lazy(() => TaskStatusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_Tenant_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_Tenant_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTenant_Tenant_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenant_Tenant_createdByToUserInputSchema) ]).optional(),
}).strict();

export const TenantUserUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TenantUserUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutTenantInputSchema),z.lazy(() => TenantUserCreateWithoutTenantInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUserUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TenantUserUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TimeBlockUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateWithoutTenantInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeBlockUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TimeBlockUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenant_User_currentTenantIdToTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTenantInputSchema),z.lazy(() => UserTaskCreateWithoutTenantInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateWithoutTenantInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ApiKeyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ApiKeyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutTenantInputSchema),z.lazy(() => DailyLogCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => DailyLogUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogScalarWhereInputSchema),z.lazy(() => DailyLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutTenantInputSchema),z.lazy(() => EquipmentCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyScalarWhereInputSchema),z.lazy(() => EquipmentPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FeedbackUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutTenantInputSchema),z.lazy(() => FeedbackCreateWithoutTenantInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeedbackUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FeedbackUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeedbackScalarWhereInputSchema),z.lazy(() => FeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FilePropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyScalarWhereInputSchema),z.lazy(() => FilePropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImageUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutTenantInputSchema),z.lazy(() => ImageCreateWithoutTenantInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ImageCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImageUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ImageUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImageUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ImageUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImageUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ImageUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImageScalarWhereInputSchema),z.lazy(() => ImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateWithoutTenantInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LocationEntryUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => LocationEntryUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTenantInputSchema),z.lazy(() => ProjectCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyScalarWhereInputSchema),z.lazy(() => ProjectPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTenantInputSchema),z.lazy(() => TaskCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyScalarWhereInputSchema),z.lazy(() => TaskPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateWithoutTenantInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskStatusUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TaskStatusUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskStatusScalarWhereInputSchema),z.lazy(() => TaskStatusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutTenantInputSchema),z.lazy(() => TenantUserCreateWithoutTenantInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUserUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TenantUserUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateWithoutTenantInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeBlockUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => TimeBlockUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenant_User_currentTenantIdToTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutTenant_User_currentTenantIdToTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTenantInputSchema),z.lazy(() => UserTaskCreateWithoutTenantInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTenantUser_TenantUser_createdByToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutTenantUserInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTenantUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTenantUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTenantUserInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTenantUser_TenantUser_userIdToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutTenantUser_TenantUser_createdByToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTenantUser_TenantUser_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTenantUser_TenantUser_createdByToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTenantUser_TenantUser_createdByToUserInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTenantUser_TenantUser_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantUser_TenantUser_createdByToUserInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutTenantUserNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutTenantUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTenantUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTenantUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTenantUserInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutTenantUserInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutTenantUserInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTenantUserInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutTenantUser_TenantUser_userIdToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTenantUser_TenantUser_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTenantUser_TenantUser_userIdToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTenantUser_TenantUser_userIdToUserInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTenantUser_TenantUser_userIdToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantUser_TenantUser_userIdToUserInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTimeBlockInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTimeBlockInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTimeBlockInputSchema),z.lazy(() => UserUncheckedCreateWithoutTimeBlockInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTimeBlockInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DailyLogItemCreateNestedOneWithoutTimeBlockInputSchema: z.ZodType<Prisma.DailyLogItemCreateNestedOneWithoutTimeBlockInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTimeBlockInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTimeBlockInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogItemCreateOrConnectWithoutTimeBlockInputSchema).optional(),
  connect: z.lazy(() => DailyLogItemWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutTimeBlockInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutTimeBlockInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTimeBlockInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTimeBlockInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTimeBlockInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneRequiredWithoutTimeBlockNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTimeBlockNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTimeBlockInputSchema),z.lazy(() => UserUncheckedCreateWithoutTimeBlockInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTimeBlockInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTimeBlockInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutTimeBlockInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTimeBlockInputSchema) ]).optional(),
}).strict();

export const DailyLogItemUpdateOneRequiredWithoutTimeBlockNestedInputSchema: z.ZodType<Prisma.DailyLogItemUpdateOneRequiredWithoutTimeBlockNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTimeBlockInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTimeBlockInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DailyLogItemCreateOrConnectWithoutTimeBlockInputSchema).optional(),
  upsert: z.lazy(() => DailyLogItemUpsertWithoutTimeBlockInputSchema).optional(),
  connect: z.lazy(() => DailyLogItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithoutTimeBlockInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutTimeBlockInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutTimeBlockNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutTimeBlockNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutTimeBlockInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTimeBlockInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutTimeBlockInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutTimeBlockInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutTimeBlockInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTimeBlockInputSchema) ]).optional(),
}).strict();

export const ApiKeyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutUserInputSchema),z.lazy(() => ApiKeyCreateWithoutUserInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DailyLogCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutUserInputSchema),z.lazy(() => DailyLogCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_userIdToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeedbackCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FeedbackCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutUserInputSchema),z.lazy(() => FeedbackCreateWithoutUserInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutUserInputSchema),z.lazy(() => FilePropertyCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageCreateNestedManyWithoutUser_Image_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyUser_Image_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutUserInputSchema),z.lazy(() => LocationEntryCreateWithoutUserInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ProjectCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutUserInputSchema),z.lazy(() => ProjectCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutUserInputSchema),z.lazy(() => TaskStatusCreateWithoutUserInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema).array(),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantCreateManyUser_Tenant_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_userIdToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutUserInputSchema),z.lazy(() => TimeBlockCreateWithoutUserInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_User_currentTenantIdToTenantInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_User_currentTenantIdToTenantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUser_User_currentTenantIdToTenantInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.ImageCreateNestedOneWithoutUser_User_imageIdToImageInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_User_imageIdToImageInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_User_imageIdToImageInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ImageCreateOrConnectWithoutUser_User_imageIdToImageInputSchema).optional(),
  connect: z.lazy(() => ImageWhereUniqueInputSchema).optional()
}).strict();

export const UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_userIdToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutUserInputSchema),z.lazy(() => ApiKeyCreateWithoutUserInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutUserInputSchema),z.lazy(() => DailyLogCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_userIdToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeedbackUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FeedbackUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutUserInputSchema),z.lazy(() => FeedbackCreateWithoutUserInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutUserInputSchema),z.lazy(() => FilePropertyCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyUser_Image_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutUserInputSchema),z.lazy(() => LocationEntryCreateWithoutUserInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutUserInputSchema),z.lazy(() => ProjectCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutUserInputSchema),z.lazy(() => TaskStatusCreateWithoutUserInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema).array(),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantCreateManyUser_Tenant_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_userIdToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutUserInputSchema),z.lazy(() => TimeBlockCreateWithoutUserInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_createdByToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_userIdToUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutUserInputSchema),z.lazy(() => ApiKeyCreateWithoutUserInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ApiKeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ApiKeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DailyLogUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutUserInputSchema),z.lazy(() => DailyLogCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DailyLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogScalarWhereInputSchema),z.lazy(() => DailyLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_userIdToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyScalarWhereInputSchema),z.lazy(() => EquipmentPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeedbackUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FeedbackUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutUserInputSchema),z.lazy(() => FeedbackCreateWithoutUserInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeedbackUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FeedbackUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeedbackScalarWhereInputSchema),z.lazy(() => FeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FilePropertyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutUserInputSchema),z.lazy(() => FilePropertyCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FilePropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyScalarWhereInputSchema),z.lazy(() => FilePropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema: z.ZodType<Prisma.ImageUpdateManyWithoutUser_Image_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImageUpsertWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUpsertWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyUser_Image_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImageUpdateWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUpdateWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImageUpdateManyWithWhereWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUpdateManyWithWhereWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImageScalarWhereInputSchema),z.lazy(() => ImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.LocationEntryUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutUserInputSchema),z.lazy(() => LocationEntryCreateWithoutUserInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LocationEntryUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => LocationEntryUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutUserInputSchema),z.lazy(() => ProjectCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyScalarWhereInputSchema),z.lazy(() => ProjectPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskPropertyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyScalarWhereInputSchema),z.lazy(() => TaskPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskStatusUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutUserInputSchema),z.lazy(() => TaskStatusCreateWithoutUserInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskStatusUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskStatusUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskStatusScalarWhereInputSchema),z.lazy(() => TaskStatusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema: z.ZodType<Prisma.TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema).array(),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUpsertWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUpsertWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantCreateManyUser_Tenant_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUpdateWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUpdateManyWithWhereWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUpdateManyWithWhereWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantScalarWhereInputSchema),z.lazy(() => TenantScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema: z.ZodType<Prisma.TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema: z.ZodType<Prisma.TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_userIdToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TimeBlockUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutUserInputSchema),z.lazy(() => TimeBlockCreateWithoutUserInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeBlockUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TimeBlockUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_User_currentTenantIdToTenantInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_User_currentTenantIdToTenantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUser_User_currentTenantIdToTenantInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutUser_User_currentTenantIdToTenantInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutUser_User_currentTenantIdToTenantInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUser_User_currentTenantIdToTenantInputSchema) ]).optional(),
}).strict();

export const ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema: z.ZodType<Prisma.ImageUpdateOneWithoutUser_User_imageIdToImageNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_User_imageIdToImageInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_User_imageIdToImageInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ImageCreateOrConnectWithoutUser_User_imageIdToImageInputSchema).optional(),
  upsert: z.lazy(() => ImageUpsertWithoutUser_User_imageIdToImageInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ImageWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ImageUpdateWithoutUser_User_imageIdToImageInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutUser_User_imageIdToImageInputSchema) ]).optional(),
}).strict();

export const UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_userIdToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutUserInputSchema),z.lazy(() => ApiKeyCreateWithoutUserInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ApiKeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ApiKeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogCreateWithoutUserInputSchema),z.lazy(() => DailyLogCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogWhereUniqueInputSchema),z.lazy(() => DailyLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DailyLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogScalarWhereInputSchema),z.lazy(() => DailyLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateWithoutUserInputSchema).array(),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema),z.lazy(() => DailyLogItemCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogItemUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DailyLogItemCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DailyLogItemWhereUniqueInputSchema),z.lazy(() => DailyLogItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DailyLogItemUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DailyLogItemUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyUser_Equipment_userIdToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutUser_Equipment_userIdToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyScalarWhereInputSchema),z.lazy(() => EquipmentPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FeedbackUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeedbackCreateWithoutUserInputSchema),z.lazy(() => FeedbackCreateWithoutUserInputSchema).array(),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema),z.lazy(() => FeedbackCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FeedbackUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeedbackCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeedbackWhereUniqueInputSchema),z.lazy(() => FeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FeedbackUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeedbackUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FeedbackUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeedbackScalarWhereInputSchema),z.lazy(() => FeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutUserInputSchema),z.lazy(() => FilePropertyCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyWhereUniqueInputSchema),z.lazy(() => FilePropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FilePropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyScalarWhereInputSchema),z.lazy(() => FilePropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => FilePropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FilePropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FilePropertyValueWhereUniqueInputSchema),z.lazy(() => FilePropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FilePropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FilePropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema).array(),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImageUpsertWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUpsertWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImageCreateManyUser_Image_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImageWhereUniqueInputSchema),z.lazy(() => ImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImageUpdateWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUpdateWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImageUpdateManyWithWhereWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUpdateManyWithWhereWithoutUser_Image_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImageScalarWhereInputSchema),z.lazy(() => ImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutUserInputSchema),z.lazy(() => LocationEntryCreateWithoutUserInputSchema).array(),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema),z.lazy(() => LocationEntryCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LocationEntryUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LocationEntryCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LocationEntryWhereUniqueInputSchema),z.lazy(() => LocationEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LocationEntryUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LocationEntryUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => LocationEntryUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutUserInputSchema),z.lazy(() => ProjectCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyWhereUniqueInputSchema),z.lazy(() => ProjectPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ProjectPropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyScalarWhereInputSchema),z.lazy(() => ProjectPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyWhereUniqueInputSchema),z.lazy(() => TaskPropertyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskPropertyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyScalarWhereInputSchema),z.lazy(() => TaskPropertyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema).array(),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskPropertyValueCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskPropertyValueCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),z.lazy(() => TaskPropertyValueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutUserInputSchema),z.lazy(() => TaskStatusCreateWithoutUserInputSchema).array(),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskStatusCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskStatusUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskStatusCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskStatusWhereUniqueInputSchema),z.lazy(() => TaskStatusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskStatusUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskStatusUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskStatusUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskStatusScalarWhereInputSchema),z.lazy(() => TaskStatusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema).array(),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUpsertWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUpsertWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantCreateManyUser_Tenant_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantWhereUniqueInputSchema),z.lazy(() => TenantWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUpdateWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUpdateManyWithWhereWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUpdateManyWithWhereWithoutUser_Tenant_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantScalarWhereInputSchema),z.lazy(() => TenantScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema).array(),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantUserCreateManyUser_TenantUser_userIdToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantUserWhereUniqueInputSchema),z.lazy(() => TenantUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUpdateManyWithWhereWithoutUser_TenantUser_userIdToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutUserInputSchema),z.lazy(() => TimeBlockCreateWithoutUserInputSchema).array(),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema),z.lazy(() => TimeBlockCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TimeBlockUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeBlockCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeBlockWhereUniqueInputSchema),z.lazy(() => TimeBlockWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TimeBlockUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeBlockUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TimeBlockUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_createdByToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_createdByToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema).array(),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserTaskCreateManyUser_UserTask_userIdToUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserTaskWhereUniqueInputSchema),z.lazy(() => UserTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUpdateManyWithWhereWithoutUser_UserTask_userIdToUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserTask_UserTask_createdByToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedOneWithoutUserTaskInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutUserTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutUserTaskInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutUserTaskInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutUserTaskInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUserTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUserTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUserTaskInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_userIdToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserTask_UserTask_userIdToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutUserTask_UserTask_createdByToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutUserTask_UserTask_createdByToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_createdByToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserTask_UserTask_createdByToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserTask_UserTask_createdByToUserInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutUserTask_UserTask_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserTask_UserTask_createdByToUserInputSchema) ]).optional(),
}).strict();

export const TaskUpdateOneRequiredWithoutUserTaskNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneRequiredWithoutUserTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutUserTaskInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutUserTaskInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithoutUserTaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutUserTaskInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutUserTaskNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutUserTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUserTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUserTaskInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUserTaskInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutUserTaskInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateWithoutUserTaskInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUserTaskInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUserTask_UserTask_userIdToUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserTask_UserTask_userIdToUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_userIdToUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserTask_UserTask_userIdToUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserTask_UserTask_userIdToUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithoutUserTask_UserTask_userIdToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserTask_UserTask_userIdToUserInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const TenantCreateWithoutApiKeyInputSchema: z.ZodType<Prisma.TenantCreateWithoutApiKeyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutApiKeyInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutApiKeyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutApiKeyInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutApiKeyInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutApiKeyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutApiKeyInputSchema) ]),
}).strict();

export const UserCreateWithoutApiKeyInputSchema: z.ZodType<Prisma.UserCreateWithoutApiKeyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutApiKeyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutApiKeyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutApiKeyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutApiKeyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutApiKeyInputSchema),z.lazy(() => UserUncheckedCreateWithoutApiKeyInputSchema) ]),
}).strict();

export const TenantUpsertWithoutApiKeyInputSchema: z.ZodType<Prisma.TenantUpsertWithoutApiKeyInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutApiKeyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutApiKeyInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutApiKeyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutApiKeyInputSchema) ]),
}).strict();

export const TenantUpdateWithoutApiKeyInputSchema: z.ZodType<Prisma.TenantUpdateWithoutApiKeyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutApiKeyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutApiKeyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutApiKeyInputSchema: z.ZodType<Prisma.UserUpsertWithoutApiKeyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutApiKeyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutApiKeyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutApiKeyInputSchema),z.lazy(() => UserUncheckedCreateWithoutApiKeyInputSchema) ]),
}).strict();

export const UserUpdateWithoutApiKeyInputSchema: z.ZodType<Prisma.UserUpdateWithoutApiKeyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutApiKeyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutApiKeyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.UserCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutDailyLogInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutDailyLogInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const TenantCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.TenantCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutDailyLogInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutDailyLogInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const DailyLogItemCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogItemInputSchema),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemCreateOrConnectWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemCreateOrConnectWithoutDailyLogInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const DailyLogItemCreateManyDailyLogInputEnvelopeSchema: z.ZodType<Prisma.DailyLogItemCreateManyDailyLogInputEnvelope> = z.object({
  data: z.lazy(() => DailyLogItemCreateManyDailyLogInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.FileCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFileInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedOneWithoutFileInputSchema),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutFileInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFileInputSchema),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileCreateOrConnectWithoutDailyLogInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutDailyLogInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const FileCreateManyDailyLogInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyDailyLogInputEnvelope> = z.object({
  data: z.lazy(() => FileCreateManyDailyLogInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LocationEntryCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutLocationEntryInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutLocationEntryInputSchema)
}).strict();

export const LocationEntryUncheckedCreateWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryUncheckedCreateWithoutDailyLogInput> = z.object({
  id: z.string(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const LocationEntryCreateOrConnectWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryCreateOrConnectWithoutDailyLogInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const LocationEntryCreateManyDailyLogInputEnvelopeSchema: z.ZodType<Prisma.LocationEntryCreateManyDailyLogInputEnvelope> = z.object({
  data: z.lazy(() => LocationEntryCreateManyDailyLogInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutDailyLogInputSchema: z.ZodType<Prisma.UserUpsertWithoutDailyLogInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutDailyLogInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDailyLogInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const UserUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.UserUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutDailyLogInputSchema: z.ZodType<Prisma.TenantUpsertWithoutDailyLogInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutDailyLogInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutDailyLogInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const TenantUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.TenantUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const DailyLogItemUpsertWithWhereUniqueWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemUpsertWithWhereUniqueWithoutDailyLogInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutDailyLogInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const DailyLogItemUpdateWithWhereUniqueWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithWhereUniqueWithoutDailyLogInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateWithoutDailyLogInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutDailyLogInputSchema) ]),
}).strict();

export const DailyLogItemUpdateManyWithWhereWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithWhereWithoutDailyLogInput> = z.object({
  where: z.lazy(() => DailyLogItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateManyMutationInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogItemInputSchema) ]),
}).strict();

export const DailyLogItemScalarWhereInputSchema: z.ZodType<Prisma.DailyLogItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyLogItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyLogItemScalarWhereInputSchema),z.lazy(() => DailyLogItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isNoteVisible: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  itemType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  equipmentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const FileUpsertWithWhereUniqueWithoutDailyLogInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutDailyLogInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedUpdateWithoutDailyLogInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutDailyLogInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutDailyLogInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutDailyLogInputSchema),z.lazy(() => FileUncheckedUpdateWithoutDailyLogInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutDailyLogInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutDailyLogInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutFileInputSchema) ]),
}).strict();

export const FileScalarWhereInputSchema: z.ZodType<Prisma.FileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLabel: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  locationLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  imageId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const LocationEntryUpsertWithWhereUniqueWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryUpsertWithWhereUniqueWithoutDailyLogInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedUpdateWithoutDailyLogInputSchema) ]),
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutDailyLogInputSchema) ]),
}).strict();

export const LocationEntryUpdateWithWhereUniqueWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryUpdateWithWhereUniqueWithoutDailyLogInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LocationEntryUpdateWithoutDailyLogInputSchema),z.lazy(() => LocationEntryUncheckedUpdateWithoutDailyLogInputSchema) ]),
}).strict();

export const LocationEntryUpdateManyWithWhereWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryUpdateManyWithWhereWithoutDailyLogInput> = z.object({
  where: z.lazy(() => LocationEntryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LocationEntryUpdateManyMutationInputSchema),z.lazy(() => LocationEntryUncheckedUpdateManyWithoutLocationEntryInputSchema) ]),
}).strict();

export const LocationEntryScalarWhereInputSchema: z.ZodType<Prisma.LocationEntryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LocationEntryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LocationEntryScalarWhereInputSchema),z.lazy(() => LocationEntryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dailyLogId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.UserCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutDailyLogItemInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogItemInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const DailyLogCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogInputSchema),
  File: z.lazy(() => FileCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogUncheckedCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogCreateOrConnectWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogCreateOrConnectWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutDailyLogItemInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const EquipmentCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_Equipment_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentInputSchema),
  User_Equipment_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_userIdToUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  userId: z.string().optional().nullable(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutDailyLogItemInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutDailyLogItemInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TaskCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TaskCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutDailyLogItemInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TenantCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TenantCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogItemInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TimeBlockCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  duration: z.number().optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().optional().nullable(),
  timerStartLongitude: z.number().optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().optional().nullable(),
  timerEndLongitude: z.number().optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTimeBlockInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTimeBlockInputSchema)
}).strict();

export const TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockUncheckedCreateWithoutDailyLogItemInput> = z.object({
  id: z.string(),
  duration: z.number().optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().optional().nullable(),
  timerStartLongitude: z.number().optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().optional().nullable(),
  timerEndLongitude: z.number().optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string(),
  tenantId: z.string()
}).strict();

export const TimeBlockCreateOrConnectWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockCreateOrConnectWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TimeBlockCreateManyDailyLogItemInputEnvelopeSchema: z.ZodType<Prisma.TimeBlockCreateManyDailyLogItemInputEnvelope> = z.object({
  data: z.lazy(() => TimeBlockCreateManyDailyLogItemInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutDailyLogItemInputSchema: z.ZodType<Prisma.UserUpsertWithoutDailyLogItemInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutDailyLogItemInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDailyLogItemInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutDailyLogItemInputSchema),z.lazy(() => UserUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const UserUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.UserUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const DailyLogUpsertWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogUpsertWithoutDailyLogItemInput> = z.object({
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutDailyLogItemInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutDailyLogItemInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutDailyLogItemInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const DailyLogUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogUncheckedUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const EquipmentUpsertWithoutDailyLogItemInputSchema: z.ZodType<Prisma.EquipmentUpsertWithoutDailyLogItemInput> = z.object({
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutDailyLogItemInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutDailyLogItemInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutDailyLogItemInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const EquipmentUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_Equipment_createdByToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_userIdToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TaskUpsertWithoutDailyLogItemInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutDailyLogItemInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutDailyLogItemInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutDailyLogItemInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TaskUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TaskUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TenantUpsertWithoutDailyLogItemInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutDailyLogItemInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutDailyLogItemInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutDailyLogItemInputSchema),z.lazy(() => TenantUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TenantUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TenantUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TimeBlockUpsertWithWhereUniqueWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockUpsertWithWhereUniqueWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedUpdateWithoutDailyLogItemInputSchema) ]),
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TimeBlockUpdateWithWhereUniqueWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockUpdateWithWhereUniqueWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeBlockUpdateWithoutDailyLogItemInputSchema),z.lazy(() => TimeBlockUncheckedUpdateWithoutDailyLogItemInputSchema) ]),
}).strict();

export const TimeBlockUpdateManyWithWhereWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockUpdateManyWithWhereWithoutDailyLogItemInput> = z.object({
  where: z.lazy(() => TimeBlockScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeBlockUpdateManyMutationInputSchema),z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTimeBlockInputSchema) ]),
}).strict();

export const TimeBlockScalarWhereInputSchema: z.ZodType<Prisma.TimeBlockScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeBlockScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeBlockScalarWhereInputSchema),z.lazy(() => TimeBlockScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  entryType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rangeStartAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rangeEndAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerStartLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerStartLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerStartAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timerStartAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerEndAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  timerEndLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerEndLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  timerEndAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dailyLogItemId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const DailyLogItemCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemCreateWithoutEquipmentInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutDailyLogItemInputSchema),
  Task: z.lazy(() => TaskCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogItemInputSchema),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateWithoutEquipmentInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemCreateOrConnectWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemCreateOrConnectWithoutEquipmentInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const DailyLogItemCreateManyEquipmentInputEnvelopeSchema: z.ZodType<Prisma.DailyLogItemCreateManyEquipmentInputEnvelope> = z.object({
  data: z.lazy(() => DailyLogItemCreateManyEquipmentInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_createdByToUserInputSchema) ]),
}).strict();

export const TenantCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.TenantCreateWithoutEquipmentInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutEquipmentInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutEquipmentInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutEquipmentInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const UserCreateWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_userIdToUserInputSchema) ]),
}).strict();

export const EquipmentPropertyValueCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateWithoutEquipmentInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEquipmentPropertyValueInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedOneWithoutEquipmentPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentPropertyValueInputSchema)
}).strict();

export const EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateWithoutEquipmentInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueCreateOrConnectWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateOrConnectWithoutEquipmentInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const EquipmentPropertyValueCreateManyEquipmentInputEnvelopeSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyEquipmentInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DailyLogItemUpsertWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemUpsertWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutEquipmentInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const DailyLogItemUpdateWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateWithoutEquipmentInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutEquipmentInputSchema) ]),
}).strict();

export const DailyLogItemUpdateManyWithWhereWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithWhereWithoutEquipmentInput> = z.object({
  where: z.lazy(() => DailyLogItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateManyMutationInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogItemInputSchema) ]),
}).strict();

export const UserUpsertWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipment_Equipment_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipment_Equipment_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_createdByToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutEquipmentInputSchema: z.ZodType<Prisma.TenantUpsertWithoutEquipmentInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutEquipmentInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEquipmentInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const TenantUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.TenantUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipment_Equipment_userIdToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipment_Equipment_userIdToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipment_Equipment_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipment_Equipment_userIdToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutEquipmentInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutEquipmentInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutEquipmentInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyMutationInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const EquipmentPropertyValueScalarWhereInputSchema: z.ZodType<Prisma.EquipmentPropertyValueScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  equipmentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  equipmentPropertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserCreateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.UserCreateWithoutEquipmentPropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEquipmentPropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEquipmentPropertyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const TenantCreateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.TenantCreateWithoutEquipmentPropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutEquipmentPropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutEquipmentPropertyInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateWithoutEquipmentPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEquipmentPropertyValueInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutEquipmentPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentPropertyValueInputSchema)
}).strict();

export const EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentId: z.string(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateOrConnectWithoutEquipmentPropertyInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const EquipmentPropertyValueCreateManyEquipmentPropertyInputEnvelopeSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyEquipmentPropertyInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentPropertyValueCreateManyEquipmentPropertyInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.UserUpsertWithoutEquipmentPropertyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipmentPropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipmentPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const UserUpdateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.UserUpdateWithoutEquipmentPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEquipmentPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.TenantUpsertWithoutEquipmentPropertyInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutEquipmentPropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEquipmentPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const TenantUpdateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.TenantUpdateWithoutEquipmentPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutEquipmentPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpsertWithWhereUniqueWithoutEquipmentPropertyInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutEquipmentPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithWhereUniqueWithoutEquipmentPropertyInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutEquipmentPropertyInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithWhereWithoutEquipmentPropertyInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyMutationInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const UserCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.UserCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEquipmentPropertyValueInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const EquipmentCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutEquipmentInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentInputSchema),
  User_Equipment_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_userIdToUserInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  userId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutEquipmentPropertyValueInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const EquipmentPropertyCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEquipmentPropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentPropertyInputSchema)
}).strict();

export const EquipmentPropertyUncheckedCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyCreateOrConnectWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateOrConnectWithoutEquipmentPropertyValueInput> = z.object({
  where: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const TenantCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutEquipmentPropertyValueInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const UserUpsertWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.UserUpsertWithoutEquipmentPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const UserUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.UserUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const EquipmentUpsertWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentUpsertWithoutEquipmentPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const EquipmentUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_userIdToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_userIdToUserNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyUpsertWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyUpsertWithoutEquipmentPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const EquipmentPropertyUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutEquipmentPropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentPropertyNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.TenantUpsertWithoutEquipmentPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEquipmentPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutEquipmentPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const TenantUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.TenantUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.UserCreateWithoutFeedbackInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFeedbackInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFeedbackInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFeedbackInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFeedbackInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeedbackInputSchema) ]),
}).strict();

export const TenantCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.TenantCreateWithoutFeedbackInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutFeedbackInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutFeedbackInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutFeedbackInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutFeedbackInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFeedbackInputSchema) ]),
}).strict();

export const UserUpsertWithoutFeedbackInputSchema: z.ZodType<Prisma.UserUpsertWithoutFeedbackInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFeedbackInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeedbackInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFeedbackInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeedbackInputSchema) ]),
}).strict();

export const UserUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.UserUpdateWithoutFeedbackInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFeedbackInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutFeedbackInputSchema: z.ZodType<Prisma.TenantUpsertWithoutFeedbackInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutFeedbackInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFeedbackInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutFeedbackInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFeedbackInputSchema) ]),
}).strict();

export const TenantUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.TenantUpdateWithoutFeedbackInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutFeedbackInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutFileInputSchema: z.ZodType<Prisma.UserCreateWithoutFileInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFileInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFileInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFileInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFileInputSchema),z.lazy(() => UserUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const DailyLogCreateWithoutFileInputSchema: z.ZodType<Prisma.DailyLogCreateWithoutFileInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogInputSchema),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogUncheckedCreateWithoutFileInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateWithoutFileInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogCreateOrConnectWithoutFileInputSchema: z.ZodType<Prisma.DailyLogCreateOrConnectWithoutFileInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutFileInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const ImageCreateWithoutFileInputSchema: z.ZodType<Prisma.ImageCreateWithoutFileInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_Image_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutImage_Image_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutImageInputSchema),
  User_User_imageIdToImage: z.lazy(() => UserCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageUncheckedCreateWithoutFileInputSchema: z.ZodType<Prisma.ImageUncheckedCreateWithoutFileInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageCreateOrConnectWithoutFileInputSchema: z.ZodType<Prisma.ImageCreateOrConnectWithoutFileInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ImageCreateWithoutFileInputSchema),z.lazy(() => ImageUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const ProjectCreateWithoutFileInputSchema: z.ZodType<Prisma.ProjectCreateWithoutFileInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectInputSchema),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutFileInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutFileInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutFileInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutFileInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutFileInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const TenantCreateWithoutFileInputSchema: z.ZodType<Prisma.TenantCreateWithoutFileInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutFileInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutFileInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutFileInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutFileInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutFileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const FilePropertyValueCreateWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueCreateWithoutFileInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFilePropertyValueInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedOneWithoutFilePropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFilePropertyValueInputSchema)
}).strict();

export const FilePropertyValueUncheckedCreateWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateWithoutFileInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  propertyId: z.string(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueCreateOrConnectWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueCreateOrConnectWithoutFileInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const FilePropertyValueCreateManyFileInputEnvelopeSchema: z.ZodType<Prisma.FilePropertyValueCreateManyFileInputEnvelope> = z.object({
  data: z.lazy(() => FilePropertyValueCreateManyFileInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutFileInputSchema: z.ZodType<Prisma.UserUpsertWithoutFileInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFileInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFileInputSchema),z.lazy(() => UserUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const UserUpdateWithoutFileInputSchema: z.ZodType<Prisma.UserUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFileInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const DailyLogUpsertWithoutFileInputSchema: z.ZodType<Prisma.DailyLogUpsertWithoutFileInput> = z.object({
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutFileInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutFileInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutFileInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const DailyLogUpdateWithoutFileInputSchema: z.ZodType<Prisma.DailyLogUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogUncheckedUpdateWithoutFileInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const ImageUpsertWithoutFileInputSchema: z.ZodType<Prisma.ImageUpsertWithoutFileInput> = z.object({
  update: z.union([ z.lazy(() => ImageUpdateWithoutFileInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutFileInputSchema) ]),
  create: z.union([ z.lazy(() => ImageCreateWithoutFileInputSchema),z.lazy(() => ImageUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const ImageUpdateWithoutFileInputSchema: z.ZodType<Prisma.ImageUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_Image_createdByToUser: z.lazy(() => UserUpdateOneWithoutImage_Image_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutImageNestedInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ImageUncheckedUpdateWithoutFileInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ProjectUpsertWithoutFileInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutFileInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutFileInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutFileInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutFileInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutFileInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutFileInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutFileInputSchema: z.ZodType<Prisma.TenantUpsertWithoutFileInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutFileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFileInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutFileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const TenantUpdateWithoutFileInputSchema: z.ZodType<Prisma.TenantUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutFileInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUpsertWithWhereUniqueWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueUpsertWithWhereUniqueWithoutFileInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutFileInputSchema) ]),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFileInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateWithWhereUniqueWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithWhereUniqueWithoutFileInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutFileInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutFileInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateManyWithWhereWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithWhereWithoutFileInput> = z.object({
  where: z.lazy(() => FilePropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateManyMutationInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const FilePropertyValueScalarWhereInputSchema: z.ZodType<Prisma.FilePropertyValueScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FilePropertyValueScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FilePropertyValueScalarWhereInputSchema),z.lazy(() => FilePropertyValueScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  propertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserCreateWithoutFilePropertyInputSchema: z.ZodType<Prisma.UserCreateWithoutFilePropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFilePropertyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFilePropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFilePropertyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFilePropertyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyInputSchema) ]),
}).strict();

export const TenantCreateWithoutFilePropertyInputSchema: z.ZodType<Prisma.TenantCreateWithoutFilePropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutFilePropertyInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutFilePropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutFilePropertyInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutFilePropertyInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyInputSchema) ]),
}).strict();

export const FilePropertyValueCreateWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueCreateWithoutFilePropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFilePropertyValueInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedOneWithoutFilePropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFilePropertyValueInputSchema)
}).strict();

export const FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateWithoutFilePropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  fileId: z.string(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueCreateOrConnectWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueCreateOrConnectWithoutFilePropertyInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema) ]),
}).strict();

export const FilePropertyValueCreateManyFilePropertyInputEnvelopeSchema: z.ZodType<Prisma.FilePropertyValueCreateManyFilePropertyInputEnvelope> = z.object({
  data: z.lazy(() => FilePropertyValueCreateManyFilePropertyInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutFilePropertyInputSchema: z.ZodType<Prisma.UserUpsertWithoutFilePropertyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFilePropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFilePropertyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyInputSchema) ]),
}).strict();

export const UserUpdateWithoutFilePropertyInputSchema: z.ZodType<Prisma.UserUpdateWithoutFilePropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFilePropertyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFilePropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutFilePropertyInputSchema: z.ZodType<Prisma.TenantUpsertWithoutFilePropertyInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutFilePropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFilePropertyInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyInputSchema) ]),
}).strict();

export const TenantUpdateWithoutFilePropertyInputSchema: z.ZodType<Prisma.TenantUpdateWithoutFilePropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutFilePropertyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutFilePropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUpsertWithWhereUniqueWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueUpsertWithWhereUniqueWithoutFilePropertyInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutFilePropertyInputSchema) ]),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutFilePropertyInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateWithWhereUniqueWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithWhereUniqueWithoutFilePropertyInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutFilePropertyInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutFilePropertyInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateManyWithWhereWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithWhereWithoutFilePropertyInput> = z.object({
  where: z.lazy(() => FilePropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateManyMutationInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const UserCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.UserCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFilePropertyValueInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const FileCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FileCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFileInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutFileInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedOneWithoutFileInputSchema),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutFileInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFileInputSchema)
}).strict();

export const FileUncheckedCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable()
}).strict();

export const FileCreateOrConnectWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutFilePropertyValueInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FileUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const FilePropertyCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFilePropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFilePropertyInputSchema)
}).strict();

export const FilePropertyUncheckedCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyUncheckedCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const FilePropertyCreateOrConnectWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyCreateOrConnectWithoutFilePropertyValueInput> = z.object({
  where: z.lazy(() => FilePropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const TenantCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.TenantCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutFilePropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutFilePropertyValueInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const UserUpsertWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.UserUpsertWithoutFilePropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFilePropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFilePropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const UserUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.UserUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const FileUpsertWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FileUpsertWithoutFilePropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => FileUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => FileUncheckedUpdateWithoutFilePropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FileUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const FileUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FileUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFileNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneWithoutFileNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneWithoutFileNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FilePropertyUpsertWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyUpsertWithoutFilePropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => FilePropertyUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => FilePropertyUncheckedUpdateWithoutFilePropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutFilePropertyValueInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const FilePropertyUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFilePropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilePropertyNestedInputSchema).optional()
}).strict();

export const FilePropertyUncheckedUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.TenantUpsertWithoutFilePropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutFilePropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFilePropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutFilePropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const TenantUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.TenantUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const FileCreateWithoutImageInputSchema: z.ZodType<Prisma.FileCreateWithoutImageInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFileInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutFileInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutFileInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFileInputSchema),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutImageInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutImageInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileCreateOrConnectWithoutImageInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutImageInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutImageInputSchema),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema) ]),
}).strict();

export const FileCreateManyImageInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyImageInputEnvelope> = z.object({
  data: z.lazy(() => FileCreateManyImageInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutImage_Image_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutImage_Image_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutImage_Image_createdByToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutImage_Image_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_Image_createdByToUserInputSchema) ]),
}).strict();

export const TenantCreateWithoutImageInputSchema: z.ZodType<Prisma.TenantCreateWithoutImageInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutImageInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutImageInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutImageInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutImageInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutImageInputSchema),z.lazy(() => TenantUncheckedCreateWithoutImageInputSchema) ]),
}).strict();

export const UserCreateWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserCreateWithoutImage_User_imageIdToImageInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutImage_User_imageIdToImageInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutImage_User_imageIdToImageInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema) ]),
}).strict();

export const UserCreateManyImage_User_imageIdToImageInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyImage_User_imageIdToImageInputEnvelope> = z.object({
  data: z.lazy(() => UserCreateManyImage_User_imageIdToImageInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileUpsertWithWhereUniqueWithoutImageInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutImageInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutImageInputSchema),z.lazy(() => FileUncheckedUpdateWithoutImageInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutImageInputSchema),z.lazy(() => FileUncheckedCreateWithoutImageInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutImageInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutImageInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutImageInputSchema),z.lazy(() => FileUncheckedUpdateWithoutImageInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutImageInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutImageInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutFileInputSchema) ]),
}).strict();

export const UserUpsertWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutImage_Image_createdByToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutImage_Image_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutImage_Image_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutImage_Image_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_Image_createdByToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutImage_Image_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutImage_Image_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutImageInputSchema: z.ZodType<Prisma.TenantUpsertWithoutImageInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutImageInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutImageInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutImageInputSchema),z.lazy(() => TenantUncheckedCreateWithoutImageInputSchema) ]),
}).strict();

export const TenantUpdateWithoutImageInputSchema: z.ZodType<Prisma.TenantUpdateWithoutImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutImageInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutImage_User_imageIdToImageInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedUpdateWithoutImage_User_imageIdToImageInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedCreateWithoutImage_User_imageIdToImageInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutImage_User_imageIdToImageInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutImage_User_imageIdToImageInputSchema),z.lazy(() => UserUncheckedUpdateWithoutImage_User_imageIdToImageInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutImage_User_imageIdToImageInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutUser_User_imageIdToImageInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  preferredLanguage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  settings: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  imageId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  currentTenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserCreateWithoutLocationEntryInputSchema: z.ZodType<Prisma.UserCreateWithoutLocationEntryInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutLocationEntryInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutLocationEntryInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutLocationEntryInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutLocationEntryInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutLocationEntryInputSchema),z.lazy(() => UserUncheckedCreateWithoutLocationEntryInputSchema) ]),
}).strict();

export const DailyLogCreateWithoutLocationEntryInputSchema: z.ZodType<Prisma.DailyLogCreateWithoutLocationEntryInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogInputSchema),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogUncheckedCreateWithoutLocationEntryInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateWithoutLocationEntryInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogCreateOrConnectWithoutLocationEntryInputSchema: z.ZodType<Prisma.DailyLogCreateOrConnectWithoutLocationEntryInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutLocationEntryInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutLocationEntryInputSchema) ]),
}).strict();

export const TenantCreateWithoutLocationEntryInputSchema: z.ZodType<Prisma.TenantCreateWithoutLocationEntryInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutLocationEntryInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutLocationEntryInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutLocationEntryInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutLocationEntryInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutLocationEntryInputSchema),z.lazy(() => TenantUncheckedCreateWithoutLocationEntryInputSchema) ]),
}).strict();

export const UserUpsertWithoutLocationEntryInputSchema: z.ZodType<Prisma.UserUpsertWithoutLocationEntryInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutLocationEntryInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLocationEntryInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutLocationEntryInputSchema),z.lazy(() => UserUncheckedCreateWithoutLocationEntryInputSchema) ]),
}).strict();

export const UserUpdateWithoutLocationEntryInputSchema: z.ZodType<Prisma.UserUpdateWithoutLocationEntryInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutLocationEntryInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutLocationEntryInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const DailyLogUpsertWithoutLocationEntryInputSchema: z.ZodType<Prisma.DailyLogUpsertWithoutLocationEntryInput> = z.object({
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutLocationEntryInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutLocationEntryInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutLocationEntryInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutLocationEntryInputSchema) ]),
}).strict();

export const DailyLogUpdateWithoutLocationEntryInputSchema: z.ZodType<Prisma.DailyLogUpdateWithoutLocationEntryInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogUncheckedUpdateWithoutLocationEntryInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateWithoutLocationEntryInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutLocationEntryInputSchema: z.ZodType<Prisma.TenantUpsertWithoutLocationEntryInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutLocationEntryInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutLocationEntryInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutLocationEntryInputSchema),z.lazy(() => TenantUncheckedCreateWithoutLocationEntryInputSchema) ]),
}).strict();

export const TenantUpdateWithoutLocationEntryInputSchema: z.ZodType<Prisma.TenantUpdateWithoutLocationEntryInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutLocationEntryInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutLocationEntryInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const FileCreateWithoutProjectInputSchema: z.ZodType<Prisma.FileCreateWithoutProjectInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFileInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutFileInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedOneWithoutFileInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFileInputSchema),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  dailyLogId: z.string().optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutProjectInputSchema),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const FileCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyProjectInputEnvelope> = z.object({
  data: z.lazy(() => FileCreateManyProjectInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutProjectInputSchema: z.ZodType<Prisma.UserCreateWithoutProjectInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProjectInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TenantCreateWithoutProjectInputSchema: z.ZodType<Prisma.TenantCreateWithoutProjectInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ProjectPropertyValueCreateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateWithoutProjectInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectPropertyValueInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedOneWithoutProjectPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectPropertyValueInputSchema)
}).strict();

export const ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyValueCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ProjectPropertyValueCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyProjectInputEnvelope> = z.object({
  data: z.lazy(() => ProjectPropertyValueCreateManyProjectInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutProjectInputSchema: z.ZodType<Prisma.TaskCreateWithoutProjectInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TaskCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyProjectInputEnvelope> = z.object({
  data: z.lazy(() => TaskCreateManyProjectInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutProjectInputSchema),z.lazy(() => FileUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutProjectInputSchema),z.lazy(() => FileUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutProjectInputSchema),z.lazy(() => FileUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutFileInputSchema) ]),
}).strict();

export const UserUpsertWithoutProjectInputSchema: z.ZodType<Prisma.UserUpsertWithoutProjectInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutProjectInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProjectInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const UserUpdateWithoutProjectInputSchema: z.ZodType<Prisma.UserUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutProjectInputSchema: z.ZodType<Prisma.TenantUpsertWithoutProjectInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutProjectInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TenantUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TenantUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutProjectInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyMutationInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const ProjectPropertyValueScalarWhereInputSchema: z.ZodType<Prisma.ProjectPropertyValueScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),z.lazy(() => ProjectPropertyValueScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectPropertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const TaskScalarWhereInputSchema: z.ZodType<Prisma.TaskScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  statusId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  systemStatusId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskStatusId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserCreateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.UserCreateWithoutProjectPropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProjectPropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProjectPropertyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProjectPropertyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyInputSchema) ]),
}).strict();

export const TenantCreateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.TenantCreateWithoutProjectPropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutProjectPropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutProjectPropertyInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutProjectPropertyInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyInputSchema) ]),
}).strict();

export const ProjectPropertyValueCreateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateWithoutProjectPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectPropertyValueInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutProjectPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectPropertyValueInputSchema)
}).strict();

export const ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateOrConnectWithoutProjectPropertyInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema) ]),
}).strict();

export const ProjectPropertyValueCreateManyProjectPropertyInputEnvelopeSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyProjectPropertyInputEnvelope> = z.object({
  data: z.lazy(() => ProjectPropertyValueCreateManyProjectPropertyInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutProjectPropertyInputSchema: z.ZodType<Prisma.UserUpsertWithoutProjectPropertyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutProjectPropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProjectPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyInputSchema) ]),
}).strict();

export const UserUpdateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.UserUpdateWithoutProjectPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProjectPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutProjectPropertyInputSchema: z.ZodType<Prisma.TenantUpsertWithoutProjectPropertyInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutProjectPropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProjectPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyInputSchema) ]),
}).strict();

export const TenantUpdateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.TenantUpdateWithoutProjectPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutProjectPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpsertWithWhereUniqueWithoutProjectPropertyInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutProjectPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutProjectPropertyInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithWhereUniqueWithoutProjectPropertyInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutProjectPropertyInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutProjectPropertyInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateManyWithWhereWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithWhereWithoutProjectPropertyInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyMutationInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const UserCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.UserCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProjectPropertyValueInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const ProjectCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutProjectInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectInputSchema),
  Task: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutProjectPropertyValueInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const ProjectPropertyCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectPropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectPropertyInputSchema)
}).strict();

export const ProjectPropertyUncheckedCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyCreateOrConnectWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyCreateOrConnectWithoutProjectPropertyValueInput> = z.object({
  where: z.lazy(() => ProjectPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const TenantCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutProjectPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutProjectPropertyValueInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const UserUpsertWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.UserUpsertWithoutProjectPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const UserUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.UserUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const ProjectUpsertWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutProjectPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutProjectNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutProjectNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectPropertyUpsertWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyUpsertWithoutProjectPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const ProjectPropertyUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectPropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectPropertyNestedInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.TenantUpsertWithoutProjectPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutProjectPropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProjectPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutProjectPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const TenantUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.TenantUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const DailyLogItemCreateWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemCreateWithoutTaskInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutDailyLogItemInputSchema),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogItemInputSchema),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const DailyLogItemCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.DailyLogItemCreateManyTaskInputEnvelope> = z.object({
  data: z.lazy(() => DailyLogItemCreateManyTaskInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutTaskInputSchema: z.ZodType<Prisma.UserCreateWithoutTaskInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskCreateWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskCreateWithoutOther_TaskInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutOther_TaskInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutOther_TaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutOther_TaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOther_TaskInputSchema) ]),
}).strict();

export const TaskCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskCreateWithoutTaskInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyTaskInputEnvelope> = z.object({
  data: z.lazy(() => TaskCreateManyTaskInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectCreateWithoutTaskInputSchema: z.ZodType<Prisma.ProjectCreateWithoutTaskInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutProjectInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectInputSchema),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTaskInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskStatusCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskStatusCreateWithoutTaskInput> = z.object({
  id: z.string(),
  displayOrder: z.number(),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskStatusInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskStatusInputSchema)
}).strict();

export const TaskStatusUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskStatusUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  displayOrder: z.number(),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TaskStatusCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.TaskStatusCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskStatusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTaskInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TenantCreateWithoutTaskInputSchema: z.ZodType<Prisma.TenantCreateWithoutTaskInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskPropertyValueCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateWithoutTaskInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskPropertyValueInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedOneWithoutTaskPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskPropertyValueInputSchema)
}).strict();

export const TaskPropertyValueUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskPropertyValueCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskPropertyValueCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyTaskInputEnvelope> = z.object({
  data: z.lazy(() => TaskPropertyValueCreateManyTaskInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserTaskCreateWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskCreateWithoutTaskInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutUserTaskInputSchema),
  User_UserTask_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_userIdToUserInputSchema)
}).strict();

export const UserTaskUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  userId: z.string()
}).strict();

export const UserTaskCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const UserTaskCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.UserTaskCreateManyTaskInputEnvelope> = z.object({
  data: z.lazy(() => UserTaskCreateManyTaskInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DailyLogItemUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const DailyLogItemUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateWithoutTaskInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const DailyLogItemUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => DailyLogItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateManyMutationInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogItemInputSchema) ]),
}).strict();

export const UserUpsertWithoutTaskInputSchema: z.ZodType<Prisma.UserUpsertWithoutTaskInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const UserUpdateWithoutTaskInputSchema: z.ZodType<Prisma.UserUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskUpsertWithoutOther_TaskInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutOther_TaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutOther_TaskInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutOther_TaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOther_TaskInputSchema) ]),
}).strict();

export const TaskUpdateWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskUpdateWithoutOther_TaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutOther_TaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutTaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutOther_TaskInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutTaskInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutTaskInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutTaskInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTaskInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutTaskInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutProjectNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutProjectNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const TaskStatusUpsertWithoutTaskInputSchema: z.ZodType<Prisma.TaskStatusUpsertWithoutTaskInput> = z.object({
  update: z.union([ z.lazy(() => TaskStatusUpdateWithoutTaskInputSchema),z.lazy(() => TaskStatusUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTaskInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskStatusUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskStatusUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskStatusNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskStatusNestedInputSchema).optional()
}).strict();

export const TaskStatusUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutTaskInputSchema: z.ZodType<Prisma.TenantUpsertWithoutTaskInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TenantUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TenantUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutTaskInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateManyMutationInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TaskPropertyValueScalarWhereInputSchema: z.ZodType<Prisma.TaskPropertyValueScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskPropertyValueScalarWhereInputSchema),z.lazy(() => TaskPropertyValueScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskPropertyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserTaskUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserTaskUpdateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const UserTaskUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateWithoutTaskInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const UserTaskUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => UserTaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateManyMutationInputSchema),z.lazy(() => UserTaskUncheckedUpdateManyWithoutUserTaskInputSchema) ]),
}).strict();

export const UserTaskScalarWhereInputSchema: z.ZodType<Prisma.UserTaskScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserTaskScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserTaskScalarWhereInputSchema),z.lazy(() => UserTaskScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserCreateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.UserCreateWithoutTaskPropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTaskPropertyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTaskPropertyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTaskPropertyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TenantCreateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TenantCreateWithoutTaskPropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutTaskPropertyInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutTaskPropertyInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TaskPropertyValueCreateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateWithoutTaskPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskPropertyValueInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutTaskPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskPropertyValueInputSchema)
}).strict();

export const TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateWithoutTaskPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskPropertyValueCreateOrConnectWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateOrConnectWithoutTaskPropertyInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TaskPropertyValueCreateManyTaskPropertyInputEnvelopeSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyTaskPropertyInputEnvelope> = z.object({
  data: z.lazy(() => TaskPropertyValueCreateManyTaskPropertyInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutTaskPropertyInputSchema: z.ZodType<Prisma.UserUpsertWithoutTaskPropertyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskPropertyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyInputSchema) ]),
}).strict();

export const UserUpdateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.UserUpdateWithoutTaskPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTaskPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TenantUpsertWithoutTaskPropertyInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskPropertyInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TenantUpdateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TenantUpdateWithoutTaskPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutTaskPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUpsertWithWhereUniqueWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueUpsertWithWhereUniqueWithoutTaskPropertyInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutTaskPropertyInputSchema) ]),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateWithWhereUniqueWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithWhereUniqueWithoutTaskPropertyInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutTaskPropertyInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateManyWithWhereWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithWhereWithoutTaskPropertyInput> = z.object({
  where: z.lazy(() => TaskPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateManyMutationInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const UserCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.UserCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTaskPropertyValueInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TaskCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutTaskPropertyValueInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TaskPropertyCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskPropertyInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskPropertyInputSchema)
}).strict();

export const TaskPropertyUncheckedCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TaskPropertyCreateOrConnectWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyCreateOrConnectWithoutTaskPropertyValueInput> = z.object({
  where: z.lazy(() => TaskPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TenantCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutTaskPropertyValueInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutTaskPropertyValueInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const UserUpsertWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.UserUpsertWithoutTaskPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const UserUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.UserUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskUpsertWithoutTaskPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TaskUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskPropertyUpsertWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyUpsertWithoutTaskPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TaskPropertyUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskPropertyNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskPropertyNestedInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TenantUpsertWithoutTaskPropertyValueInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskPropertyValueInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskPropertyValueInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskPropertyValueInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TenantUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TenantUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TaskCreateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskCreateWithoutTaskStatusInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutTaskStatusInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutTaskStatusInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema) ]),
}).strict();

export const TaskCreateManyTaskStatusInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyTaskStatusInputEnvelope> = z.object({
  data: z.lazy(() => TaskCreateManyTaskStatusInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutTaskStatusInputSchema: z.ZodType<Prisma.UserCreateWithoutTaskStatusInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTaskStatusInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTaskStatusInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTaskStatusInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTaskStatusInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskStatusInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskStatusInputSchema) ]),
}).strict();

export const TenantCreateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TenantCreateWithoutTaskStatusInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutTaskStatusInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutTaskStatusInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutTaskStatusInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskStatusInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskStatusInputSchema) ]),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutTaskStatusInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskStatusInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskStatusInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutTaskStatusInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutTaskStatusInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskStatusInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutTaskStatusInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const UserUpsertWithoutTaskStatusInputSchema: z.ZodType<Prisma.UserUpsertWithoutTaskStatusInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskStatusInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskStatusInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskStatusInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskStatusInputSchema) ]),
}).strict();

export const UserUpdateWithoutTaskStatusInputSchema: z.ZodType<Prisma.UserUpdateWithoutTaskStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTaskStatusInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTaskStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutTaskStatusInputSchema: z.ZodType<Prisma.TenantUpsertWithoutTaskStatusInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutTaskStatusInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTaskStatusInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutTaskStatusInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTaskStatusInputSchema) ]),
}).strict();

export const TenantUpdateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TenantUpdateWithoutTaskStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutTaskStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const ApiKeyCreateWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  User: z.lazy(() => UserCreateNestedOneWithoutApiKeyInputSchema).optional()
}).strict();

export const ApiKeyUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  userId: z.string().optional().nullable()
}).strict();

export const ApiKeyCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ApiKeyCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.ApiKeyCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => ApiKeyCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DailyLogCreateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogCreateWithoutTenantInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const DailyLogCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.DailyLogCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => DailyLogCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DailyLogItemCreateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemCreateWithoutTenantInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutDailyLogItemInputSchema),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  equipmentId: z.string().optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const DailyLogItemCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.DailyLogItemCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => DailyLogItemCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentCreateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutEquipmentInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  User_Equipment_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_userIdToUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.EquipmentCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentPropertyCreateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEquipmentPropertyInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentPropertyInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentPropertyInputSchema).optional()
}).strict();

export const EquipmentPropertyCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentPropertyCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.EquipmentPropertyCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentPropertyCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentPropertyValueCreateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEquipmentPropertyValueInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutEquipmentPropertyValueInputSchema),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedOneWithoutEquipmentPropertyValueInputSchema)
}).strict();

export const EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentId: z.string(),
  equipmentPropertyId: z.string()
}).strict();

export const EquipmentPropertyValueCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentPropertyValueCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentPropertyValueCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeedbackCreateWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackCreateWithoutTenantInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFeedbackInputSchema).optional()
}).strict();

export const FeedbackUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const FeedbackCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => FeedbackWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeedbackCreateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FeedbackCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.FeedbackCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => FeedbackCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileCreateWithoutTenantInputSchema: z.ZodType<Prisma.FileCreateWithoutTenantInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFileInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutFileInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedOneWithoutFileInputSchema),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutFileInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FileCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => FileCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FilePropertyCreateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFilePropertyInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFilePropertyInputSchema).optional()
}).strict();

export const FilePropertyUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFilePropertyInputSchema).optional()
}).strict();

export const FilePropertyCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FilePropertyCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.FilePropertyCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => FilePropertyCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FilePropertyValueCreateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutFilePropertyValueInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedOneWithoutFilePropertyValueInputSchema),
  FileProperty: z.lazy(() => FilePropertyCreateNestedOneWithoutFilePropertyValueInputSchema)
}).strict();

export const FilePropertyValueUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  fileId: z.string(),
  propertyId: z.string()
}).strict();

export const FilePropertyValueCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FilePropertyValueCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.FilePropertyValueCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => FilePropertyValueCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ImageCreateWithoutTenantInputSchema: z.ZodType<Prisma.ImageCreateWithoutTenantInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutImageInputSchema).optional(),
  User_Image_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutImage_Image_createdByToUserInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.ImageUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutImageInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.ImageCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ImageCreateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ImageCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.ImageCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => ImageCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LocationEntryCreateWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryCreateWithoutTenantInput> = z.object({
  id: z.string(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutLocationEntryInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutLocationEntryInputSchema)
}).strict();

export const LocationEntryUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  dailyLogId: z.string()
}).strict();

export const LocationEntryCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const LocationEntryCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.LocationEntryCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => LocationEntryCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutProjectInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.ProjectCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => ProjectCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectPropertyCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectPropertyInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectPropertyInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectPropertyInputSchema).optional()
}).strict();

export const ProjectPropertyCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectPropertyCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.ProjectPropertyCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => ProjectPropertyCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectPropertyValueCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutProjectPropertyValueInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutProjectPropertyValueInputSchema),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedOneWithoutProjectPropertyValueInputSchema)
}).strict();

export const ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  projectPropertyId: z.string()
}).strict();

export const ProjectPropertyValueCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectPropertyValueCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => ProjectPropertyValueCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskCreateWithoutTenantInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => TaskCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskPropertyCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskPropertyInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskPropertyInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskPropertyInputSchema).optional()
}).strict();

export const TaskPropertyCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskPropertyCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.TaskPropertyCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => TaskPropertyCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskPropertyValueCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskPropertyValueInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutTaskPropertyValueInputSchema),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedOneWithoutTaskPropertyValueInputSchema)
}).strict();

export const TaskPropertyValueUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskPropertyId: z.string(),
  taskId: z.string()
}).strict();

export const TaskPropertyValueCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskPropertyValueCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => TaskPropertyValueCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskStatusCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusCreateWithoutTenantInput> = z.object({
  id: z.string(),
  displayOrder: z.number(),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTaskStatusInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskStatusInputSchema).optional()
}).strict();

export const TaskStatusUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  displayOrder: z.number(),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskStatusInputSchema).optional()
}).strict();

export const TaskStatusCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskStatusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskStatusCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.TaskStatusCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => TaskStatusCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutTenant_Tenant_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTenant_Tenant_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTenant_Tenant_createdByToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_Tenant_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_Tenant_createdByToUserInputSchema) ]),
}).strict();

export const TenantUserCreateWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserCreateWithoutTenantInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_TenantUser_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenantUser_TenantUser_createdByToUserInputSchema).optional(),
  User_TenantUser_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutTenantUser_TenantUser_userIdToUserInputSchema).optional()
}).strict();

export const TenantUserUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  userId: z.string().optional().nullable()
}).strict();

export const TenantUserCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantUserCreateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TenantUserCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.TenantUserCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => TenantUserCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TimeBlockCreateWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockCreateWithoutTenantInput> = z.object({
  id: z.string(),
  duration: z.number().optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().optional().nullable(),
  timerStartLongitude: z.number().optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().optional().nullable(),
  timerEndLongitude: z.number().optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutTimeBlockInputSchema),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedOneWithoutTimeBlockInputSchema)
}).strict();

export const TimeBlockUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  duration: z.number().optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().optional().nullable(),
  timerStartLongitude: z.number().optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().optional().nullable(),
  timerEndLongitude: z.number().optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string(),
  dailyLogItemId: z.string()
}).strict();

export const TimeBlockCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TimeBlockCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.TimeBlockCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => TimeBlockCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserCreateWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema) ]),
}).strict();

export const UserCreateManyTenant_User_currentTenantIdToTenantInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyTenant_User_currentTenantIdToTenantInputEnvelope> = z.object({
  data: z.lazy(() => UserCreateManyTenant_User_currentTenantIdToTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserTaskCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskCreateWithoutTenantInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_createdByToUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutUserTaskInputSchema),
  User_UserTask_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_userIdToUserInputSchema)
}).strict();

export const UserTaskUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  userId: z.string()
}).strict();

export const UserTaskCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const UserTaskCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.UserTaskCreateManyTenantInputEnvelope> = z.object({
  data: z.lazy(() => UserTaskCreateManyTenantInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ApiKeyUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ApiKeyUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ApiKeyUpdateWithoutTenantInputSchema),z.lazy(() => ApiKeyUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const ApiKeyUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => ApiKeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ApiKeyUpdateManyMutationInputSchema),z.lazy(() => ApiKeyUncheckedUpdateManyWithoutApiKeyInputSchema) ]),
}).strict();

export const ApiKeyScalarWhereInputSchema: z.ZodType<Prisma.ApiKeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const DailyLogUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const DailyLogUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyLogUpdateWithoutTenantInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const DailyLogUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyLogUpdateManyMutationInputSchema),z.lazy(() => DailyLogUncheckedUpdateManyWithoutDailyLogInputSchema) ]),
}).strict();

export const DailyLogScalarWhereInputSchema: z.ZodType<Prisma.DailyLogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DailyLogScalarWhereInputSchema),z.lazy(() => DailyLogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DailyLogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DailyLogScalarWhereInputSchema),z.lazy(() => DailyLogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  note: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ratingNote: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  managerNote: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const DailyLogItemUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const DailyLogItemUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateWithoutTenantInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const DailyLogItemUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => DailyLogItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateManyMutationInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogItemInputSchema) ]),
}).strict();

export const EquipmentUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateWithoutTenantInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateManyMutationInputSchema),z.lazy(() => EquipmentUncheckedUpdateManyWithoutEquipmentInputSchema) ]),
}).strict();

export const EquipmentScalarWhereInputSchema: z.ZodType<Prisma.EquipmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const EquipmentPropertyUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentPropertyUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyUpdateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentPropertyUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyUpdateManyMutationInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const EquipmentPropertyScalarWhereInputSchema: z.ZodType<Prisma.EquipmentPropertyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentPropertyScalarWhereInputSchema),z.lazy(() => EquipmentPropertyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentPropertyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentPropertyScalarWhereInputSchema),z.lazy(() => EquipmentPropertyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const EquipmentPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyMutationInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const FeedbackUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FeedbackWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeedbackUpdateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => FeedbackCreateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FeedbackUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FeedbackWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeedbackUpdateWithoutTenantInputSchema),z.lazy(() => FeedbackUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const FeedbackUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => FeedbackScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeedbackUpdateManyMutationInputSchema),z.lazy(() => FeedbackUncheckedUpdateManyWithoutFeedbackInputSchema) ]),
}).strict();

export const FeedbackScalarWhereInputSchema: z.ZodType<Prisma.FeedbackScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeedbackScalarWhereInputSchema),z.lazy(() => FeedbackScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeedbackScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeedbackScalarWhereInputSchema),z.lazy(() => FeedbackScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  text: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const FileUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutTenantInputSchema),z.lazy(() => FileUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutTenantInputSchema),z.lazy(() => FileUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutFileInputSchema) ]),
}).strict();

export const FilePropertyUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FilePropertyUpdateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FilePropertyUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FilePropertyUpdateWithoutTenantInputSchema),z.lazy(() => FilePropertyUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const FilePropertyUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FilePropertyUpdateManyMutationInputSchema),z.lazy(() => FilePropertyUncheckedUpdateManyWithoutFilePropertyInputSchema) ]),
}).strict();

export const FilePropertyScalarWhereInputSchema: z.ZodType<Prisma.FilePropertyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FilePropertyScalarWhereInputSchema),z.lazy(() => FilePropertyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FilePropertyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FilePropertyScalarWhereInputSchema),z.lazy(() => FilePropertyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const FilePropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => FilePropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateManyMutationInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const ImageUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ImageUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ImageUpdateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ImageCreateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ImageUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ImageUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ImageUpdateWithoutTenantInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const ImageUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.ImageUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => ImageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ImageUpdateManyMutationInputSchema),z.lazy(() => ImageUncheckedUpdateManyWithoutImageInputSchema) ]),
}).strict();

export const ImageScalarWhereInputSchema: z.ZodType<Prisma.ImageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ImageScalarWhereInputSchema),z.lazy(() => ImageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ImageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ImageScalarWhereInputSchema),z.lazy(() => ImageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bucketId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  blurhash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const LocationEntryUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const LocationEntryUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LocationEntryUpdateWithoutTenantInputSchema),z.lazy(() => LocationEntryUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const LocationEntryUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => LocationEntryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LocationEntryUpdateManyMutationInputSchema),z.lazy(() => LocationEntryUncheckedUpdateManyWithoutLocationEntryInputSchema) ]),
}).strict();

export const ProjectUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProjectUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProjectUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutTenantInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateManyMutationInputSchema),z.lazy(() => ProjectUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ProjectScalarWhereInputSchema: z.ZodType<Prisma.ProjectScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  progress: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLabel: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locationLatitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  locationLongitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ProjectPropertyUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectPropertyUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyUpdateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectPropertyUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyUpdateManyMutationInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutProjectPropertyInputSchema) ]),
}).strict();

export const ProjectPropertyScalarWhereInputSchema: z.ZodType<Prisma.ProjectPropertyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectPropertyScalarWhereInputSchema),z.lazy(() => ProjectPropertyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectPropertyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectPropertyScalarWhereInputSchema),z.lazy(() => ProjectPropertyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ProjectPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyMutationInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutTenantInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const TaskPropertyUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskPropertyUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyUpdateWithoutTenantInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TaskPropertyUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyUpdateManyMutationInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TaskPropertyScalarWhereInputSchema: z.ZodType<Prisma.TaskPropertyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskPropertyScalarWhereInputSchema),z.lazy(() => TaskPropertyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskPropertyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskPropertyScalarWhereInputSchema),z.lazy(() => TaskPropertyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const TaskPropertyValueUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutTenantInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateManyMutationInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TaskStatusUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskStatusWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskStatusUpdateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TaskStatusUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskStatusWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskStatusUpdateWithoutTenantInputSchema),z.lazy(() => TaskStatusUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TaskStatusUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TaskStatusScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskStatusUpdateManyMutationInputSchema),z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTaskStatusInputSchema) ]),
}).strict();

export const TaskStatusScalarWhereInputSchema: z.ZodType<Prisma.TaskStatusScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskStatusScalarWhereInputSchema),z.lazy(() => TaskStatusScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskStatusScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskStatusScalarWhereInputSchema),z.lazy(() => TaskStatusScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  displayOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  iconColor: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserUpsertWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutTenant_Tenant_createdByToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTenant_Tenant_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenant_Tenant_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_Tenant_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_Tenant_createdByToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutTenant_Tenant_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTenant_Tenant_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUserUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TenantUserUpdateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TenantUserCreateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TenantUserUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TenantUserUpdateWithoutTenantInputSchema),z.lazy(() => TenantUserUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TenantUserUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TenantUserUpdateManyMutationInputSchema),z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantUserInputSchema) ]),
}).strict();

export const TenantUserScalarWhereInputSchema: z.ZodType<Prisma.TenantUserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantUserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantUserScalarWhereInputSchema),z.lazy(() => TenantUserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userRole: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  inviteEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inviteSentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  inviteStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const TimeBlockUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const TimeBlockUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeBlockUpdateWithoutTenantInputSchema),z.lazy(() => TimeBlockUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TimeBlockUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TimeBlockScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeBlockUpdateManyMutationInputSchema),z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTimeBlockInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenant_User_currentTenantIdToTenantInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenant_User_currentTenantIdToTenantInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutTenant_User_currentTenantIdToTenantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenant_User_currentTenantIdToTenantInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutUser_User_currentTenantIdToTenantInputSchema) ]),
}).strict();

export const UserTaskUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserTaskUpdateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const UserTaskUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateWithoutTenantInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const UserTaskUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => UserTaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateManyMutationInputSchema),z.lazy(() => UserTaskUncheckedUpdateManyWithoutUserTaskInputSchema) ]),
}).strict();

export const UserCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema) ]),
}).strict();

export const TenantCreateWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantCreateWithoutTenantUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutTenantUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutTenantUserInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutTenantUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTenantUserInputSchema) ]),
}).strict();

export const UserCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema) ]),
}).strict();

export const UserUpsertWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTenantUser_TenantUser_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantUser_TenantUser_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_createdByToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantUpsertWithoutTenantUserInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutTenantUserInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTenantUserInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutTenantUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTenantUserInputSchema) ]),
}).strict();

export const TenantUpdateWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantUpdateWithoutTenantUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutTenantUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTenantUser_TenantUser_userIdToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantUser_TenantUser_userIdToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantUser_TenantUser_userIdToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutTimeBlockInputSchema: z.ZodType<Prisma.UserCreateWithoutTimeBlockInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTimeBlockInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTimeBlockInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTimeBlockInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTimeBlockInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTimeBlockInputSchema),z.lazy(() => UserUncheckedCreateWithoutTimeBlockInputSchema) ]),
}).strict();

export const DailyLogItemCreateWithoutTimeBlockInputSchema: z.ZodType<Prisma.DailyLogItemCreateWithoutTimeBlockInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutDailyLogItemInputSchema),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogItemInputSchema)
}).strict();

export const DailyLogItemUncheckedCreateWithoutTimeBlockInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateWithoutTimeBlockInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable()
}).strict();

export const DailyLogItemCreateOrConnectWithoutTimeBlockInputSchema: z.ZodType<Prisma.DailyLogItemCreateOrConnectWithoutTimeBlockInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTimeBlockInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTimeBlockInputSchema) ]),
}).strict();

export const TenantCreateWithoutTimeBlockInputSchema: z.ZodType<Prisma.TenantCreateWithoutTimeBlockInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutTimeBlockInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutTimeBlockInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutTimeBlockInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutTimeBlockInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutTimeBlockInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTimeBlockInputSchema) ]),
}).strict();

export const UserUpsertWithoutTimeBlockInputSchema: z.ZodType<Prisma.UserUpsertWithoutTimeBlockInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTimeBlockInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTimeBlockInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTimeBlockInputSchema),z.lazy(() => UserUncheckedCreateWithoutTimeBlockInputSchema) ]),
}).strict();

export const UserUpdateWithoutTimeBlockInputSchema: z.ZodType<Prisma.UserUpdateWithoutTimeBlockInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTimeBlockInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTimeBlockInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const DailyLogItemUpsertWithoutTimeBlockInputSchema: z.ZodType<Prisma.DailyLogItemUpsertWithoutTimeBlockInput> = z.object({
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithoutTimeBlockInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutTimeBlockInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutTimeBlockInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutTimeBlockInputSchema) ]),
}).strict();

export const DailyLogItemUpdateWithoutTimeBlockInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithoutTimeBlockInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateWithoutTimeBlockInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateWithoutTimeBlockInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUpsertWithoutTimeBlockInputSchema: z.ZodType<Prisma.TenantUpsertWithoutTimeBlockInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutTimeBlockInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutTimeBlockInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutTimeBlockInputSchema),z.lazy(() => TenantUncheckedCreateWithoutTimeBlockInputSchema) ]),
}).strict();

export const TenantUpdateWithoutTimeBlockInputSchema: z.ZodType<Prisma.TenantUpdateWithoutTimeBlockInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutTimeBlockInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutTimeBlockInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const ApiKeyCreateWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutApiKeyInputSchema)
}).strict();

export const ApiKeyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  tenantId: z.string()
}).strict();

export const ApiKeyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ApiKeyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ApiKeyCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => ApiKeyCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DailyLogCreateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogCreateWithoutUserInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogInputSchema),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number(),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutDailyLogInputSchema).optional()
}).strict();

export const DailyLogCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.DailyLogCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DailyLogCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.DailyLogCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => DailyLogCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DailyLogItemCreateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemCreateWithoutUserInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutDailyLogItemInputSchema),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutDailyLogItemInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutDailyLogItemInputSchema),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutDailyLogItemInputSchema).optional()
}).strict();

export const DailyLogItemCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DailyLogItemCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.DailyLogItemCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => DailyLogItemCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutUser_Equipment_createdByToUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutEquipmentInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentInputSchema),
  User_Equipment_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_userIdToUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  userId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutUser_Equipment_createdByToUserInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema) ]),
}).strict();

export const EquipmentCreateManyUser_Equipment_createdByToUserInputEnvelopeSchema: z.ZodType<Prisma.EquipmentCreateManyUser_Equipment_createdByToUserInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentCreateManyUser_Equipment_createdByToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutUser_Equipment_userIdToUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutEquipmentInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutEquipment_Equipment_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentInputSchema),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutUser_Equipment_userIdToUserInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema) ]),
}).strict();

export const EquipmentCreateManyUser_Equipment_userIdToUserInputEnvelopeSchema: z.ZodType<Prisma.EquipmentCreateManyUser_Equipment_userIdToUserInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentCreateManyUser_Equipment_userIdToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentPropertyCreateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentPropertyInputSchema),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutEquipmentPropertyInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutEquipmentPropertyInputSchema).optional()
}).strict();

export const EquipmentPropertyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EquipmentPropertyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.EquipmentPropertyCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentPropertyCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentPropertyValueCreateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Equipment: z.lazy(() => EquipmentCreateNestedOneWithoutEquipmentPropertyValueInputSchema),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedOneWithoutEquipmentPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutEquipmentPropertyValueInputSchema)
}).strict();

export const EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  equipmentId: z.string(),
  equipmentPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EquipmentPropertyValueCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => EquipmentPropertyValueCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeedbackCreateWithoutUserInputSchema: z.ZodType<Prisma.FeedbackCreateWithoutUserInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFeedbackInputSchema)
}).strict();

export const FeedbackUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.FeedbackUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const FeedbackCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.FeedbackCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => FeedbackWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeedbackCreateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FeedbackCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.FeedbackCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => FeedbackCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileCreateWithoutUserInputSchema: z.ZodType<Prisma.FileCreateWithoutUserInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutFileInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedOneWithoutFileInputSchema),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutFileInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFileInputSchema),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFileInputSchema).optional()
}).strict();

export const FileCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FileCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => FileCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FilePropertyCreateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFilePropertyInputSchema),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutFilePropertyInputSchema).optional()
}).strict();

export const FilePropertyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutFilePropertyInputSchema).optional()
}).strict();

export const FilePropertyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FilePropertyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.FilePropertyCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => FilePropertyCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FilePropertyValueCreateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedOneWithoutFilePropertyValueInputSchema),
  FileProperty: z.lazy(() => FilePropertyCreateNestedOneWithoutFilePropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutFilePropertyValueInputSchema)
}).strict();

export const FilePropertyValueUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  fileId: z.string(),
  propertyId: z.string(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FilePropertyValueCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.FilePropertyValueCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => FilePropertyValueCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ImageCreateWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageCreateWithoutUser_Image_createdByToUserInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutImageInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutImageInputSchema),
  User_User_imageIdToImage: z.lazy(() => UserCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUncheckedCreateWithoutUser_Image_createdByToUserInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutImageInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedCreateNestedManyWithoutImage_User_imageIdToImageInputSchema).optional()
}).strict();

export const ImageCreateOrConnectWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageCreateOrConnectWithoutUser_Image_createdByToUserInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema) ]),
}).strict();

export const ImageCreateManyUser_Image_createdByToUserInputEnvelopeSchema: z.ZodType<Prisma.ImageCreateManyUser_Image_createdByToUserInputEnvelope> = z.object({
  data: z.lazy(() => ImageCreateManyUser_Image_createdByToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LocationEntryCreateWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryCreateWithoutUserInput> = z.object({
  id: z.string(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLog: z.lazy(() => DailyLogCreateNestedOneWithoutLocationEntryInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutLocationEntryInputSchema)
}).strict();

export const LocationEntryUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string()
}).strict();

export const LocationEntryCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const LocationEntryCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.LocationEntryCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => LocationEntryCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectCreateWithoutUserInputSchema: z.ZodType<Prisma.ProjectCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutProjectInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectInputSchema),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().optional().nullable(),
  locationLongitude: z.number().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ProjectCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ProjectCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => ProjectCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectPropertyCreateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectPropertyInputSchema),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutProjectPropertyInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutProjectPropertyInputSchema).optional()
}).strict();

export const ProjectPropertyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ProjectPropertyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ProjectPropertyCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => ProjectPropertyCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectPropertyValueCreateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutProjectPropertyValueInputSchema),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedOneWithoutProjectPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutProjectPropertyValueInputSchema)
}).strict();

export const ProjectPropertyValueUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  projectId: z.string(),
  projectPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyValueCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ProjectPropertyValueCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => ProjectPropertyValueCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskCreateWithoutUserInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => TaskCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskPropertyCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskPropertyInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskPropertyInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskPropertyInputSchema).optional()
}).strict();

export const TaskPropertyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskPropertyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TaskPropertyCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => TaskPropertyCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskPropertyValueCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutTaskPropertyValueInputSchema),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedOneWithoutTaskPropertyValueInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskPropertyValueInputSchema)
}).strict();

export const TaskPropertyValueUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  taskPropertyId: z.string(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskPropertyValueCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskPropertyValueCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => TaskPropertyValueCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskStatusCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusCreateWithoutUserInput> = z.object({
  id: z.string(),
  displayOrder: z.number(),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTaskStatusInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskStatusInputSchema)
}).strict();

export const TaskStatusUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  displayOrder: z.number(),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskStatusInputSchema).optional()
}).strict();

export const TaskStatusCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TaskStatusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskStatusCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TaskStatusCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => TaskStatusCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantCreateWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantCreateWithoutUser_Tenant_createdByToUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutUser_Tenant_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema) ]),
}).strict();

export const TenantCreateManyUser_Tenant_createdByToUserInputEnvelopeSchema: z.ZodType<Prisma.TenantCreateManyUser_Tenant_createdByToUserInputEnvelope> = z.object({
  data: z.lazy(() => TenantCreateManyUser_Tenant_createdByToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserCreateWithoutUser_TenantUser_createdByToUserInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTenantUserInputSchema),
  User_TenantUser_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutTenantUser_TenantUser_userIdToUserInputSchema).optional()
}).strict();

export const TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  userId: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserCreateOrConnectWithoutUser_TenantUser_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema) ]),
}).strict();

export const TenantUserCreateManyUser_TenantUser_createdByToUserInputEnvelopeSchema: z.ZodType<Prisma.TenantUserCreateManyUser_TenantUser_createdByToUserInputEnvelope> = z.object({
  data: z.lazy(() => TenantUserCreateManyUser_TenantUser_createdByToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserCreateWithoutUser_TenantUser_userIdToUserInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_TenantUser_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenantUser_TenantUser_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTenantUserInputSchema)
}).strict();

export const TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserCreateOrConnectWithoutUser_TenantUser_userIdToUserInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema) ]),
}).strict();

export const TenantUserCreateManyUser_TenantUser_userIdToUserInputEnvelopeSchema: z.ZodType<Prisma.TenantUserCreateManyUser_TenantUser_userIdToUserInputEnvelope> = z.object({
  data: z.lazy(() => TenantUserCreateManyUser_TenantUser_userIdToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TimeBlockCreateWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockCreateWithoutUserInput> = z.object({
  id: z.string(),
  duration: z.number().optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().optional().nullable(),
  timerStartLongitude: z.number().optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().optional().nullable(),
  timerEndLongitude: z.number().optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedOneWithoutTimeBlockInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTimeBlockInputSchema)
}).strict();

export const TimeBlockUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  duration: z.number().optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().optional().nullable(),
  timerStartLongitude: z.number().optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().optional().nullable(),
  timerEndLongitude: z.number().optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  dailyLogItemId: z.string(),
  tenantId: z.string()
}).strict();

export const TimeBlockCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TimeBlockCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TimeBlockCreateManyUserInputEnvelope> = z.object({
  data: z.lazy(() => TimeBlockCreateManyUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantCreateWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.TenantCreateWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_User_currentTenantIdToTenantInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_User_currentTenantIdToTenantInputSchema) ]),
}).strict();

export const ImageCreateWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.ImageCreateWithoutUser_User_imageIdToImageInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  File: z.lazy(() => FileCreateNestedManyWithoutImageInputSchema).optional(),
  User_Image_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutImage_Image_createdByToUserInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutImageInputSchema)
}).strict();

export const ImageUncheckedCreateWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.ImageUncheckedCreateWithoutUser_User_imageIdToImageInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutImageInputSchema).optional()
}).strict();

export const ImageCreateOrConnectWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.ImageCreateOrConnectWithoutUser_User_imageIdToImageInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_User_imageIdToImageInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_User_imageIdToImageInputSchema) ]),
}).strict();

export const UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskCreateWithoutUser_UserTask_createdByToUserInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutUserTaskInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutUserTaskInputSchema),
  User_UserTask_userIdToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_userIdToUserInputSchema)
}).strict();

export const UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string(),
  userId: z.string()
}).strict();

export const UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskCreateOrConnectWithoutUser_UserTask_createdByToUserInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema) ]),
}).strict();

export const UserTaskCreateManyUser_UserTask_createdByToUserInputEnvelopeSchema: z.ZodType<Prisma.UserTaskCreateManyUser_UserTask_createdByToUserInputEnvelope> = z.object({
  data: z.lazy(() => UserTaskCreateManyUser_UserTask_createdByToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskCreateWithoutUser_UserTask_userIdToUserInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutUserTask_UserTask_createdByToUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutUserTaskInputSchema),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutUserTaskInputSchema)
}).strict();

export const UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskCreateOrConnectWithoutUser_UserTask_userIdToUserInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema) ]),
}).strict();

export const UserTaskCreateManyUser_UserTask_userIdToUserInputEnvelopeSchema: z.ZodType<Prisma.UserTaskCreateManyUser_UserTask_userIdToUserInputEnvelope> = z.object({
  data: z.lazy(() => UserTaskCreateManyUser_UserTask_userIdToUserInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ApiKeyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ApiKeyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ApiKeyUpdateWithoutUserInputSchema),z.lazy(() => ApiKeyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ApiKeyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ApiKeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ApiKeyUpdateManyMutationInputSchema),z.lazy(() => ApiKeyUncheckedUpdateManyWithoutApiKeyInputSchema) ]),
}).strict();

export const DailyLogUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DailyLogUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyLogUpdateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogCreateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DailyLogUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DailyLogUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyLogUpdateWithoutUserInputSchema),z.lazy(() => DailyLogUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const DailyLogUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.DailyLogUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyLogUpdateManyMutationInputSchema),z.lazy(() => DailyLogUncheckedUpdateManyWithoutDailyLogInputSchema) ]),
}).strict();

export const DailyLogItemUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DailyLogItemUpdateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => DailyLogItemCreateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DailyLogItemUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateWithoutUserInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const DailyLogItemUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => DailyLogItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DailyLogItemUpdateManyMutationInputSchema),z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogItemInputSchema) ]),
}).strict();

export const EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_createdByToUserInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutUser_Equipment_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_createdByToUserInputSchema) ]),
}).strict();

export const EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_createdByToUserInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateWithoutUser_Equipment_createdByToUserInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutUser_Equipment_createdByToUserInputSchema) ]),
}).strict();

export const EquipmentUpdateManyWithWhereWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithWhereWithoutUser_Equipment_createdByToUserInput> = z.object({
  where: z.lazy(() => EquipmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateManyMutationInputSchema),z.lazy(() => EquipmentUncheckedUpdateManyWithoutEquipment_Equipment_createdByToUserInputSchema) ]),
}).strict();

export const EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUpsertWithWhereUniqueWithoutUser_Equipment_userIdToUserInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutUser_Equipment_userIdToUserInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutUser_Equipment_userIdToUserInputSchema) ]),
}).strict();

export const EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUpdateWithWhereUniqueWithoutUser_Equipment_userIdToUserInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateWithoutUser_Equipment_userIdToUserInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutUser_Equipment_userIdToUserInputSchema) ]),
}).strict();

export const EquipmentUpdateManyWithWhereWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithWhereWithoutUser_Equipment_userIdToUserInput> = z.object({
  where: z.lazy(() => EquipmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateManyMutationInputSchema),z.lazy(() => EquipmentUncheckedUpdateManyWithoutEquipment_Equipment_userIdToUserInputSchema) ]),
}).strict();

export const EquipmentPropertyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentPropertyUpdateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentPropertyCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EquipmentPropertyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyUpdateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const EquipmentPropertyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyUpdateManyMutationInputSchema),z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutEquipmentPropertyInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentPropertyValueCreateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateWithoutUserInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const EquipmentPropertyValueUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => EquipmentPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentPropertyValueUpdateManyMutationInputSchema),z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyValueInputSchema) ]),
}).strict();

export const FeedbackUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FeedbackUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FeedbackWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeedbackUpdateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => FeedbackCreateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FeedbackUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FeedbackUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FeedbackWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeedbackUpdateWithoutUserInputSchema),z.lazy(() => FeedbackUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const FeedbackUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.FeedbackUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => FeedbackScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeedbackUpdateManyMutationInputSchema),z.lazy(() => FeedbackUncheckedUpdateManyWithoutFeedbackInputSchema) ]),
}).strict();

export const FileUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutUserInputSchema),z.lazy(() => FileUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutUserInputSchema),z.lazy(() => FileUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutFileInputSchema) ]),
}).strict();

export const FilePropertyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FilePropertyUpdateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => FilePropertyCreateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FilePropertyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FilePropertyUpdateWithoutUserInputSchema),z.lazy(() => FilePropertyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const FilePropertyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FilePropertyUpdateManyMutationInputSchema),z.lazy(() => FilePropertyUncheckedUpdateManyWithoutFilePropertyInputSchema) ]),
}).strict();

export const FilePropertyValueUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => FilePropertyValueCreateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateWithoutUserInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const FilePropertyValueUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => FilePropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FilePropertyValueUpdateManyMutationInputSchema),z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFilePropertyValueInputSchema) ]),
}).strict();

export const ImageUpsertWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUpsertWithWhereUniqueWithoutUser_Image_createdByToUserInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ImageUpdateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutUser_Image_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_Image_createdByToUserInputSchema) ]),
}).strict();

export const ImageUpdateWithWhereUniqueWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUpdateWithWhereUniqueWithoutUser_Image_createdByToUserInput> = z.object({
  where: z.lazy(() => ImageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ImageUpdateWithoutUser_Image_createdByToUserInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutUser_Image_createdByToUserInputSchema) ]),
}).strict();

export const ImageUpdateManyWithWhereWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUpdateManyWithWhereWithoutUser_Image_createdByToUserInput> = z.object({
  where: z.lazy(() => ImageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ImageUpdateManyMutationInputSchema),z.lazy(() => ImageUncheckedUpdateManyWithoutImage_Image_createdByToUserInputSchema) ]),
}).strict();

export const LocationEntryUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LocationEntryUpdateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => LocationEntryCreateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const LocationEntryUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => LocationEntryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LocationEntryUpdateWithoutUserInputSchema),z.lazy(() => LocationEntryUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const LocationEntryUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => LocationEntryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LocationEntryUpdateManyMutationInputSchema),z.lazy(() => LocationEntryUncheckedUpdateManyWithoutLocationEntryInputSchema) ]),
}).strict();

export const ProjectUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ProjectUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ProjectUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ProjectUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutUserInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ProjectUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateManyMutationInputSchema),z.lazy(() => ProjectUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ProjectPropertyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectPropertyUpdateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectPropertyCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ProjectPropertyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyUpdateWithoutUserInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ProjectPropertyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyUpdateManyMutationInputSchema),z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutProjectPropertyInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectPropertyValueCreateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateWithoutUserInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ProjectPropertyValueUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ProjectPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectPropertyValueUpdateManyMutationInputSchema),z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyValueInputSchema) ]),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutUserInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutUserInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const TaskPropertyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskPropertyUpdateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TaskPropertyCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskPropertyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyUpdateWithoutUserInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TaskPropertyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyUpdateManyMutationInputSchema),z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTaskPropertyInputSchema) ]),
}).strict();

export const TaskPropertyValueUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TaskPropertyValueCreateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyValueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateWithoutUserInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TaskPropertyValueUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TaskPropertyValueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskPropertyValueUpdateManyMutationInputSchema),z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyValueInputSchema) ]),
}).strict();

export const TaskStatusUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskStatusWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskStatusUpdateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TaskStatusCreateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskStatusUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskStatusWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskStatusUpdateWithoutUserInputSchema),z.lazy(() => TaskStatusUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TaskStatusUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TaskStatusScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskStatusUpdateManyMutationInputSchema),z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTaskStatusInputSchema) ]),
}).strict();

export const TenantUpsertWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUpsertWithWhereUniqueWithoutUser_Tenant_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TenantUpdateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUser_Tenant_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_Tenant_createdByToUserInputSchema) ]),
}).strict();

export const TenantUpdateWithWhereUniqueWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUpdateWithWhereUniqueWithoutUser_Tenant_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TenantUpdateWithoutUser_Tenant_createdByToUserInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUser_Tenant_createdByToUserInputSchema) ]),
}).strict();

export const TenantUpdateManyWithWhereWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUpdateManyWithWhereWithoutUser_Tenant_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TenantUpdateManyMutationInputSchema),z.lazy(() => TenantUncheckedUpdateManyWithoutTenant_Tenant_createdByToUserInputSchema) ]),
}).strict();

export const TenantScalarWhereInputSchema: z.ZodType<Prisma.TenantScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantScalarWhereInputSchema),z.lazy(() => TenantScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantScalarWhereInputSchema),z.lazy(() => TenantScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  settings: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TenantUserUpdateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedUpdateWithoutUser_TenantUser_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_createdByToUserInputSchema) ]),
}).strict();

export const TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TenantUserUpdateWithoutUser_TenantUser_createdByToUserInputSchema),z.lazy(() => TenantUserUncheckedUpdateWithoutUser_TenantUser_createdByToUserInputSchema) ]),
}).strict();

export const TenantUserUpdateManyWithWhereWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUpdateManyWithWhereWithoutUser_TenantUser_createdByToUserInput> = z.object({
  where: z.lazy(() => TenantUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TenantUserUpdateManyMutationInputSchema),z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantUser_TenantUser_createdByToUserInputSchema) ]),
}).strict();

export const TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUpsertWithWhereUniqueWithoutUser_TenantUser_userIdToUserInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TenantUserUpdateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedUpdateWithoutUser_TenantUser_userIdToUserInputSchema) ]),
  create: z.union([ z.lazy(() => TenantUserCreateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedCreateWithoutUser_TenantUser_userIdToUserInputSchema) ]),
}).strict();

export const TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUpdateWithWhereUniqueWithoutUser_TenantUser_userIdToUserInput> = z.object({
  where: z.lazy(() => TenantUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TenantUserUpdateWithoutUser_TenantUser_userIdToUserInputSchema),z.lazy(() => TenantUserUncheckedUpdateWithoutUser_TenantUser_userIdToUserInputSchema) ]),
}).strict();

export const TenantUserUpdateManyWithWhereWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUpdateManyWithWhereWithoutUser_TenantUser_userIdToUserInput> = z.object({
  where: z.lazy(() => TenantUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TenantUserUpdateManyMutationInputSchema),z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantUser_TenantUser_userIdToUserInputSchema) ]),
}).strict();

export const TimeBlockUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeBlockUpdateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TimeBlockCreateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TimeBlockUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TimeBlockWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeBlockUpdateWithoutUserInputSchema),z.lazy(() => TimeBlockUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TimeBlockUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TimeBlockScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeBlockUpdateManyMutationInputSchema),z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTimeBlockInputSchema) ]),
}).strict();

export const TenantUpsertWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.TenantUpsertWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutUser_User_currentTenantIdToTenantInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUser_User_currentTenantIdToTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutUser_User_currentTenantIdToTenantInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUser_User_currentTenantIdToTenantInputSchema) ]),
}).strict();

export const TenantUpdateWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.TenantUpdateWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const ImageUpsertWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.ImageUpsertWithoutUser_User_imageIdToImageInput> = z.object({
  update: z.union([ z.lazy(() => ImageUpdateWithoutUser_User_imageIdToImageInputSchema),z.lazy(() => ImageUncheckedUpdateWithoutUser_User_imageIdToImageInputSchema) ]),
  create: z.union([ z.lazy(() => ImageCreateWithoutUser_User_imageIdToImageInputSchema),z.lazy(() => ImageUncheckedCreateWithoutUser_User_imageIdToImageInputSchema) ]),
}).strict();

export const ImageUpdateWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.ImageUpdateWithoutUser_User_imageIdToImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutImageNestedInputSchema).optional(),
  User_Image_createdByToUser: z.lazy(() => UserUpdateOneWithoutImage_Image_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutImageNestedInputSchema).optional()
}).strict();

export const ImageUncheckedUpdateWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateWithoutUser_User_imageIdToImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutImageNestedInputSchema).optional()
}).strict();

export const UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_createdByToUserInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserTaskUpdateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutUser_UserTask_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_createdByToUserInputSchema) ]),
}).strict();

export const UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_createdByToUserInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateWithoutUser_UserTask_createdByToUserInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutUser_UserTask_createdByToUserInputSchema) ]),
}).strict();

export const UserTaskUpdateManyWithWhereWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithWhereWithoutUser_UserTask_createdByToUserInput> = z.object({
  where: z.lazy(() => UserTaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateManyMutationInputSchema),z.lazy(() => UserTaskUncheckedUpdateManyWithoutUserTask_UserTask_createdByToUserInputSchema) ]),
}).strict();

export const UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUpsertWithWhereUniqueWithoutUser_UserTask_userIdToUserInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserTaskUpdateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutUser_UserTask_userIdToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserTaskCreateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedCreateWithoutUser_UserTask_userIdToUserInputSchema) ]),
}).strict();

export const UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUpdateWithWhereUniqueWithoutUser_UserTask_userIdToUserInput> = z.object({
  where: z.lazy(() => UserTaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateWithoutUser_UserTask_userIdToUserInputSchema),z.lazy(() => UserTaskUncheckedUpdateWithoutUser_UserTask_userIdToUserInputSchema) ]),
}).strict();

export const UserTaskUpdateManyWithWhereWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUpdateManyWithWhereWithoutUser_UserTask_userIdToUserInput> = z.object({
  where: z.lazy(() => UserTaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserTaskUpdateManyMutationInputSchema),z.lazy(() => UserTaskUncheckedUpdateManyWithoutUserTask_UserTask_userIdToUserInputSchema) ]),
}).strict();

export const UserCreateWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_userIdToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_createdByToUserInputSchema) ]),
}).strict();

export const TaskCreateWithoutUserTaskInputSchema: z.ZodType<Prisma.TaskCreateWithoutUserTaskInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTaskInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutTaskInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedOneWithoutOther_TaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskCreateNestedManyWithoutTaskInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedOneWithoutTaskInputSchema),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedOneWithoutTaskInputSchema).optional(),
  Tenant: z.lazy(() => TenantCreateNestedOneWithoutTaskInputSchema),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutUserTaskInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutUserTaskInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutUserTaskInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutUserTaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutUserTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserTaskInputSchema) ]),
}).strict();

export const TenantCreateWithoutUserTaskInputSchema: z.ZodType<Prisma.TenantCreateWithoutUserTaskInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutTenantInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserCreateNestedOneWithoutTenant_Tenant_createdByToUserInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutUserTaskInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutUserTaskInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenant_User_currentTenantIdToTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutUserTaskInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutUserTaskInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutUserTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUserTaskInputSchema) ]),
}).strict();

export const UserCreateWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantCreateNestedOneWithoutUser_User_currentTenantIdToTenantInputSchema),
  Image_User_imageIdToImage: z.lazy(() => ImageCreateNestedOneWithoutUser_User_imageIdToImageInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable(),
  currentTenantId: z.string(),
  ApiKey: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_createdByToUserInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutUser_Equipment_userIdToUserInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  File: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedCreateNestedManyWithoutUser_Image_createdByToUserInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedCreateNestedManyWithoutUser_Tenant_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_createdByToUserInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedCreateNestedManyWithoutUser_TenantUser_userIdToUserInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedCreateNestedManyWithoutUser_UserTask_createdByToUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_userIdToUserInputSchema) ]),
}).strict();

export const UserUpsertWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserTask_UserTask_createdByToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserTask_UserTask_createdByToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_createdByToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_createdByToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithoutUserTaskInputSchema: z.ZodType<Prisma.TaskUpsertWithoutUserTaskInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutUserTaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutUserTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutUserTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserTaskInputSchema) ]),
}).strict();

export const TaskUpdateWithoutUserTaskInputSchema: z.ZodType<Prisma.TaskUpdateWithoutUserTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutUserTaskInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutUserTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutUserTaskInputSchema: z.ZodType<Prisma.TenantUpsertWithoutUserTaskInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutUserTaskInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUserTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutUserTaskInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUserTaskInputSchema) ]),
}).strict();

export const TenantUpdateWithoutUserTaskInputSchema: z.ZodType<Prisma.TenantUpdateWithoutUserTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_Tenant_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenant_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutUserTaskInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutUserTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserTask_UserTask_userIdToUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserTask_UserTask_userIdToUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserTask_UserTask_userIdToUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserTask_UserTask_userIdToUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional()
}).strict();

export const DailyLogItemCreateManyDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemCreateManyDailyLogInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable()
}).strict();

export const FileCreateManyDailyLogInputSchema: z.ZodType<Prisma.FileCreateManyDailyLogInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable()
}).strict();

export const LocationEntryCreateManyDailyLogInputSchema: z.ZodType<Prisma.LocationEntryCreateManyDailyLogInput> = z.object({
  id: z.string(),
  latitude: z.number().or(z.nan()).optional().nullable(),
  longitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const DailyLogItemUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateManyWithoutDailyLogItemInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateManyWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FileUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.FileUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFileNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneWithoutFileNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateManyWithoutFileInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LocationEntryUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutLocationEntryNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutLocationEntryNestedInputSchema).optional()
}).strict();

export const LocationEntryUncheckedUpdateWithoutDailyLogInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LocationEntryUncheckedUpdateManyWithoutLocationEntryInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateManyWithoutLocationEntryInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeBlockCreateManyDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockCreateManyDailyLogItemInput> = z.object({
  id: z.string(),
  duration: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().or(z.nan()).optional().nullable(),
  timerStartLongitude: z.number().or(z.nan()).optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().or(z.nan()).optional().nullable(),
  timerEndLongitude: z.number().or(z.nan()).optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string(),
  tenantId: z.string()
}).strict();

export const TimeBlockUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional()
}).strict();

export const TimeBlockUncheckedUpdateWithoutDailyLogItemInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateWithoutDailyLogItemInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeBlockUncheckedUpdateManyWithoutTimeBlockInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateManyWithoutTimeBlockInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyLogItemCreateManyEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemCreateManyEquipmentInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueCreateManyEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyEquipmentInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const DailyLogItemUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUncheckedUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipmentPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyValueInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipmentPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyValueCreateManyEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyEquipmentPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentId: z.string(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueUpdateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithoutEquipmentPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUncheckedUpdateWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateWithoutEquipmentPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueCreateManyFileInputSchema: z.ZodType<Prisma.FilePropertyValueCreateManyFileInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  propertyId: z.string(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueUpdateWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFilePropertyValueNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUncheckedUpdateWithoutFileInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateWithoutFileInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  propertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueUncheckedUpdateManyWithoutFilePropertyValueInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateManyWithoutFilePropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  propertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FilePropertyValueCreateManyFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueCreateManyFilePropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  fileId: z.string(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueUpdateWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithoutFilePropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFilePropertyValueNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUncheckedUpdateWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateWithoutFilePropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileCreateManyImageInputSchema: z.ZodType<Prisma.FileCreateManyImageInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable()
}).strict();

export const UserCreateManyImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserCreateManyImage_User_imageIdToImageInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  currentTenantId: z.string()
}).strict();

export const FileUpdateWithoutImageInputSchema: z.ZodType<Prisma.FileUpdateWithoutImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFileNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneWithoutFileNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneWithoutFileNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutImageInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const UserUpdateWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUpdateWithoutImage_User_imageIdToImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_User_currentTenantIdToTenant: z.lazy(() => TenantUpdateOneRequiredWithoutUser_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutImage_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutImage_User_imageIdToImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutUser_User_imageIdToImageInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutUser_User_imageIdToImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentTenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileCreateManyProjectInputSchema: z.ZodType<Prisma.FileCreateManyProjectInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  dailyLogId: z.string().optional().nullable()
}).strict();

export const ProjectPropertyValueCreateManyProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyProjectInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskCreateManyProjectInputSchema: z.ZodType<Prisma.TaskCreateManyProjectInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable()
}).strict();

export const FileUpdateWithoutProjectInputSchema: z.ZodType<Prisma.FileUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFileNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneWithoutFileNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dailyLogId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectPropertyValueNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyValueInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectPropertyValueCreateManyProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyProjectPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyValueUpdateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithoutProjectPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectPropertyValueNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUncheckedUpdateWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateWithoutProjectPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyLogItemCreateManyTaskInputSchema: z.ZodType<Prisma.DailyLogItemCreateManyTaskInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable()
}).strict();

export const TaskCreateManyTaskInputSchema: z.ZodType<Prisma.TaskCreateManyTaskInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  taskStatusId: z.string().optional().nullable()
}).strict();

export const TaskPropertyValueCreateManyTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyTaskInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const UserTaskCreateManyTaskInputSchema: z.ZodType<Prisma.UserTaskCreateManyTaskInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string(),
  userId: z.string()
}).strict();

export const DailyLogItemUpdateWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const TaskUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutOther_TaskInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutOther_TaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskPropertyValueUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskPropertyValueNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyValueInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyValueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskUpdateWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserUpdateOneWithoutUserTask_UserTask_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional(),
  User_UserTask_userIdToUser: z.lazy(() => UserUpdateOneRequiredWithoutUserTask_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserTaskUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskUncheckedUpdateManyWithoutUserTaskInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyWithoutUserTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskPropertyValueCreateManyTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyTaskPropertyInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskPropertyValueUpdateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithoutTaskPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskPropertyValueNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUncheckedUpdateWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateWithoutTaskPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateManyTaskStatusInputSchema: z.ZodType<Prisma.TaskCreateManyTaskStatusInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable()
}).strict();

export const TaskUpdateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskUpdateWithoutTaskStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutTaskStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const ApiKeyCreateManyTenantInputSchema: z.ZodType<Prisma.ApiKeyCreateManyTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  userId: z.string().optional().nullable()
}).strict();

export const DailyLogCreateManyTenantInputSchema: z.ZodType<Prisma.DailyLogCreateManyTenantInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number().int().gte(-2147483648).lte(2147483647),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const DailyLogItemCreateManyTenantInputSchema: z.ZodType<Prisma.DailyLogItemCreateManyTenantInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  equipmentId: z.string().optional().nullable()
}).strict();

export const EquipmentCreateManyTenantInputSchema: z.ZodType<Prisma.EquipmentCreateManyTenantInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  userId: z.string().optional().nullable()
}).strict();

export const EquipmentPropertyCreateManyTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateManyTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const EquipmentPropertyValueCreateManyTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  equipmentId: z.string(),
  equipmentPropertyId: z.string()
}).strict();

export const FeedbackCreateManyTenantInputSchema: z.ZodType<Prisma.FeedbackCreateManyTenantInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const FileCreateManyTenantInputSchema: z.ZodType<Prisma.FileCreateManyTenantInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable()
}).strict();

export const FilePropertyCreateManyTenantInputSchema: z.ZodType<Prisma.FilePropertyCreateManyTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const FilePropertyValueCreateManyTenantInputSchema: z.ZodType<Prisma.FilePropertyValueCreateManyTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  fileId: z.string(),
  propertyId: z.string()
}).strict();

export const ImageCreateManyTenantInputSchema: z.ZodType<Prisma.ImageCreateManyTenantInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const LocationEntryCreateManyTenantInputSchema: z.ZodType<Prisma.LocationEntryCreateManyTenantInput> = z.object({
  id: z.string(),
  latitude: z.number().or(z.nan()).optional().nullable(),
  longitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  dailyLogId: z.string()
}).strict();

export const ProjectCreateManyTenantInputSchema: z.ZodType<Prisma.ProjectCreateManyTenantInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().or(z.nan()).optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const ProjectPropertyCreateManyTenantInputSchema: z.ZodType<Prisma.ProjectPropertyCreateManyTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const ProjectPropertyValueCreateManyTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  projectPropertyId: z.string()
}).strict();

export const TaskCreateManyTenantInputSchema: z.ZodType<Prisma.TaskCreateManyTenantInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  projectId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable()
}).strict();

export const TaskPropertyCreateManyTenantInputSchema: z.ZodType<Prisma.TaskPropertyCreateManyTenantInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const TaskPropertyValueCreateManyTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyTenantInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskPropertyId: z.string(),
  taskId: z.string()
}).strict();

export const TaskStatusCreateManyTenantInputSchema: z.ZodType<Prisma.TaskStatusCreateManyTenantInput> = z.object({
  id: z.string(),
  displayOrder: z.number().int().gte(-2147483648).lte(2147483647),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const TenantUserCreateManyTenantInputSchema: z.ZodType<Prisma.TenantUserCreateManyTenantInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  userId: z.string().optional().nullable()
}).strict();

export const TimeBlockCreateManyTenantInputSchema: z.ZodType<Prisma.TimeBlockCreateManyTenantInput> = z.object({
  id: z.string(),
  duration: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().or(z.nan()).optional().nullable(),
  timerStartLongitude: z.number().or(z.nan()).optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().or(z.nan()).optional().nullable(),
  timerEndLongitude: z.number().or(z.nan()).optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string(),
  dailyLogItemId: z.string()
}).strict();

export const UserCreateManyTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserCreateManyTenant_User_currentTenantIdToTenantInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  preferredLanguage: z.string().optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string().optional().nullable()
}).strict();

export const UserTaskCreateManyTenantInputSchema: z.ZodType<Prisma.UserTaskCreateManyTenantInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  userId: z.string()
}).strict();

export const ApiKeyUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  User: z.lazy(() => UserUpdateOneWithoutApiKeyNestedInputSchema).optional()
}).strict();

export const ApiKeyUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ApiKeyUncheckedUpdateManyWithoutApiKeyInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyWithoutApiKeyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const DailyLogUpdateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogUncheckedUpdateManyWithoutDailyLogInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateManyWithoutDailyLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const DailyLogItemUpdateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const EquipmentUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_createdByToUserNestedInputSchema).optional(),
  User_Equipment_userIdToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateManyWithoutEquipmentInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutEquipmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentPropertyUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutEquipmentPropertyNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentPropertyNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedUpdateManyWithoutEquipmentPropertyInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateManyWithoutEquipmentPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentPropertyValueUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFeedbackNestedInputSchema).optional()
}).strict();

export const FeedbackUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FeedbackUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeedbackUncheckedUpdateManyWithoutFeedbackInputSchema: z.ZodType<Prisma.FeedbackUncheckedUpdateManyWithoutFeedbackInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FileUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FileUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFileNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneWithoutFileNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneWithoutFileNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FilePropertyUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFilePropertyNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFilePropertyNestedInputSchema).optional()
}).strict();

export const FilePropertyUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFilePropertyNestedInputSchema).optional()
}).strict();

export const FilePropertyUncheckedUpdateManyWithoutFilePropertyInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateManyWithoutFilePropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FilePropertyValueUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutFilePropertyValueNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImageUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ImageUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutImageNestedInputSchema).optional(),
  User_Image_createdByToUser: z.lazy(() => UserUpdateOneWithoutImage_Image_createdByToUserNestedInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ImageUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutImageNestedInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ImageUncheckedUpdateManyWithoutImageInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateManyWithoutImageInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LocationEntryUpdateWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutLocationEntryNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutLocationEntryNestedInputSchema).optional()
}).strict();

export const LocationEntryUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutProjectNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectPropertyUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectPropertyNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectPropertyNestedInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyNestedInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedUpdateManyWithoutProjectPropertyInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateManyWithoutProjectPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectPropertyValueUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutProjectPropertyValueNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskPropertyUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskPropertyNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskPropertyNestedInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyNestedInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedUpdateManyWithoutTaskPropertyInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateManyWithoutTaskPropertyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskPropertyValueUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutTaskPropertyValueNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskStatusUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Task: z.lazy(() => TaskUpdateManyWithoutTaskStatusNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneWithoutTaskStatusNestedInputSchema).optional()
}).strict();

export const TaskStatusUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskStatusNestedInputSchema).optional()
}).strict();

export const TaskStatusUncheckedUpdateManyWithoutTaskStatusInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateManyWithoutTaskStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUserUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_TenantUser_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenantUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  User_TenantUser_userIdToUser: z.lazy(() => UserUpdateOneWithoutTenantUser_TenantUser_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUserUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUserUncheckedUpdateManyWithoutTenantUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateManyWithoutTenantUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TimeBlockUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional()
}).strict();

export const TimeBlockUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dailyLogItemId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUpdateWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_User_imageIdToImage: z.lazy(() => ImageUpdateOneWithoutUser_User_imageIdToImageNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTenant_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTenant_User_currentTenantIdToTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Equipment_Equipment_createdByToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_createdByToUserNestedInputSchema).optional(),
  Equipment_Equipment_userIdToUser: z.lazy(() => EquipmentUncheckedUpdateManyWithoutUser_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Image_Image_createdByToUser: z.lazy(() => ImageUncheckedUpdateManyWithoutUser_Image_createdByToUserNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Tenant_Tenant_createdByToUser: z.lazy(() => TenantUncheckedUpdateManyWithoutUser_Tenant_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_createdByToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  TenantUser_TenantUser_userIdToUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutUser_TenantUser_userIdToUserNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserTask_UserTask_createdByToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_createdByToUserNestedInputSchema).optional(),
  UserTask_UserTask_userIdToUser: z.lazy(() => UserTaskUncheckedUpdateManyWithoutUser_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutUser_User_currentTenantIdToTenantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutUser_User_currentTenantIdToTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preferredLanguage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserTaskUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserUpdateOneWithoutUserTask_UserTask_createdByToUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional(),
  User_UserTask_userIdToUser: z.lazy(() => UserUpdateOneRequiredWithoutUserTask_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserTaskUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyCreateManyUserInputSchema: z.ZodType<Prisma.ApiKeyCreateManyUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  tenantId: z.string()
}).strict();

export const DailyLogCreateManyUserInputSchema: z.ZodType<Prisma.DailyLogCreateManyUserInput> = z.object({
  id: z.string(),
  date: z.coerce.date().optional().nullable(),
  status: z.string(),
  note: z.string(),
  rating: z.number().int().gte(-2147483648).lte(2147483647),
  ratingNote: z.string(),
  managerNote: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const DailyLogItemCreateManyUserInputSchema: z.ZodType<Prisma.DailyLogItemCreateManyUserInput> = z.object({
  id: z.string(),
  note: z.string().optional().nullable(),
  isNoteVisible: z.boolean().optional().nullable(),
  itemType: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  taskId: z.string().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string(),
  equipmentId: z.string().optional().nullable()
}).strict();

export const EquipmentCreateManyUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentCreateManyUser_Equipment_createdByToUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string(),
  userId: z.string().optional().nullable()
}).strict();

export const EquipmentCreateManyUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentCreateManyUser_Equipment_userIdToUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyCreateManyUserInputSchema: z.ZodType<Prisma.EquipmentPropertyCreateManyUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const EquipmentPropertyValueCreateManyUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  equipmentId: z.string(),
  equipmentPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const FeedbackCreateManyUserInputSchema: z.ZodType<Prisma.FeedbackCreateManyUserInput> = z.object({
  id: z.string(),
  text: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const FileCreateManyUserInputSchema: z.ZodType<Prisma.FileCreateManyUserInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  name: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  imageId: z.string(),
  tenantId: z.string(),
  projectId: z.string().optional().nullable(),
  dailyLogId: z.string().optional().nullable()
}).strict();

export const FilePropertyCreateManyUserInputSchema: z.ZodType<Prisma.FilePropertyCreateManyUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const FilePropertyValueCreateManyUserInputSchema: z.ZodType<Prisma.FilePropertyValueCreateManyUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  fileId: z.string(),
  propertyId: z.string(),
  tenantId: z.string()
}).strict();

export const ImageCreateManyUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageCreateManyUser_Image_createdByToUserInput> = z.object({
  id: z.string(),
  bucketId: z.string(),
  blurhash: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const LocationEntryCreateManyUserInputSchema: z.ZodType<Prisma.LocationEntryCreateManyUserInput> = z.object({
  id: z.string(),
  latitude: z.number().or(z.nan()).optional().nullable(),
  longitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  dailyLogId: z.string(),
  tenantId: z.string()
}).strict();

export const ProjectCreateManyUserInputSchema: z.ZodType<Prisma.ProjectCreateManyUserInput> = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  progress: z.number().or(z.nan()).optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  locationLabel: z.string().optional().nullable(),
  locationLatitude: z.number().or(z.nan()).optional().nullable(),
  locationLongitude: z.number().or(z.nan()).optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyCreateManyUserInputSchema: z.ZodType<Prisma.ProjectPropertyCreateManyUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const ProjectPropertyValueCreateManyUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  projectId: z.string(),
  projectPropertyId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskCreateManyUserInputSchema: z.ZodType<Prisma.TaskCreateManyUserInput> = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  statusId: z.string().optional().nullable(),
  systemStatusId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  projectId: z.string(),
  tenantId: z.string(),
  parentId: z.string().optional().nullable(),
  taskStatusId: z.string().optional().nullable()
}).strict();

export const TaskPropertyCreateManyUserInputSchema: z.ZodType<Prisma.TaskPropertyCreateManyUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().int().gte(-2147483648).lte(2147483647),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TaskPropertyValueCreateManyUserInputSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyUserInput> = z.object({
  id: z.string(),
  value: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  taskPropertyId: z.string(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const TaskStatusCreateManyUserInputSchema: z.ZodType<Prisma.TaskStatusCreateManyUserInput> = z.object({
  id: z.string(),
  displayOrder: z.number().int().gte(-2147483648).lte(2147483647),
  iconColor: z.string(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  deletedAt: z.coerce.date().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TenantCreateManyUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantCreateManyUser_Tenant_createdByToUserInput> = z.object({
  id: z.string(),
  name: z.string(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable()
}).strict();

export const TenantUserCreateManyUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserCreateManyUser_TenantUser_createdByToUserInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  userId: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TenantUserCreateManyUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserCreateManyUser_TenantUser_userIdToUserInput> = z.object({
  id: z.string(),
  userRole: z.string(),
  inviteEmail: z.string().optional().nullable(),
  inviteSentAt: z.coerce.date().optional().nullable(),
  inviteStatus: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  tenantId: z.string()
}).strict();

export const TimeBlockCreateManyUserInputSchema: z.ZodType<Prisma.TimeBlockCreateManyUserInput> = z.object({
  id: z.string(),
  duration: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  entryType: z.string(),
  rangeStartAt: z.coerce.date().optional().nullable(),
  rangeEndAt: z.coerce.date().optional().nullable(),
  timerStartLatitude: z.number().or(z.nan()).optional().nullable(),
  timerStartLongitude: z.number().or(z.nan()).optional().nullable(),
  timerStartAddress: z.string().optional().nullable(),
  timerStartAt: z.coerce.date().optional().nullable(),
  timerEndAt: z.coerce.date().optional().nullable(),
  timerEndLatitude: z.number().or(z.nan()).optional().nullable(),
  timerEndLongitude: z.number().or(z.nan()).optional().nullable(),
  timerEndAddress: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  dailyLogItemId: z.string(),
  tenantId: z.string()
}).strict();

export const UserTaskCreateManyUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskCreateManyUser_UserTask_createdByToUserInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string(),
  userId: z.string()
}).strict();

export const UserTaskCreateManyUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskCreateManyUser_UserTask_userIdToUserInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  createdBy: z.string().optional().nullable(),
  taskId: z.string(),
  tenantId: z.string()
}).strict();

export const ApiKeyUpdateWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutApiKeyNestedInputSchema).optional()
}).strict();

export const ApiKeyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DailyLogUpdateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ratingNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  managerNote: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutDailyLogNestedInputSchema).optional()
}).strict();

export const DailyLogItemUpdateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutDailyLogItemNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutDailyLogItemNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const DailyLogItemUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.DailyLogItemUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isNoteVisible: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  itemType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutDailyLogItemNestedInputSchema).optional()
}).strict();

export const EquipmentUpdateWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutUser_Equipment_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_userIdToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_userIdToUserNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutUser_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutUser_Equipment_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateManyWithoutEquipment_Equipment_createdByToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutEquipment_Equipment_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentUpdateWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutUser_Equipment_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  User_Equipment_createdByToUser: z.lazy(() => UserUpdateOneWithoutEquipment_Equipment_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutUser_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutUser_Equipment_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateManyWithoutEquipment_Equipment_userIdToUserInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutEquipment_Equipment_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentPropertyUpdateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentPropertyNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutEquipmentPropertyNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutEquipmentPropertyNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUpdateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEquipmentPropertyValueNestedInputSchema).optional()
}).strict();

export const EquipmentPropertyValueUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.EquipmentPropertyValueUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackUpdateWithoutUserInputSchema: z.ZodType<Prisma.FeedbackUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFeedbackNestedInputSchema).optional()
}).strict();

export const FeedbackUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.FeedbackUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUpdateWithoutUserInputSchema: z.ZodType<Prisma.FileUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLog: z.lazy(() => DailyLogUpdateOneWithoutFileNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneWithoutFileNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFileNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  imageId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFileNestedInputSchema).optional()
}).strict();

export const FilePropertyUpdateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilePropertyNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutFilePropertyNestedInputSchema).optional()
}).strict();

export const FilePropertyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutFilePropertyNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUpdateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilePropertyValueNestedInputSchema).optional()
}).strict();

export const FilePropertyValueUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.FilePropertyValueUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  propertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImageUpdateWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUpdateWithoutUser_Image_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutImageNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutImageNestedInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ImageUncheckedUpdateWithoutUser_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateWithoutUser_Image_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutImageNestedInputSchema).optional(),
  User_User_imageIdToImage: z.lazy(() => UserUncheckedUpdateManyWithoutImage_User_imageIdToImageNestedInputSchema).optional()
}).strict();

export const ImageUncheckedUpdateManyWithoutImage_Image_createdByToUserInputSchema: z.ZodType<Prisma.ImageUncheckedUpdateManyWithoutImage_Image_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bucketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  blurhash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LocationEntryUpdateWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLog: z.lazy(() => DailyLogUpdateOneRequiredWithoutLocationEntryNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutLocationEntryNestedInputSchema).optional()
}).strict();

export const LocationEntryUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.LocationEntryUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateWithoutUserInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  File: z.lazy(() => FileUpdateManyWithoutProjectNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  progress: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLabel: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locationLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectPropertyUpdateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectPropertyNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutProjectPropertyNestedInputSchema).optional()
}).strict();

export const ProjectPropertyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutProjectPropertyNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUpdateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProjectPropertyValueNestedInputSchema).optional()
}).strict();

export const ProjectPropertyValueUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ProjectPropertyValueUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTaskNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneWithoutOther_TaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUpdateManyWithoutTaskNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateOneWithoutTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  systemStatusId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskStatusId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  other_Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskPropertyUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskPropertyNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTaskPropertyNestedInputSchema).optional()
}).strict();

export const TaskPropertyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTaskPropertyNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskPropertyValueNestedInputSchema).optional()
}).strict();

export const TaskPropertyValueUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskPropertyValueUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskPropertyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskStatusUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Task: z.lazy(() => TaskUpdateManyWithoutTaskStatusNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTaskStatusNestedInputSchema).optional()
}).strict();

export const TaskStatusUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskStatusUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  displayOrder: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  iconColor: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTaskStatusNestedInputSchema).optional()
}).strict();

export const TenantUpdateWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUpdateWithoutUser_Tenant_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutUser_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutUser_Tenant_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ApiKey: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLog: z.lazy(() => DailyLogUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  DailyLogItem: z.lazy(() => DailyLogItemUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Equipment: z.lazy(() => EquipmentUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentProperty: z.lazy(() => EquipmentPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  EquipmentPropertyValue: z.lazy(() => EquipmentPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Feedback: z.lazy(() => FeedbackUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  File: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FileProperty: z.lazy(() => FilePropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  FilePropertyValue: z.lazy(() => FilePropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Image: z.lazy(() => ImageUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  LocationEntry: z.lazy(() => LocationEntryUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Project: z.lazy(() => ProjectUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectProperty: z.lazy(() => ProjectPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  ProjectPropertyValue: z.lazy(() => ProjectPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskProperty: z.lazy(() => TaskPropertyUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskPropertyValue: z.lazy(() => TaskPropertyValueUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TaskStatus: z.lazy(() => TaskStatusUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TenantUser: z.lazy(() => TenantUserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  TimeBlock: z.lazy(() => TimeBlockUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  User_User_currentTenantIdToTenant: z.lazy(() => UserUncheckedUpdateManyWithoutTenant_User_currentTenantIdToTenantNestedInputSchema).optional(),
  UserTask: z.lazy(() => UserTaskUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateManyWithoutTenant_Tenant_createdByToUserInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateManyWithoutTenant_Tenant_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantUserUpdateWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUpdateWithoutUser_TenantUser_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTenantUserNestedInputSchema).optional(),
  User_TenantUser_userIdToUser: z.lazy(() => UserUpdateOneWithoutTenantUser_TenantUser_userIdToUserNestedInputSchema).optional()
}).strict();

export const TenantUserUncheckedUpdateWithoutUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateWithoutUser_TenantUser_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUserUncheckedUpdateManyWithoutTenantUser_TenantUser_createdByToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateManyWithoutTenantUser_TenantUser_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUserUpdateWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUpdateWithoutUser_TenantUser_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_TenantUser_createdByToUser: z.lazy(() => UserUpdateOneWithoutTenantUser_TenantUser_createdByToUserNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTenantUserNestedInputSchema).optional()
}).strict();

export const TenantUserUncheckedUpdateWithoutUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateWithoutUser_TenantUser_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUserUncheckedUpdateManyWithoutTenantUser_TenantUser_userIdToUserInputSchema: z.ZodType<Prisma.TenantUserUncheckedUpdateManyWithoutTenantUser_TenantUser_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userRole: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inviteEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteSentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeBlockUpdateWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DailyLogItem: z.lazy(() => DailyLogItemUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutTimeBlockNestedInputSchema).optional()
}).strict();

export const TimeBlockUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TimeBlockUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entryType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rangeStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rangeEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerStartAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLatitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndLongitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timerEndAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dailyLogItemId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskUpdateWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUpdateWithoutUser_UserTask_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional(),
  User_UserTask_userIdToUser: z.lazy(() => UserUpdateOneRequiredWithoutUserTask_UserTask_userIdToUserNestedInputSchema).optional()
}).strict();

export const UserTaskUncheckedUpdateWithoutUser_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateWithoutUser_UserTask_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskUncheckedUpdateManyWithoutUserTask_UserTask_createdByToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyWithoutUserTask_UserTask_createdByToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskUpdateWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUpdateWithoutUser_UserTask_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User_UserTask_createdByToUser: z.lazy(() => UserUpdateOneWithoutUserTask_UserTask_createdByToUserNestedInputSchema).optional(),
  Task: z.lazy(() => TaskUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional(),
  Tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUserTaskNestedInputSchema).optional()
}).strict();

export const UserTaskUncheckedUpdateWithoutUser_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateWithoutUser_UserTask_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserTaskUncheckedUpdateManyWithoutUserTask_UserTask_userIdToUserInputSchema: z.ZodType<Prisma.UserTaskUncheckedUpdateManyWithoutUserTask_UserTask_userIdToUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const ApiKeyFindFirstArgsSchema: z.ZodType<Prisma.ApiKeyFindFirstArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ApiKeyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ApiKeyFindFirstArgs>

export const ApiKeyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ApiKeyFindFirstOrThrowArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ApiKeyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ApiKeyFindFirstOrThrowArgs>

export const ApiKeyFindManyArgsSchema: z.ZodType<Prisma.ApiKeyFindManyArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ApiKeyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ApiKeyFindManyArgs>

export const ApiKeyAggregateArgsSchema: z.ZodType<Prisma.ApiKeyAggregateArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ApiKeyAggregateArgs>

export const ApiKeyGroupByArgsSchema: z.ZodType<Prisma.ApiKeyGroupByArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithAggregationInputSchema.array(),ApiKeyOrderByWithAggregationInputSchema ]).optional(),
  by: ApiKeyScalarFieldEnumSchema.array(),
  having: ApiKeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ApiKeyGroupByArgs>

export const ApiKeyFindUniqueArgsSchema: z.ZodType<Prisma.ApiKeyFindUniqueArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ApiKeyFindUniqueArgs>

export const ApiKeyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ApiKeyFindUniqueOrThrowArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ApiKeyFindUniqueOrThrowArgs>

export const DailyLogFindFirstArgsSchema: z.ZodType<Prisma.DailyLogFindFirstArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  where: DailyLogWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogOrderByWithRelationInputSchema.array(),DailyLogOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: DailyLogScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.DailyLogFindFirstArgs>

export const DailyLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DailyLogFindFirstOrThrowArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  where: DailyLogWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogOrderByWithRelationInputSchema.array(),DailyLogOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: DailyLogScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.DailyLogFindFirstOrThrowArgs>

export const DailyLogFindManyArgsSchema: z.ZodType<Prisma.DailyLogFindManyArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  where: DailyLogWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogOrderByWithRelationInputSchema.array(),DailyLogOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: DailyLogScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.DailyLogFindManyArgs>

export const DailyLogAggregateArgsSchema: z.ZodType<Prisma.DailyLogAggregateArgs> = z.object({
  where: DailyLogWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogOrderByWithRelationInputSchema.array(),DailyLogOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.DailyLogAggregateArgs>

export const DailyLogGroupByArgsSchema: z.ZodType<Prisma.DailyLogGroupByArgs> = z.object({
  where: DailyLogWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogOrderByWithAggregationInputSchema.array(),DailyLogOrderByWithAggregationInputSchema ]).optional(),
  by: DailyLogScalarFieldEnumSchema.array(),
  having: DailyLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.DailyLogGroupByArgs>

export const DailyLogFindUniqueArgsSchema: z.ZodType<Prisma.DailyLogFindUniqueArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  where: DailyLogWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogFindUniqueArgs>

export const DailyLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DailyLogFindUniqueOrThrowArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  where: DailyLogWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogFindUniqueOrThrowArgs>

export const DailyLogItemFindFirstArgsSchema: z.ZodType<Prisma.DailyLogItemFindFirstArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  where: DailyLogItemWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogItemOrderByWithRelationInputSchema.array(),DailyLogItemOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: DailyLogItemScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemFindFirstArgs>

export const DailyLogItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DailyLogItemFindFirstOrThrowArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  where: DailyLogItemWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogItemOrderByWithRelationInputSchema.array(),DailyLogItemOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: DailyLogItemScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemFindFirstOrThrowArgs>

export const DailyLogItemFindManyArgsSchema: z.ZodType<Prisma.DailyLogItemFindManyArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  where: DailyLogItemWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogItemOrderByWithRelationInputSchema.array(),DailyLogItemOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: DailyLogItemScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemFindManyArgs>

export const DailyLogItemAggregateArgsSchema: z.ZodType<Prisma.DailyLogItemAggregateArgs> = z.object({
  where: DailyLogItemWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogItemOrderByWithRelationInputSchema.array(),DailyLogItemOrderByWithRelationInputSchema ]).optional(),
  cursor: DailyLogItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemAggregateArgs>

export const DailyLogItemGroupByArgsSchema: z.ZodType<Prisma.DailyLogItemGroupByArgs> = z.object({
  where: DailyLogItemWhereInputSchema.optional(),
  orderBy: z.union([ DailyLogItemOrderByWithAggregationInputSchema.array(),DailyLogItemOrderByWithAggregationInputSchema ]).optional(),
  by: DailyLogItemScalarFieldEnumSchema.array(),
  having: DailyLogItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemGroupByArgs>

export const DailyLogItemFindUniqueArgsSchema: z.ZodType<Prisma.DailyLogItemFindUniqueArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  where: DailyLogItemWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogItemFindUniqueArgs>

export const DailyLogItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DailyLogItemFindUniqueOrThrowArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  where: DailyLogItemWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogItemFindUniqueOrThrowArgs>

export const EquipmentFindFirstArgsSchema: z.ZodType<Prisma.EquipmentFindFirstArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentFindFirstArgs>

export const EquipmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EquipmentFindFirstOrThrowArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentFindFirstOrThrowArgs>

export const EquipmentFindManyArgsSchema: z.ZodType<Prisma.EquipmentFindManyArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentFindManyArgs>

export const EquipmentAggregateArgsSchema: z.ZodType<Prisma.EquipmentAggregateArgs> = z.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.EquipmentAggregateArgs>

export const EquipmentGroupByArgsSchema: z.ZodType<Prisma.EquipmentGroupByArgs> = z.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithAggregationInputSchema.array(),EquipmentOrderByWithAggregationInputSchema ]).optional(),
  by: EquipmentScalarFieldEnumSchema.array(),
  having: EquipmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.EquipmentGroupByArgs>

export const EquipmentFindUniqueArgsSchema: z.ZodType<Prisma.EquipmentFindUniqueArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentFindUniqueArgs>

export const EquipmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EquipmentFindUniqueOrThrowArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentFindUniqueOrThrowArgs>

export const EquipmentPropertyFindFirstArgsSchema: z.ZodType<Prisma.EquipmentPropertyFindFirstArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  where: EquipmentPropertyWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyOrderByWithRelationInputSchema.array(),EquipmentPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyFindFirstArgs>

export const EquipmentPropertyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EquipmentPropertyFindFirstOrThrowArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  where: EquipmentPropertyWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyOrderByWithRelationInputSchema.array(),EquipmentPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyFindFirstOrThrowArgs>

export const EquipmentPropertyFindManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyFindManyArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  where: EquipmentPropertyWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyOrderByWithRelationInputSchema.array(),EquipmentPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyFindManyArgs>

export const EquipmentPropertyAggregateArgsSchema: z.ZodType<Prisma.EquipmentPropertyAggregateArgs> = z.object({
  where: EquipmentPropertyWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyOrderByWithRelationInputSchema.array(),EquipmentPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyAggregateArgs>

export const EquipmentPropertyGroupByArgsSchema: z.ZodType<Prisma.EquipmentPropertyGroupByArgs> = z.object({
  where: EquipmentPropertyWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyOrderByWithAggregationInputSchema.array(),EquipmentPropertyOrderByWithAggregationInputSchema ]).optional(),
  by: EquipmentPropertyScalarFieldEnumSchema.array(),
  having: EquipmentPropertyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyGroupByArgs>

export const EquipmentPropertyFindUniqueArgsSchema: z.ZodType<Prisma.EquipmentPropertyFindUniqueArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  where: EquipmentPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyFindUniqueArgs>

export const EquipmentPropertyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EquipmentPropertyFindUniqueOrThrowArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  where: EquipmentPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyFindUniqueOrThrowArgs>

export const EquipmentPropertyValueFindFirstArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueFindFirstArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  where: EquipmentPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyValueOrderByWithRelationInputSchema.array(),EquipmentPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueFindFirstArgs>

export const EquipmentPropertyValueFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueFindFirstOrThrowArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  where: EquipmentPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyValueOrderByWithRelationInputSchema.array(),EquipmentPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueFindFirstOrThrowArgs>

export const EquipmentPropertyValueFindManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueFindManyArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  where: EquipmentPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyValueOrderByWithRelationInputSchema.array(),EquipmentPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: EquipmentPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueFindManyArgs>

export const EquipmentPropertyValueAggregateArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueAggregateArgs> = z.object({
  where: EquipmentPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyValueOrderByWithRelationInputSchema.array(),EquipmentPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueAggregateArgs>

export const EquipmentPropertyValueGroupByArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueGroupByArgs> = z.object({
  where: EquipmentPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentPropertyValueOrderByWithAggregationInputSchema.array(),EquipmentPropertyValueOrderByWithAggregationInputSchema ]).optional(),
  by: EquipmentPropertyValueScalarFieldEnumSchema.array(),
  having: EquipmentPropertyValueScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueGroupByArgs>

export const EquipmentPropertyValueFindUniqueArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueFindUniqueArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  where: EquipmentPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueFindUniqueArgs>

export const EquipmentPropertyValueFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueFindUniqueOrThrowArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  where: EquipmentPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueFindUniqueOrThrowArgs>

export const FeedbackFindFirstArgsSchema: z.ZodType<Prisma.FeedbackFindFirstArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  where: FeedbackWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackOrderByWithRelationInputSchema.array(),FeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FeedbackScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FeedbackFindFirstArgs>

export const FeedbackFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FeedbackFindFirstOrThrowArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  where: FeedbackWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackOrderByWithRelationInputSchema.array(),FeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FeedbackScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FeedbackFindFirstOrThrowArgs>

export const FeedbackFindManyArgsSchema: z.ZodType<Prisma.FeedbackFindManyArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  where: FeedbackWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackOrderByWithRelationInputSchema.array(),FeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FeedbackScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FeedbackFindManyArgs>

export const FeedbackAggregateArgsSchema: z.ZodType<Prisma.FeedbackAggregateArgs> = z.object({
  where: FeedbackWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackOrderByWithRelationInputSchema.array(),FeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FeedbackAggregateArgs>

export const FeedbackGroupByArgsSchema: z.ZodType<Prisma.FeedbackGroupByArgs> = z.object({
  where: FeedbackWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackOrderByWithAggregationInputSchema.array(),FeedbackOrderByWithAggregationInputSchema ]).optional(),
  by: FeedbackScalarFieldEnumSchema.array(),
  having: FeedbackScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FeedbackGroupByArgs>

export const FeedbackFindUniqueArgsSchema: z.ZodType<Prisma.FeedbackFindUniqueArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  where: FeedbackWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FeedbackFindUniqueArgs>

export const FeedbackFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FeedbackFindUniqueOrThrowArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  where: FeedbackWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FeedbackFindUniqueOrThrowArgs>

export const FileFindFirstArgsSchema: z.ZodType<Prisma.FileFindFirstArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FileScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FileFindFirstArgs>

export const FileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FileFindFirstOrThrowArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FileScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FileFindFirstOrThrowArgs>

export const FileFindManyArgsSchema: z.ZodType<Prisma.FileFindManyArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FileScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FileFindManyArgs>

export const FileAggregateArgsSchema: z.ZodType<Prisma.FileAggregateArgs> = z.object({
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FileAggregateArgs>

export const FileGroupByArgsSchema: z.ZodType<Prisma.FileGroupByArgs> = z.object({
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithAggregationInputSchema.array(),FileOrderByWithAggregationInputSchema ]).optional(),
  by: FileScalarFieldEnumSchema.array(),
  having: FileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FileGroupByArgs>

export const FileFindUniqueArgsSchema: z.ZodType<Prisma.FileFindUniqueArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FileFindUniqueArgs>

export const FileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FileFindUniqueOrThrowArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FileFindUniqueOrThrowArgs>

export const FilePropertyFindFirstArgsSchema: z.ZodType<Prisma.FilePropertyFindFirstArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  where: FilePropertyWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyOrderByWithRelationInputSchema.array(),FilePropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FilePropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyFindFirstArgs>

export const FilePropertyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FilePropertyFindFirstOrThrowArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  where: FilePropertyWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyOrderByWithRelationInputSchema.array(),FilePropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FilePropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyFindFirstOrThrowArgs>

export const FilePropertyFindManyArgsSchema: z.ZodType<Prisma.FilePropertyFindManyArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  where: FilePropertyWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyOrderByWithRelationInputSchema.array(),FilePropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FilePropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyFindManyArgs>

export const FilePropertyAggregateArgsSchema: z.ZodType<Prisma.FilePropertyAggregateArgs> = z.object({
  where: FilePropertyWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyOrderByWithRelationInputSchema.array(),FilePropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyAggregateArgs>

export const FilePropertyGroupByArgsSchema: z.ZodType<Prisma.FilePropertyGroupByArgs> = z.object({
  where: FilePropertyWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyOrderByWithAggregationInputSchema.array(),FilePropertyOrderByWithAggregationInputSchema ]).optional(),
  by: FilePropertyScalarFieldEnumSchema.array(),
  having: FilePropertyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyGroupByArgs>

export const FilePropertyFindUniqueArgsSchema: z.ZodType<Prisma.FilePropertyFindUniqueArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  where: FilePropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyFindUniqueArgs>

export const FilePropertyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FilePropertyFindUniqueOrThrowArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  where: FilePropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyFindUniqueOrThrowArgs>

export const FilePropertyValueFindFirstArgsSchema: z.ZodType<Prisma.FilePropertyValueFindFirstArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  where: FilePropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyValueOrderByWithRelationInputSchema.array(),FilePropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FilePropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueFindFirstArgs>

export const FilePropertyValueFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FilePropertyValueFindFirstOrThrowArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  where: FilePropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyValueOrderByWithRelationInputSchema.array(),FilePropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FilePropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueFindFirstOrThrowArgs>

export const FilePropertyValueFindManyArgsSchema: z.ZodType<Prisma.FilePropertyValueFindManyArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  where: FilePropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyValueOrderByWithRelationInputSchema.array(),FilePropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FilePropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueFindManyArgs>

export const FilePropertyValueAggregateArgsSchema: z.ZodType<Prisma.FilePropertyValueAggregateArgs> = z.object({
  where: FilePropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyValueOrderByWithRelationInputSchema.array(),FilePropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: FilePropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueAggregateArgs>

export const FilePropertyValueGroupByArgsSchema: z.ZodType<Prisma.FilePropertyValueGroupByArgs> = z.object({
  where: FilePropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ FilePropertyValueOrderByWithAggregationInputSchema.array(),FilePropertyValueOrderByWithAggregationInputSchema ]).optional(),
  by: FilePropertyValueScalarFieldEnumSchema.array(),
  having: FilePropertyValueScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueGroupByArgs>

export const FilePropertyValueFindUniqueArgsSchema: z.ZodType<Prisma.FilePropertyValueFindUniqueArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  where: FilePropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyValueFindUniqueArgs>

export const FilePropertyValueFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FilePropertyValueFindUniqueOrThrowArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  where: FilePropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyValueFindUniqueOrThrowArgs>

export const ImageFindFirstArgsSchema: z.ZodType<Prisma.ImageFindFirstArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  where: ImageWhereInputSchema.optional(),
  orderBy: z.union([ ImageOrderByWithRelationInputSchema.array(),ImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ImageScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ImageFindFirstArgs>

export const ImageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ImageFindFirstOrThrowArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  where: ImageWhereInputSchema.optional(),
  orderBy: z.union([ ImageOrderByWithRelationInputSchema.array(),ImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ImageScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ImageFindFirstOrThrowArgs>

export const ImageFindManyArgsSchema: z.ZodType<Prisma.ImageFindManyArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  where: ImageWhereInputSchema.optional(),
  orderBy: z.union([ ImageOrderByWithRelationInputSchema.array(),ImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ImageScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ImageFindManyArgs>

export const ImageAggregateArgsSchema: z.ZodType<Prisma.ImageAggregateArgs> = z.object({
  where: ImageWhereInputSchema.optional(),
  orderBy: z.union([ ImageOrderByWithRelationInputSchema.array(),ImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ImageAggregateArgs>

export const ImageGroupByArgsSchema: z.ZodType<Prisma.ImageGroupByArgs> = z.object({
  where: ImageWhereInputSchema.optional(),
  orderBy: z.union([ ImageOrderByWithAggregationInputSchema.array(),ImageOrderByWithAggregationInputSchema ]).optional(),
  by: ImageScalarFieldEnumSchema.array(),
  having: ImageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ImageGroupByArgs>

export const ImageFindUniqueArgsSchema: z.ZodType<Prisma.ImageFindUniqueArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  where: ImageWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ImageFindUniqueArgs>

export const ImageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ImageFindUniqueOrThrowArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  where: ImageWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ImageFindUniqueOrThrowArgs>

export const LocationEntryFindFirstArgsSchema: z.ZodType<Prisma.LocationEntryFindFirstArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  where: LocationEntryWhereInputSchema.optional(),
  orderBy: z.union([ LocationEntryOrderByWithRelationInputSchema.array(),LocationEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: LocationEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: LocationEntryScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.LocationEntryFindFirstArgs>

export const LocationEntryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LocationEntryFindFirstOrThrowArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  where: LocationEntryWhereInputSchema.optional(),
  orderBy: z.union([ LocationEntryOrderByWithRelationInputSchema.array(),LocationEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: LocationEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: LocationEntryScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.LocationEntryFindFirstOrThrowArgs>

export const LocationEntryFindManyArgsSchema: z.ZodType<Prisma.LocationEntryFindManyArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  where: LocationEntryWhereInputSchema.optional(),
  orderBy: z.union([ LocationEntryOrderByWithRelationInputSchema.array(),LocationEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: LocationEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: LocationEntryScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.LocationEntryFindManyArgs>

export const LocationEntryAggregateArgsSchema: z.ZodType<Prisma.LocationEntryAggregateArgs> = z.object({
  where: LocationEntryWhereInputSchema.optional(),
  orderBy: z.union([ LocationEntryOrderByWithRelationInputSchema.array(),LocationEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: LocationEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.LocationEntryAggregateArgs>

export const LocationEntryGroupByArgsSchema: z.ZodType<Prisma.LocationEntryGroupByArgs> = z.object({
  where: LocationEntryWhereInputSchema.optional(),
  orderBy: z.union([ LocationEntryOrderByWithAggregationInputSchema.array(),LocationEntryOrderByWithAggregationInputSchema ]).optional(),
  by: LocationEntryScalarFieldEnumSchema.array(),
  having: LocationEntryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.LocationEntryGroupByArgs>

export const LocationEntryFindUniqueArgsSchema: z.ZodType<Prisma.LocationEntryFindUniqueArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  where: LocationEntryWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.LocationEntryFindUniqueArgs>

export const LocationEntryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LocationEntryFindUniqueOrThrowArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  where: LocationEntryWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.LocationEntryFindUniqueOrThrowArgs>

export const ProjectFindFirstArgsSchema: z.ZodType<Prisma.ProjectFindFirstArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectFindFirstArgs>

export const ProjectFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProjectFindFirstOrThrowArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectFindFirstOrThrowArgs>

export const ProjectFindManyArgsSchema: z.ZodType<Prisma.ProjectFindManyArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectFindManyArgs>

export const ProjectAggregateArgsSchema: z.ZodType<Prisma.ProjectAggregateArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectAggregateArgs>

export const ProjectGroupByArgsSchema: z.ZodType<Prisma.ProjectGroupByArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithAggregationInputSchema.array(),ProjectOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectScalarFieldEnumSchema.array(),
  having: ProjectScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectGroupByArgs>

export const ProjectFindUniqueArgsSchema: z.ZodType<Prisma.ProjectFindUniqueArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectFindUniqueArgs>

export const ProjectFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProjectFindUniqueOrThrowArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectFindUniqueOrThrowArgs>

export const ProjectPropertyFindFirstArgsSchema: z.ZodType<Prisma.ProjectPropertyFindFirstArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  where: ProjectPropertyWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyOrderByWithRelationInputSchema.array(),ProjectPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyFindFirstArgs>

export const ProjectPropertyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProjectPropertyFindFirstOrThrowArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  where: ProjectPropertyWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyOrderByWithRelationInputSchema.array(),ProjectPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyFindFirstOrThrowArgs>

export const ProjectPropertyFindManyArgsSchema: z.ZodType<Prisma.ProjectPropertyFindManyArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  where: ProjectPropertyWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyOrderByWithRelationInputSchema.array(),ProjectPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyFindManyArgs>

export const ProjectPropertyAggregateArgsSchema: z.ZodType<Prisma.ProjectPropertyAggregateArgs> = z.object({
  where: ProjectPropertyWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyOrderByWithRelationInputSchema.array(),ProjectPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyAggregateArgs>

export const ProjectPropertyGroupByArgsSchema: z.ZodType<Prisma.ProjectPropertyGroupByArgs> = z.object({
  where: ProjectPropertyWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyOrderByWithAggregationInputSchema.array(),ProjectPropertyOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectPropertyScalarFieldEnumSchema.array(),
  having: ProjectPropertyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyGroupByArgs>

export const ProjectPropertyFindUniqueArgsSchema: z.ZodType<Prisma.ProjectPropertyFindUniqueArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  where: ProjectPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyFindUniqueArgs>

export const ProjectPropertyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProjectPropertyFindUniqueOrThrowArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  where: ProjectPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyFindUniqueOrThrowArgs>

export const ProjectPropertyValueFindFirstArgsSchema: z.ZodType<Prisma.ProjectPropertyValueFindFirstArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  where: ProjectPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyValueOrderByWithRelationInputSchema.array(),ProjectPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueFindFirstArgs>

export const ProjectPropertyValueFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProjectPropertyValueFindFirstOrThrowArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  where: ProjectPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyValueOrderByWithRelationInputSchema.array(),ProjectPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueFindFirstOrThrowArgs>

export const ProjectPropertyValueFindManyArgsSchema: z.ZodType<Prisma.ProjectPropertyValueFindManyArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  where: ProjectPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyValueOrderByWithRelationInputSchema.array(),ProjectPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueFindManyArgs>

export const ProjectPropertyValueAggregateArgsSchema: z.ZodType<Prisma.ProjectPropertyValueAggregateArgs> = z.object({
  where: ProjectPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyValueOrderByWithRelationInputSchema.array(),ProjectPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueAggregateArgs>

export const ProjectPropertyValueGroupByArgsSchema: z.ZodType<Prisma.ProjectPropertyValueGroupByArgs> = z.object({
  where: ProjectPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ ProjectPropertyValueOrderByWithAggregationInputSchema.array(),ProjectPropertyValueOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectPropertyValueScalarFieldEnumSchema.array(),
  having: ProjectPropertyValueScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueGroupByArgs>

export const ProjectPropertyValueFindUniqueArgsSchema: z.ZodType<Prisma.ProjectPropertyValueFindUniqueArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  where: ProjectPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyValueFindUniqueArgs>

export const ProjectPropertyValueFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProjectPropertyValueFindUniqueOrThrowArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  where: ProjectPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyValueFindUniqueOrThrowArgs>

export const TaskFindFirstArgsSchema: z.ZodType<Prisma.TaskFindFirstArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskFindFirstArgs>

export const TaskFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskFindFirstOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskFindFirstOrThrowArgs>

export const TaskFindManyArgsSchema: z.ZodType<Prisma.TaskFindManyArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskFindManyArgs>

export const TaskAggregateArgsSchema: z.ZodType<Prisma.TaskAggregateArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskAggregateArgs>

export const TaskGroupByArgsSchema: z.ZodType<Prisma.TaskGroupByArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithAggregationInputSchema.array(),TaskOrderByWithAggregationInputSchema ]).optional(),
  by: TaskScalarFieldEnumSchema.array(),
  having: TaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskGroupByArgs>

export const TaskFindUniqueArgsSchema: z.ZodType<Prisma.TaskFindUniqueArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskFindUniqueArgs>

export const TaskFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskFindUniqueOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskFindUniqueOrThrowArgs>

export const TaskPropertyFindFirstArgsSchema: z.ZodType<Prisma.TaskPropertyFindFirstArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  where: TaskPropertyWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyOrderByWithRelationInputSchema.array(),TaskPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyFindFirstArgs>

export const TaskPropertyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskPropertyFindFirstOrThrowArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  where: TaskPropertyWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyOrderByWithRelationInputSchema.array(),TaskPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyFindFirstOrThrowArgs>

export const TaskPropertyFindManyArgsSchema: z.ZodType<Prisma.TaskPropertyFindManyArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  where: TaskPropertyWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyOrderByWithRelationInputSchema.array(),TaskPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskPropertyScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyFindManyArgs>

export const TaskPropertyAggregateArgsSchema: z.ZodType<Prisma.TaskPropertyAggregateArgs> = z.object({
  where: TaskPropertyWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyOrderByWithRelationInputSchema.array(),TaskPropertyOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyAggregateArgs>

export const TaskPropertyGroupByArgsSchema: z.ZodType<Prisma.TaskPropertyGroupByArgs> = z.object({
  where: TaskPropertyWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyOrderByWithAggregationInputSchema.array(),TaskPropertyOrderByWithAggregationInputSchema ]).optional(),
  by: TaskPropertyScalarFieldEnumSchema.array(),
  having: TaskPropertyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyGroupByArgs>

export const TaskPropertyFindUniqueArgsSchema: z.ZodType<Prisma.TaskPropertyFindUniqueArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  where: TaskPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyFindUniqueArgs>

export const TaskPropertyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskPropertyFindUniqueOrThrowArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  where: TaskPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyFindUniqueOrThrowArgs>

export const TaskPropertyValueFindFirstArgsSchema: z.ZodType<Prisma.TaskPropertyValueFindFirstArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  where: TaskPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyValueOrderByWithRelationInputSchema.array(),TaskPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueFindFirstArgs>

export const TaskPropertyValueFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskPropertyValueFindFirstOrThrowArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  where: TaskPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyValueOrderByWithRelationInputSchema.array(),TaskPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueFindFirstOrThrowArgs>

export const TaskPropertyValueFindManyArgsSchema: z.ZodType<Prisma.TaskPropertyValueFindManyArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  where: TaskPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyValueOrderByWithRelationInputSchema.array(),TaskPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskPropertyValueScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueFindManyArgs>

export const TaskPropertyValueAggregateArgsSchema: z.ZodType<Prisma.TaskPropertyValueAggregateArgs> = z.object({
  where: TaskPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyValueOrderByWithRelationInputSchema.array(),TaskPropertyValueOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskPropertyValueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueAggregateArgs>

export const TaskPropertyValueGroupByArgsSchema: z.ZodType<Prisma.TaskPropertyValueGroupByArgs> = z.object({
  where: TaskPropertyValueWhereInputSchema.optional(),
  orderBy: z.union([ TaskPropertyValueOrderByWithAggregationInputSchema.array(),TaskPropertyValueOrderByWithAggregationInputSchema ]).optional(),
  by: TaskPropertyValueScalarFieldEnumSchema.array(),
  having: TaskPropertyValueScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueGroupByArgs>

export const TaskPropertyValueFindUniqueArgsSchema: z.ZodType<Prisma.TaskPropertyValueFindUniqueArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  where: TaskPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyValueFindUniqueArgs>

export const TaskPropertyValueFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskPropertyValueFindUniqueOrThrowArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  where: TaskPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyValueFindUniqueOrThrowArgs>

export const TaskStatusFindFirstArgsSchema: z.ZodType<Prisma.TaskStatusFindFirstArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  where: TaskStatusWhereInputSchema.optional(),
  orderBy: z.union([ TaskStatusOrderByWithRelationInputSchema.array(),TaskStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskStatusScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskStatusFindFirstArgs>

export const TaskStatusFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskStatusFindFirstOrThrowArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  where: TaskStatusWhereInputSchema.optional(),
  orderBy: z.union([ TaskStatusOrderByWithRelationInputSchema.array(),TaskStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskStatusScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskStatusFindFirstOrThrowArgs>

export const TaskStatusFindManyArgsSchema: z.ZodType<Prisma.TaskStatusFindManyArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  where: TaskStatusWhereInputSchema.optional(),
  orderBy: z.union([ TaskStatusOrderByWithRelationInputSchema.array(),TaskStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaskStatusScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaskStatusFindManyArgs>

export const TaskStatusAggregateArgsSchema: z.ZodType<Prisma.TaskStatusAggregateArgs> = z.object({
  where: TaskStatusWhereInputSchema.optional(),
  orderBy: z.union([ TaskStatusOrderByWithRelationInputSchema.array(),TaskStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskStatusAggregateArgs>

export const TaskStatusGroupByArgsSchema: z.ZodType<Prisma.TaskStatusGroupByArgs> = z.object({
  where: TaskStatusWhereInputSchema.optional(),
  orderBy: z.union([ TaskStatusOrderByWithAggregationInputSchema.array(),TaskStatusOrderByWithAggregationInputSchema ]).optional(),
  by: TaskStatusScalarFieldEnumSchema.array(),
  having: TaskStatusScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaskStatusGroupByArgs>

export const TaskStatusFindUniqueArgsSchema: z.ZodType<Prisma.TaskStatusFindUniqueArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  where: TaskStatusWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskStatusFindUniqueArgs>

export const TaskStatusFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskStatusFindUniqueOrThrowArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  where: TaskStatusWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskStatusFindUniqueOrThrowArgs>

export const TenantFindFirstArgsSchema: z.ZodType<Prisma.TenantFindFirstArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TenantScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TenantFindFirstArgs>

export const TenantFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantFindFirstOrThrowArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TenantScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TenantFindFirstOrThrowArgs>

export const TenantFindManyArgsSchema: z.ZodType<Prisma.TenantFindManyArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TenantScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TenantFindManyArgs>

export const TenantAggregateArgsSchema: z.ZodType<Prisma.TenantAggregateArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TenantAggregateArgs>

export const TenantGroupByArgsSchema: z.ZodType<Prisma.TenantGroupByArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithAggregationInputSchema.array(),TenantOrderByWithAggregationInputSchema ]).optional(),
  by: TenantScalarFieldEnumSchema.array(),
  having: TenantScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TenantGroupByArgs>

export const TenantFindUniqueArgsSchema: z.ZodType<Prisma.TenantFindUniqueArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantFindUniqueArgs>

export const TenantFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantFindUniqueOrThrowArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantFindUniqueOrThrowArgs>

export const TenantUserFindFirstArgsSchema: z.ZodType<Prisma.TenantUserFindFirstArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  where: TenantUserWhereInputSchema.optional(),
  orderBy: z.union([ TenantUserOrderByWithRelationInputSchema.array(),TenantUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TenantUserScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TenantUserFindFirstArgs>

export const TenantUserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantUserFindFirstOrThrowArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  where: TenantUserWhereInputSchema.optional(),
  orderBy: z.union([ TenantUserOrderByWithRelationInputSchema.array(),TenantUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TenantUserScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TenantUserFindFirstOrThrowArgs>

export const TenantUserFindManyArgsSchema: z.ZodType<Prisma.TenantUserFindManyArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  where: TenantUserWhereInputSchema.optional(),
  orderBy: z.union([ TenantUserOrderByWithRelationInputSchema.array(),TenantUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TenantUserScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TenantUserFindManyArgs>

export const TenantUserAggregateArgsSchema: z.ZodType<Prisma.TenantUserAggregateArgs> = z.object({
  where: TenantUserWhereInputSchema.optional(),
  orderBy: z.union([ TenantUserOrderByWithRelationInputSchema.array(),TenantUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TenantUserAggregateArgs>

export const TenantUserGroupByArgsSchema: z.ZodType<Prisma.TenantUserGroupByArgs> = z.object({
  where: TenantUserWhereInputSchema.optional(),
  orderBy: z.union([ TenantUserOrderByWithAggregationInputSchema.array(),TenantUserOrderByWithAggregationInputSchema ]).optional(),
  by: TenantUserScalarFieldEnumSchema.array(),
  having: TenantUserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TenantUserGroupByArgs>

export const TenantUserFindUniqueArgsSchema: z.ZodType<Prisma.TenantUserFindUniqueArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  where: TenantUserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantUserFindUniqueArgs>

export const TenantUserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantUserFindUniqueOrThrowArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  where: TenantUserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantUserFindUniqueOrThrowArgs>

export const TimeBlockFindFirstArgsSchema: z.ZodType<Prisma.TimeBlockFindFirstArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  where: TimeBlockWhereInputSchema.optional(),
  orderBy: z.union([ TimeBlockOrderByWithRelationInputSchema.array(),TimeBlockOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeBlockWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TimeBlockScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TimeBlockFindFirstArgs>

export const TimeBlockFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TimeBlockFindFirstOrThrowArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  where: TimeBlockWhereInputSchema.optional(),
  orderBy: z.union([ TimeBlockOrderByWithRelationInputSchema.array(),TimeBlockOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeBlockWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TimeBlockScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TimeBlockFindFirstOrThrowArgs>

export const TimeBlockFindManyArgsSchema: z.ZodType<Prisma.TimeBlockFindManyArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  where: TimeBlockWhereInputSchema.optional(),
  orderBy: z.union([ TimeBlockOrderByWithRelationInputSchema.array(),TimeBlockOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeBlockWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TimeBlockScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TimeBlockFindManyArgs>

export const TimeBlockAggregateArgsSchema: z.ZodType<Prisma.TimeBlockAggregateArgs> = z.object({
  where: TimeBlockWhereInputSchema.optional(),
  orderBy: z.union([ TimeBlockOrderByWithRelationInputSchema.array(),TimeBlockOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeBlockWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TimeBlockAggregateArgs>

export const TimeBlockGroupByArgsSchema: z.ZodType<Prisma.TimeBlockGroupByArgs> = z.object({
  where: TimeBlockWhereInputSchema.optional(),
  orderBy: z.union([ TimeBlockOrderByWithAggregationInputSchema.array(),TimeBlockOrderByWithAggregationInputSchema ]).optional(),
  by: TimeBlockScalarFieldEnumSchema.array(),
  having: TimeBlockScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TimeBlockGroupByArgs>

export const TimeBlockFindUniqueArgsSchema: z.ZodType<Prisma.TimeBlockFindUniqueArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  where: TimeBlockWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TimeBlockFindUniqueArgs>

export const TimeBlockFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TimeBlockFindUniqueOrThrowArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  where: TimeBlockWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TimeBlockFindUniqueOrThrowArgs>

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UserScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UserFindFirstArgs>

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UserScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UserFindFirstOrThrowArgs>

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UserScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UserFindManyArgs>

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UserAggregateArgs>

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UserGroupByArgs>

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserFindUniqueArgs>

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserFindUniqueOrThrowArgs>

export const UserTaskFindFirstArgsSchema: z.ZodType<Prisma.UserTaskFindFirstArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  where: UserTaskWhereInputSchema.optional(),
  orderBy: z.union([ UserTaskOrderByWithRelationInputSchema.array(),UserTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: UserTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UserTaskScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UserTaskFindFirstArgs>

export const UserTaskFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserTaskFindFirstOrThrowArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  where: UserTaskWhereInputSchema.optional(),
  orderBy: z.union([ UserTaskOrderByWithRelationInputSchema.array(),UserTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: UserTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UserTaskScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UserTaskFindFirstOrThrowArgs>

export const UserTaskFindManyArgsSchema: z.ZodType<Prisma.UserTaskFindManyArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  where: UserTaskWhereInputSchema.optional(),
  orderBy: z.union([ UserTaskOrderByWithRelationInputSchema.array(),UserTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: UserTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UserTaskScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UserTaskFindManyArgs>

export const UserTaskAggregateArgsSchema: z.ZodType<Prisma.UserTaskAggregateArgs> = z.object({
  where: UserTaskWhereInputSchema.optional(),
  orderBy: z.union([ UserTaskOrderByWithRelationInputSchema.array(),UserTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: UserTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UserTaskAggregateArgs>

export const UserTaskGroupByArgsSchema: z.ZodType<Prisma.UserTaskGroupByArgs> = z.object({
  where: UserTaskWhereInputSchema.optional(),
  orderBy: z.union([ UserTaskOrderByWithAggregationInputSchema.array(),UserTaskOrderByWithAggregationInputSchema ]).optional(),
  by: UserTaskScalarFieldEnumSchema.array(),
  having: UserTaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UserTaskGroupByArgs>

export const UserTaskFindUniqueArgsSchema: z.ZodType<Prisma.UserTaskFindUniqueArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  where: UserTaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserTaskFindUniqueArgs>

export const UserTaskFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserTaskFindUniqueOrThrowArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  where: UserTaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserTaskFindUniqueOrThrowArgs>

export const ApiKeyCreateArgsSchema: z.ZodType<Prisma.ApiKeyCreateArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  data: z.union([ ApiKeyCreateInputSchema,ApiKeyUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ApiKeyCreateArgs>

export const ApiKeyUpsertArgsSchema: z.ZodType<Prisma.ApiKeyUpsertArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
  create: z.union([ ApiKeyCreateInputSchema,ApiKeyUncheckedCreateInputSchema ]),
  update: z.union([ ApiKeyUpdateInputSchema,ApiKeyUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ApiKeyUpsertArgs>

export const ApiKeyCreateManyArgsSchema: z.ZodType<Prisma.ApiKeyCreateManyArgs> = z.object({
  data: ApiKeyCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ApiKeyCreateManyArgs>

export const ApiKeyDeleteArgsSchema: z.ZodType<Prisma.ApiKeyDeleteArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ApiKeyDeleteArgs>

export const ApiKeyUpdateArgsSchema: z.ZodType<Prisma.ApiKeyUpdateArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  data: z.union([ ApiKeyUpdateInputSchema,ApiKeyUncheckedUpdateInputSchema ]),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ApiKeyUpdateArgs>

export const ApiKeyUpdateManyArgsSchema: z.ZodType<Prisma.ApiKeyUpdateManyArgs> = z.object({
  data: z.union([ ApiKeyUpdateManyMutationInputSchema,ApiKeyUncheckedUpdateManyInputSchema ]),
  where: ApiKeyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ApiKeyUpdateManyArgs>

export const ApiKeyDeleteManyArgsSchema: z.ZodType<Prisma.ApiKeyDeleteManyArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ApiKeyDeleteManyArgs>

export const DailyLogCreateArgsSchema: z.ZodType<Prisma.DailyLogCreateArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  data: z.union([ DailyLogCreateInputSchema,DailyLogUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.DailyLogCreateArgs>

export const DailyLogUpsertArgsSchema: z.ZodType<Prisma.DailyLogUpsertArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  where: DailyLogWhereUniqueInputSchema,
  create: z.union([ DailyLogCreateInputSchema,DailyLogUncheckedCreateInputSchema ]),
  update: z.union([ DailyLogUpdateInputSchema,DailyLogUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.DailyLogUpsertArgs>

export const DailyLogCreateManyArgsSchema: z.ZodType<Prisma.DailyLogCreateManyArgs> = z.object({
  data: DailyLogCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.DailyLogCreateManyArgs>

export const DailyLogDeleteArgsSchema: z.ZodType<Prisma.DailyLogDeleteArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  where: DailyLogWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogDeleteArgs>

export const DailyLogUpdateArgsSchema: z.ZodType<Prisma.DailyLogUpdateArgs> = z.object({
  select: DailyLogSelectSchema.optional(),
  include: DailyLogIncludeSchema.optional(),
  data: z.union([ DailyLogUpdateInputSchema,DailyLogUncheckedUpdateInputSchema ]),
  where: DailyLogWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogUpdateArgs>

export const DailyLogUpdateManyArgsSchema: z.ZodType<Prisma.DailyLogUpdateManyArgs> = z.object({
  data: z.union([ DailyLogUpdateManyMutationInputSchema,DailyLogUncheckedUpdateManyInputSchema ]),
  where: DailyLogWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.DailyLogUpdateManyArgs>

export const DailyLogDeleteManyArgsSchema: z.ZodType<Prisma.DailyLogDeleteManyArgs> = z.object({
  where: DailyLogWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.DailyLogDeleteManyArgs>

export const DailyLogItemCreateArgsSchema: z.ZodType<Prisma.DailyLogItemCreateArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  data: z.union([ DailyLogItemCreateInputSchema,DailyLogItemUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.DailyLogItemCreateArgs>

export const DailyLogItemUpsertArgsSchema: z.ZodType<Prisma.DailyLogItemUpsertArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  where: DailyLogItemWhereUniqueInputSchema,
  create: z.union([ DailyLogItemCreateInputSchema,DailyLogItemUncheckedCreateInputSchema ]),
  update: z.union([ DailyLogItemUpdateInputSchema,DailyLogItemUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.DailyLogItemUpsertArgs>

export const DailyLogItemCreateManyArgsSchema: z.ZodType<Prisma.DailyLogItemCreateManyArgs> = z.object({
  data: DailyLogItemCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemCreateManyArgs>

export const DailyLogItemDeleteArgsSchema: z.ZodType<Prisma.DailyLogItemDeleteArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  where: DailyLogItemWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogItemDeleteArgs>

export const DailyLogItemUpdateArgsSchema: z.ZodType<Prisma.DailyLogItemUpdateArgs> = z.object({
  select: DailyLogItemSelectSchema.optional(),
  include: DailyLogItemIncludeSchema.optional(),
  data: z.union([ DailyLogItemUpdateInputSchema,DailyLogItemUncheckedUpdateInputSchema ]),
  where: DailyLogItemWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.DailyLogItemUpdateArgs>

export const DailyLogItemUpdateManyArgsSchema: z.ZodType<Prisma.DailyLogItemUpdateManyArgs> = z.object({
  data: z.union([ DailyLogItemUpdateManyMutationInputSchema,DailyLogItemUncheckedUpdateManyInputSchema ]),
  where: DailyLogItemWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemUpdateManyArgs>

export const DailyLogItemDeleteManyArgsSchema: z.ZodType<Prisma.DailyLogItemDeleteManyArgs> = z.object({
  where: DailyLogItemWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.DailyLogItemDeleteManyArgs>

export const EquipmentCreateArgsSchema: z.ZodType<Prisma.EquipmentCreateArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: z.union([ EquipmentCreateInputSchema,EquipmentUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.EquipmentCreateArgs>

export const EquipmentUpsertArgsSchema: z.ZodType<Prisma.EquipmentUpsertArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
  create: z.union([ EquipmentCreateInputSchema,EquipmentUncheckedCreateInputSchema ]),
  update: z.union([ EquipmentUpdateInputSchema,EquipmentUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.EquipmentUpsertArgs>

export const EquipmentCreateManyArgsSchema: z.ZodType<Prisma.EquipmentCreateManyArgs> = z.object({
  data: EquipmentCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.EquipmentCreateManyArgs>

export const EquipmentDeleteArgsSchema: z.ZodType<Prisma.EquipmentDeleteArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentDeleteArgs>

export const EquipmentUpdateArgsSchema: z.ZodType<Prisma.EquipmentUpdateArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: z.union([ EquipmentUpdateInputSchema,EquipmentUncheckedUpdateInputSchema ]),
  where: EquipmentWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentUpdateArgs>

export const EquipmentUpdateManyArgsSchema: z.ZodType<Prisma.EquipmentUpdateManyArgs> = z.object({
  data: z.union([ EquipmentUpdateManyMutationInputSchema,EquipmentUncheckedUpdateManyInputSchema ]),
  where: EquipmentWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.EquipmentUpdateManyArgs>

export const EquipmentDeleteManyArgsSchema: z.ZodType<Prisma.EquipmentDeleteManyArgs> = z.object({
  where: EquipmentWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.EquipmentDeleteManyArgs>

export const EquipmentPropertyCreateArgsSchema: z.ZodType<Prisma.EquipmentPropertyCreateArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  data: z.union([ EquipmentPropertyCreateInputSchema,EquipmentPropertyUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.EquipmentPropertyCreateArgs>

export const EquipmentPropertyUpsertArgsSchema: z.ZodType<Prisma.EquipmentPropertyUpsertArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  where: EquipmentPropertyWhereUniqueInputSchema,
  create: z.union([ EquipmentPropertyCreateInputSchema,EquipmentPropertyUncheckedCreateInputSchema ]),
  update: z.union([ EquipmentPropertyUpdateInputSchema,EquipmentPropertyUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.EquipmentPropertyUpsertArgs>

export const EquipmentPropertyCreateManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyCreateManyArgs> = z.object({
  data: EquipmentPropertyCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyCreateManyArgs>

export const EquipmentPropertyDeleteArgsSchema: z.ZodType<Prisma.EquipmentPropertyDeleteArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  where: EquipmentPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyDeleteArgs>

export const EquipmentPropertyUpdateArgsSchema: z.ZodType<Prisma.EquipmentPropertyUpdateArgs> = z.object({
  select: EquipmentPropertySelectSchema.optional(),
  include: EquipmentPropertyIncludeSchema.optional(),
  data: z.union([ EquipmentPropertyUpdateInputSchema,EquipmentPropertyUncheckedUpdateInputSchema ]),
  where: EquipmentPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyUpdateArgs>

export const EquipmentPropertyUpdateManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyUpdateManyArgs> = z.object({
  data: z.union([ EquipmentPropertyUpdateManyMutationInputSchema,EquipmentPropertyUncheckedUpdateManyInputSchema ]),
  where: EquipmentPropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyUpdateManyArgs>

export const EquipmentPropertyDeleteManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyDeleteManyArgs> = z.object({
  where: EquipmentPropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyDeleteManyArgs>

export const EquipmentPropertyValueCreateArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  data: z.union([ EquipmentPropertyValueCreateInputSchema,EquipmentPropertyValueUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueCreateArgs>

export const EquipmentPropertyValueUpsertArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueUpsertArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  where: EquipmentPropertyValueWhereUniqueInputSchema,
  create: z.union([ EquipmentPropertyValueCreateInputSchema,EquipmentPropertyValueUncheckedCreateInputSchema ]),
  update: z.union([ EquipmentPropertyValueUpdateInputSchema,EquipmentPropertyValueUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueUpsertArgs>

export const EquipmentPropertyValueCreateManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueCreateManyArgs> = z.object({
  data: EquipmentPropertyValueCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueCreateManyArgs>

export const EquipmentPropertyValueDeleteArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueDeleteArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  where: EquipmentPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueDeleteArgs>

export const EquipmentPropertyValueUpdateArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateArgs> = z.object({
  select: EquipmentPropertyValueSelectSchema.optional(),
  include: EquipmentPropertyValueIncludeSchema.optional(),
  data: z.union([ EquipmentPropertyValueUpdateInputSchema,EquipmentPropertyValueUncheckedUpdateInputSchema ]),
  where: EquipmentPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueUpdateArgs>

export const EquipmentPropertyValueUpdateManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueUpdateManyArgs> = z.object({
  data: z.union([ EquipmentPropertyValueUpdateManyMutationInputSchema,EquipmentPropertyValueUncheckedUpdateManyInputSchema ]),
  where: EquipmentPropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueUpdateManyArgs>

export const EquipmentPropertyValueDeleteManyArgsSchema: z.ZodType<Prisma.EquipmentPropertyValueDeleteManyArgs> = z.object({
  where: EquipmentPropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.EquipmentPropertyValueDeleteManyArgs>

export const FeedbackCreateArgsSchema: z.ZodType<Prisma.FeedbackCreateArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  data: z.union([ FeedbackCreateInputSchema,FeedbackUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.FeedbackCreateArgs>

export const FeedbackUpsertArgsSchema: z.ZodType<Prisma.FeedbackUpsertArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  where: FeedbackWhereUniqueInputSchema,
  create: z.union([ FeedbackCreateInputSchema,FeedbackUncheckedCreateInputSchema ]),
  update: z.union([ FeedbackUpdateInputSchema,FeedbackUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.FeedbackUpsertArgs>

export const FeedbackCreateManyArgsSchema: z.ZodType<Prisma.FeedbackCreateManyArgs> = z.object({
  data: FeedbackCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.FeedbackCreateManyArgs>

export const FeedbackDeleteArgsSchema: z.ZodType<Prisma.FeedbackDeleteArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  where: FeedbackWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FeedbackDeleteArgs>

export const FeedbackUpdateArgsSchema: z.ZodType<Prisma.FeedbackUpdateArgs> = z.object({
  select: FeedbackSelectSchema.optional(),
  include: FeedbackIncludeSchema.optional(),
  data: z.union([ FeedbackUpdateInputSchema,FeedbackUncheckedUpdateInputSchema ]),
  where: FeedbackWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FeedbackUpdateArgs>

export const FeedbackUpdateManyArgsSchema: z.ZodType<Prisma.FeedbackUpdateManyArgs> = z.object({
  data: z.union([ FeedbackUpdateManyMutationInputSchema,FeedbackUncheckedUpdateManyInputSchema ]),
  where: FeedbackWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FeedbackUpdateManyArgs>

export const FeedbackDeleteManyArgsSchema: z.ZodType<Prisma.FeedbackDeleteManyArgs> = z.object({
  where: FeedbackWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FeedbackDeleteManyArgs>

export const FileCreateArgsSchema: z.ZodType<Prisma.FileCreateArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  data: z.union([ FileCreateInputSchema,FileUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.FileCreateArgs>

export const FileUpsertArgsSchema: z.ZodType<Prisma.FileUpsertArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
  create: z.union([ FileCreateInputSchema,FileUncheckedCreateInputSchema ]),
  update: z.union([ FileUpdateInputSchema,FileUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.FileUpsertArgs>

export const FileCreateManyArgsSchema: z.ZodType<Prisma.FileCreateManyArgs> = z.object({
  data: FileCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.FileCreateManyArgs>

export const FileDeleteArgsSchema: z.ZodType<Prisma.FileDeleteArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FileDeleteArgs>

export const FileUpdateArgsSchema: z.ZodType<Prisma.FileUpdateArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  data: z.union([ FileUpdateInputSchema,FileUncheckedUpdateInputSchema ]),
  where: FileWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FileUpdateArgs>

export const FileUpdateManyArgsSchema: z.ZodType<Prisma.FileUpdateManyArgs> = z.object({
  data: z.union([ FileUpdateManyMutationInputSchema,FileUncheckedUpdateManyInputSchema ]),
  where: FileWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FileUpdateManyArgs>

export const FileDeleteManyArgsSchema: z.ZodType<Prisma.FileDeleteManyArgs> = z.object({
  where: FileWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FileDeleteManyArgs>

export const FilePropertyCreateArgsSchema: z.ZodType<Prisma.FilePropertyCreateArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  data: z.union([ FilePropertyCreateInputSchema,FilePropertyUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.FilePropertyCreateArgs>

export const FilePropertyUpsertArgsSchema: z.ZodType<Prisma.FilePropertyUpsertArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  where: FilePropertyWhereUniqueInputSchema,
  create: z.union([ FilePropertyCreateInputSchema,FilePropertyUncheckedCreateInputSchema ]),
  update: z.union([ FilePropertyUpdateInputSchema,FilePropertyUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.FilePropertyUpsertArgs>

export const FilePropertyCreateManyArgsSchema: z.ZodType<Prisma.FilePropertyCreateManyArgs> = z.object({
  data: FilePropertyCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyCreateManyArgs>

export const FilePropertyDeleteArgsSchema: z.ZodType<Prisma.FilePropertyDeleteArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  where: FilePropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyDeleteArgs>

export const FilePropertyUpdateArgsSchema: z.ZodType<Prisma.FilePropertyUpdateArgs> = z.object({
  select: FilePropertySelectSchema.optional(),
  include: FilePropertyIncludeSchema.optional(),
  data: z.union([ FilePropertyUpdateInputSchema,FilePropertyUncheckedUpdateInputSchema ]),
  where: FilePropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyUpdateArgs>

export const FilePropertyUpdateManyArgsSchema: z.ZodType<Prisma.FilePropertyUpdateManyArgs> = z.object({
  data: z.union([ FilePropertyUpdateManyMutationInputSchema,FilePropertyUncheckedUpdateManyInputSchema ]),
  where: FilePropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FilePropertyUpdateManyArgs>

export const FilePropertyDeleteManyArgsSchema: z.ZodType<Prisma.FilePropertyDeleteManyArgs> = z.object({
  where: FilePropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FilePropertyDeleteManyArgs>

export const FilePropertyValueCreateArgsSchema: z.ZodType<Prisma.FilePropertyValueCreateArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  data: z.union([ FilePropertyValueCreateInputSchema,FilePropertyValueUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.FilePropertyValueCreateArgs>

export const FilePropertyValueUpsertArgsSchema: z.ZodType<Prisma.FilePropertyValueUpsertArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  where: FilePropertyValueWhereUniqueInputSchema,
  create: z.union([ FilePropertyValueCreateInputSchema,FilePropertyValueUncheckedCreateInputSchema ]),
  update: z.union([ FilePropertyValueUpdateInputSchema,FilePropertyValueUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.FilePropertyValueUpsertArgs>

export const FilePropertyValueCreateManyArgsSchema: z.ZodType<Prisma.FilePropertyValueCreateManyArgs> = z.object({
  data: FilePropertyValueCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueCreateManyArgs>

export const FilePropertyValueDeleteArgsSchema: z.ZodType<Prisma.FilePropertyValueDeleteArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  where: FilePropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyValueDeleteArgs>

export const FilePropertyValueUpdateArgsSchema: z.ZodType<Prisma.FilePropertyValueUpdateArgs> = z.object({
  select: FilePropertyValueSelectSchema.optional(),
  include: FilePropertyValueIncludeSchema.optional(),
  data: z.union([ FilePropertyValueUpdateInputSchema,FilePropertyValueUncheckedUpdateInputSchema ]),
  where: FilePropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FilePropertyValueUpdateArgs>

export const FilePropertyValueUpdateManyArgsSchema: z.ZodType<Prisma.FilePropertyValueUpdateManyArgs> = z.object({
  data: z.union([ FilePropertyValueUpdateManyMutationInputSchema,FilePropertyValueUncheckedUpdateManyInputSchema ]),
  where: FilePropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueUpdateManyArgs>

export const FilePropertyValueDeleteManyArgsSchema: z.ZodType<Prisma.FilePropertyValueDeleteManyArgs> = z.object({
  where: FilePropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FilePropertyValueDeleteManyArgs>

export const ImageCreateArgsSchema: z.ZodType<Prisma.ImageCreateArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  data: z.union([ ImageCreateInputSchema,ImageUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ImageCreateArgs>

export const ImageUpsertArgsSchema: z.ZodType<Prisma.ImageUpsertArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  where: ImageWhereUniqueInputSchema,
  create: z.union([ ImageCreateInputSchema,ImageUncheckedCreateInputSchema ]),
  update: z.union([ ImageUpdateInputSchema,ImageUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ImageUpsertArgs>

export const ImageCreateManyArgsSchema: z.ZodType<Prisma.ImageCreateManyArgs> = z.object({
  data: ImageCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ImageCreateManyArgs>

export const ImageDeleteArgsSchema: z.ZodType<Prisma.ImageDeleteArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  where: ImageWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ImageDeleteArgs>

export const ImageUpdateArgsSchema: z.ZodType<Prisma.ImageUpdateArgs> = z.object({
  select: ImageSelectSchema.optional(),
  include: ImageIncludeSchema.optional(),
  data: z.union([ ImageUpdateInputSchema,ImageUncheckedUpdateInputSchema ]),
  where: ImageWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ImageUpdateArgs>

export const ImageUpdateManyArgsSchema: z.ZodType<Prisma.ImageUpdateManyArgs> = z.object({
  data: z.union([ ImageUpdateManyMutationInputSchema,ImageUncheckedUpdateManyInputSchema ]),
  where: ImageWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ImageUpdateManyArgs>

export const ImageDeleteManyArgsSchema: z.ZodType<Prisma.ImageDeleteManyArgs> = z.object({
  where: ImageWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ImageDeleteManyArgs>

export const LocationEntryCreateArgsSchema: z.ZodType<Prisma.LocationEntryCreateArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  data: z.union([ LocationEntryCreateInputSchema,LocationEntryUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.LocationEntryCreateArgs>

export const LocationEntryUpsertArgsSchema: z.ZodType<Prisma.LocationEntryUpsertArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  where: LocationEntryWhereUniqueInputSchema,
  create: z.union([ LocationEntryCreateInputSchema,LocationEntryUncheckedCreateInputSchema ]),
  update: z.union([ LocationEntryUpdateInputSchema,LocationEntryUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.LocationEntryUpsertArgs>

export const LocationEntryCreateManyArgsSchema: z.ZodType<Prisma.LocationEntryCreateManyArgs> = z.object({
  data: LocationEntryCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.LocationEntryCreateManyArgs>

export const LocationEntryDeleteArgsSchema: z.ZodType<Prisma.LocationEntryDeleteArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  where: LocationEntryWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.LocationEntryDeleteArgs>

export const LocationEntryUpdateArgsSchema: z.ZodType<Prisma.LocationEntryUpdateArgs> = z.object({
  select: LocationEntrySelectSchema.optional(),
  include: LocationEntryIncludeSchema.optional(),
  data: z.union([ LocationEntryUpdateInputSchema,LocationEntryUncheckedUpdateInputSchema ]),
  where: LocationEntryWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.LocationEntryUpdateArgs>

export const LocationEntryUpdateManyArgsSchema: z.ZodType<Prisma.LocationEntryUpdateManyArgs> = z.object({
  data: z.union([ LocationEntryUpdateManyMutationInputSchema,LocationEntryUncheckedUpdateManyInputSchema ]),
  where: LocationEntryWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.LocationEntryUpdateManyArgs>

export const LocationEntryDeleteManyArgsSchema: z.ZodType<Prisma.LocationEntryDeleteManyArgs> = z.object({
  where: LocationEntryWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.LocationEntryDeleteManyArgs>

export const ProjectCreateArgsSchema: z.ZodType<Prisma.ProjectCreateArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  data: z.union([ ProjectCreateInputSchema,ProjectUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectCreateArgs>

export const ProjectUpsertArgsSchema: z.ZodType<Prisma.ProjectUpsertArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
  create: z.union([ ProjectCreateInputSchema,ProjectUncheckedCreateInputSchema ]),
  update: z.union([ ProjectUpdateInputSchema,ProjectUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectUpsertArgs>

export const ProjectCreateManyArgsSchema: z.ZodType<Prisma.ProjectCreateManyArgs> = z.object({
  data: ProjectCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ProjectCreateManyArgs>

export const ProjectDeleteArgsSchema: z.ZodType<Prisma.ProjectDeleteArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectDeleteArgs>

export const ProjectUpdateArgsSchema: z.ZodType<Prisma.ProjectUpdateArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  data: z.union([ ProjectUpdateInputSchema,ProjectUncheckedUpdateInputSchema ]),
  where: ProjectWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectUpdateArgs>

export const ProjectUpdateManyArgsSchema: z.ZodType<Prisma.ProjectUpdateManyArgs> = z.object({
  data: z.union([ ProjectUpdateManyMutationInputSchema,ProjectUncheckedUpdateManyInputSchema ]),
  where: ProjectWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectUpdateManyArgs>

export const ProjectDeleteManyArgsSchema: z.ZodType<Prisma.ProjectDeleteManyArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectDeleteManyArgs>

export const ProjectPropertyCreateArgsSchema: z.ZodType<Prisma.ProjectPropertyCreateArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  data: z.union([ ProjectPropertyCreateInputSchema,ProjectPropertyUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectPropertyCreateArgs>

export const ProjectPropertyUpsertArgsSchema: z.ZodType<Prisma.ProjectPropertyUpsertArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  where: ProjectPropertyWhereUniqueInputSchema,
  create: z.union([ ProjectPropertyCreateInputSchema,ProjectPropertyUncheckedCreateInputSchema ]),
  update: z.union([ ProjectPropertyUpdateInputSchema,ProjectPropertyUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectPropertyUpsertArgs>

export const ProjectPropertyCreateManyArgsSchema: z.ZodType<Prisma.ProjectPropertyCreateManyArgs> = z.object({
  data: ProjectPropertyCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyCreateManyArgs>

export const ProjectPropertyDeleteArgsSchema: z.ZodType<Prisma.ProjectPropertyDeleteArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  where: ProjectPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyDeleteArgs>

export const ProjectPropertyUpdateArgsSchema: z.ZodType<Prisma.ProjectPropertyUpdateArgs> = z.object({
  select: ProjectPropertySelectSchema.optional(),
  include: ProjectPropertyIncludeSchema.optional(),
  data: z.union([ ProjectPropertyUpdateInputSchema,ProjectPropertyUncheckedUpdateInputSchema ]),
  where: ProjectPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyUpdateArgs>

export const ProjectPropertyUpdateManyArgsSchema: z.ZodType<Prisma.ProjectPropertyUpdateManyArgs> = z.object({
  data: z.union([ ProjectPropertyUpdateManyMutationInputSchema,ProjectPropertyUncheckedUpdateManyInputSchema ]),
  where: ProjectPropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyUpdateManyArgs>

export const ProjectPropertyDeleteManyArgsSchema: z.ZodType<Prisma.ProjectPropertyDeleteManyArgs> = z.object({
  where: ProjectPropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyDeleteManyArgs>

export const ProjectPropertyValueCreateArgsSchema: z.ZodType<Prisma.ProjectPropertyValueCreateArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  data: z.union([ ProjectPropertyValueCreateInputSchema,ProjectPropertyValueUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueCreateArgs>

export const ProjectPropertyValueUpsertArgsSchema: z.ZodType<Prisma.ProjectPropertyValueUpsertArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  where: ProjectPropertyValueWhereUniqueInputSchema,
  create: z.union([ ProjectPropertyValueCreateInputSchema,ProjectPropertyValueUncheckedCreateInputSchema ]),
  update: z.union([ ProjectPropertyValueUpdateInputSchema,ProjectPropertyValueUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueUpsertArgs>

export const ProjectPropertyValueCreateManyArgsSchema: z.ZodType<Prisma.ProjectPropertyValueCreateManyArgs> = z.object({
  data: ProjectPropertyValueCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueCreateManyArgs>

export const ProjectPropertyValueDeleteArgsSchema: z.ZodType<Prisma.ProjectPropertyValueDeleteArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  where: ProjectPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyValueDeleteArgs>

export const ProjectPropertyValueUpdateArgsSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateArgs> = z.object({
  select: ProjectPropertyValueSelectSchema.optional(),
  include: ProjectPropertyValueIncludeSchema.optional(),
  data: z.union([ ProjectPropertyValueUpdateInputSchema,ProjectPropertyValueUncheckedUpdateInputSchema ]),
  where: ProjectPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectPropertyValueUpdateArgs>

export const ProjectPropertyValueUpdateManyArgsSchema: z.ZodType<Prisma.ProjectPropertyValueUpdateManyArgs> = z.object({
  data: z.union([ ProjectPropertyValueUpdateManyMutationInputSchema,ProjectPropertyValueUncheckedUpdateManyInputSchema ]),
  where: ProjectPropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueUpdateManyArgs>

export const ProjectPropertyValueDeleteManyArgsSchema: z.ZodType<Prisma.ProjectPropertyValueDeleteManyArgs> = z.object({
  where: ProjectPropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectPropertyValueDeleteManyArgs>

export const TaskCreateArgsSchema: z.ZodType<Prisma.TaskCreateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskCreateArgs>

export const TaskUpsertArgsSchema: z.ZodType<Prisma.TaskUpsertArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  create: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
  update: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskUpsertArgs>

export const TaskCreateManyArgsSchema: z.ZodType<Prisma.TaskCreateManyArgs> = z.object({
  data: TaskCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaskCreateManyArgs>

export const TaskDeleteArgsSchema: z.ZodType<Prisma.TaskDeleteArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskDeleteArgs>

export const TaskUpdateArgsSchema: z.ZodType<Prisma.TaskUpdateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
  where: TaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskUpdateArgs>

export const TaskUpdateManyArgsSchema: z.ZodType<Prisma.TaskUpdateManyArgs> = z.object({
  data: z.union([ TaskUpdateManyMutationInputSchema,TaskUncheckedUpdateManyInputSchema ]),
  where: TaskWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskUpdateManyArgs>

export const TaskDeleteManyArgsSchema: z.ZodType<Prisma.TaskDeleteManyArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskDeleteManyArgs>

export const TaskPropertyCreateArgsSchema: z.ZodType<Prisma.TaskPropertyCreateArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  data: z.union([ TaskPropertyCreateInputSchema,TaskPropertyUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskPropertyCreateArgs>

export const TaskPropertyUpsertArgsSchema: z.ZodType<Prisma.TaskPropertyUpsertArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  where: TaskPropertyWhereUniqueInputSchema,
  create: z.union([ TaskPropertyCreateInputSchema,TaskPropertyUncheckedCreateInputSchema ]),
  update: z.union([ TaskPropertyUpdateInputSchema,TaskPropertyUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskPropertyUpsertArgs>

export const TaskPropertyCreateManyArgsSchema: z.ZodType<Prisma.TaskPropertyCreateManyArgs> = z.object({
  data: TaskPropertyCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyCreateManyArgs>

export const TaskPropertyDeleteArgsSchema: z.ZodType<Prisma.TaskPropertyDeleteArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  where: TaskPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyDeleteArgs>

export const TaskPropertyUpdateArgsSchema: z.ZodType<Prisma.TaskPropertyUpdateArgs> = z.object({
  select: TaskPropertySelectSchema.optional(),
  include: TaskPropertyIncludeSchema.optional(),
  data: z.union([ TaskPropertyUpdateInputSchema,TaskPropertyUncheckedUpdateInputSchema ]),
  where: TaskPropertyWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyUpdateArgs>

export const TaskPropertyUpdateManyArgsSchema: z.ZodType<Prisma.TaskPropertyUpdateManyArgs> = z.object({
  data: z.union([ TaskPropertyUpdateManyMutationInputSchema,TaskPropertyUncheckedUpdateManyInputSchema ]),
  where: TaskPropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyUpdateManyArgs>

export const TaskPropertyDeleteManyArgsSchema: z.ZodType<Prisma.TaskPropertyDeleteManyArgs> = z.object({
  where: TaskPropertyWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyDeleteManyArgs>

export const TaskPropertyValueCreateArgsSchema: z.ZodType<Prisma.TaskPropertyValueCreateArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  data: z.union([ TaskPropertyValueCreateInputSchema,TaskPropertyValueUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskPropertyValueCreateArgs>

export const TaskPropertyValueUpsertArgsSchema: z.ZodType<Prisma.TaskPropertyValueUpsertArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  where: TaskPropertyValueWhereUniqueInputSchema,
  create: z.union([ TaskPropertyValueCreateInputSchema,TaskPropertyValueUncheckedCreateInputSchema ]),
  update: z.union([ TaskPropertyValueUpdateInputSchema,TaskPropertyValueUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskPropertyValueUpsertArgs>

export const TaskPropertyValueCreateManyArgsSchema: z.ZodType<Prisma.TaskPropertyValueCreateManyArgs> = z.object({
  data: TaskPropertyValueCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueCreateManyArgs>

export const TaskPropertyValueDeleteArgsSchema: z.ZodType<Prisma.TaskPropertyValueDeleteArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  where: TaskPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyValueDeleteArgs>

export const TaskPropertyValueUpdateArgsSchema: z.ZodType<Prisma.TaskPropertyValueUpdateArgs> = z.object({
  select: TaskPropertyValueSelectSchema.optional(),
  include: TaskPropertyValueIncludeSchema.optional(),
  data: z.union([ TaskPropertyValueUpdateInputSchema,TaskPropertyValueUncheckedUpdateInputSchema ]),
  where: TaskPropertyValueWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskPropertyValueUpdateArgs>

export const TaskPropertyValueUpdateManyArgsSchema: z.ZodType<Prisma.TaskPropertyValueUpdateManyArgs> = z.object({
  data: z.union([ TaskPropertyValueUpdateManyMutationInputSchema,TaskPropertyValueUncheckedUpdateManyInputSchema ]),
  where: TaskPropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueUpdateManyArgs>

export const TaskPropertyValueDeleteManyArgsSchema: z.ZodType<Prisma.TaskPropertyValueDeleteManyArgs> = z.object({
  where: TaskPropertyValueWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskPropertyValueDeleteManyArgs>

export const TaskStatusCreateArgsSchema: z.ZodType<Prisma.TaskStatusCreateArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  data: z.union([ TaskStatusCreateInputSchema,TaskStatusUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskStatusCreateArgs>

export const TaskStatusUpsertArgsSchema: z.ZodType<Prisma.TaskStatusUpsertArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  where: TaskStatusWhereUniqueInputSchema,
  create: z.union([ TaskStatusCreateInputSchema,TaskStatusUncheckedCreateInputSchema ]),
  update: z.union([ TaskStatusUpdateInputSchema,TaskStatusUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaskStatusUpsertArgs>

export const TaskStatusCreateManyArgsSchema: z.ZodType<Prisma.TaskStatusCreateManyArgs> = z.object({
  data: TaskStatusCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaskStatusCreateManyArgs>

export const TaskStatusDeleteArgsSchema: z.ZodType<Prisma.TaskStatusDeleteArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  where: TaskStatusWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskStatusDeleteArgs>

export const TaskStatusUpdateArgsSchema: z.ZodType<Prisma.TaskStatusUpdateArgs> = z.object({
  select: TaskStatusSelectSchema.optional(),
  include: TaskStatusIncludeSchema.optional(),
  data: z.union([ TaskStatusUpdateInputSchema,TaskStatusUncheckedUpdateInputSchema ]),
  where: TaskStatusWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaskStatusUpdateArgs>

export const TaskStatusUpdateManyArgsSchema: z.ZodType<Prisma.TaskStatusUpdateManyArgs> = z.object({
  data: z.union([ TaskStatusUpdateManyMutationInputSchema,TaskStatusUncheckedUpdateManyInputSchema ]),
  where: TaskStatusWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskStatusUpdateManyArgs>

export const TaskStatusDeleteManyArgsSchema: z.ZodType<Prisma.TaskStatusDeleteManyArgs> = z.object({
  where: TaskStatusWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaskStatusDeleteManyArgs>

export const TenantCreateArgsSchema: z.ZodType<Prisma.TenantCreateArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  data: z.union([ TenantCreateInputSchema,TenantUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TenantCreateArgs>

export const TenantUpsertArgsSchema: z.ZodType<Prisma.TenantUpsertArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
  create: z.union([ TenantCreateInputSchema,TenantUncheckedCreateInputSchema ]),
  update: z.union([ TenantUpdateInputSchema,TenantUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TenantUpsertArgs>

export const TenantCreateManyArgsSchema: z.ZodType<Prisma.TenantCreateManyArgs> = z.object({
  data: TenantCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TenantCreateManyArgs>

export const TenantDeleteArgsSchema: z.ZodType<Prisma.TenantDeleteArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantDeleteArgs>

export const TenantUpdateArgsSchema: z.ZodType<Prisma.TenantUpdateArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  data: z.union([ TenantUpdateInputSchema,TenantUncheckedUpdateInputSchema ]),
  where: TenantWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantUpdateArgs>

export const TenantUpdateManyArgsSchema: z.ZodType<Prisma.TenantUpdateManyArgs> = z.object({
  data: z.union([ TenantUpdateManyMutationInputSchema,TenantUncheckedUpdateManyInputSchema ]),
  where: TenantWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TenantUpdateManyArgs>

export const TenantDeleteManyArgsSchema: z.ZodType<Prisma.TenantDeleteManyArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TenantDeleteManyArgs>

export const TenantUserCreateArgsSchema: z.ZodType<Prisma.TenantUserCreateArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  data: z.union([ TenantUserCreateInputSchema,TenantUserUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TenantUserCreateArgs>

export const TenantUserUpsertArgsSchema: z.ZodType<Prisma.TenantUserUpsertArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  where: TenantUserWhereUniqueInputSchema,
  create: z.union([ TenantUserCreateInputSchema,TenantUserUncheckedCreateInputSchema ]),
  update: z.union([ TenantUserUpdateInputSchema,TenantUserUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TenantUserUpsertArgs>

export const TenantUserCreateManyArgsSchema: z.ZodType<Prisma.TenantUserCreateManyArgs> = z.object({
  data: TenantUserCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TenantUserCreateManyArgs>

export const TenantUserDeleteArgsSchema: z.ZodType<Prisma.TenantUserDeleteArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  where: TenantUserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantUserDeleteArgs>

export const TenantUserUpdateArgsSchema: z.ZodType<Prisma.TenantUserUpdateArgs> = z.object({
  select: TenantUserSelectSchema.optional(),
  include: TenantUserIncludeSchema.optional(),
  data: z.union([ TenantUserUpdateInputSchema,TenantUserUncheckedUpdateInputSchema ]),
  where: TenantUserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TenantUserUpdateArgs>

export const TenantUserUpdateManyArgsSchema: z.ZodType<Prisma.TenantUserUpdateManyArgs> = z.object({
  data: z.union([ TenantUserUpdateManyMutationInputSchema,TenantUserUncheckedUpdateManyInputSchema ]),
  where: TenantUserWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TenantUserUpdateManyArgs>

export const TenantUserDeleteManyArgsSchema: z.ZodType<Prisma.TenantUserDeleteManyArgs> = z.object({
  where: TenantUserWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TenantUserDeleteManyArgs>

export const TimeBlockCreateArgsSchema: z.ZodType<Prisma.TimeBlockCreateArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  data: z.union([ TimeBlockCreateInputSchema,TimeBlockUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TimeBlockCreateArgs>

export const TimeBlockUpsertArgsSchema: z.ZodType<Prisma.TimeBlockUpsertArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  where: TimeBlockWhereUniqueInputSchema,
  create: z.union([ TimeBlockCreateInputSchema,TimeBlockUncheckedCreateInputSchema ]),
  update: z.union([ TimeBlockUpdateInputSchema,TimeBlockUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TimeBlockUpsertArgs>

export const TimeBlockCreateManyArgsSchema: z.ZodType<Prisma.TimeBlockCreateManyArgs> = z.object({
  data: TimeBlockCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TimeBlockCreateManyArgs>

export const TimeBlockDeleteArgsSchema: z.ZodType<Prisma.TimeBlockDeleteArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  where: TimeBlockWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TimeBlockDeleteArgs>

export const TimeBlockUpdateArgsSchema: z.ZodType<Prisma.TimeBlockUpdateArgs> = z.object({
  select: TimeBlockSelectSchema.optional(),
  include: TimeBlockIncludeSchema.optional(),
  data: z.union([ TimeBlockUpdateInputSchema,TimeBlockUncheckedUpdateInputSchema ]),
  where: TimeBlockWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TimeBlockUpdateArgs>

export const TimeBlockUpdateManyArgsSchema: z.ZodType<Prisma.TimeBlockUpdateManyArgs> = z.object({
  data: z.union([ TimeBlockUpdateManyMutationInputSchema,TimeBlockUncheckedUpdateManyInputSchema ]),
  where: TimeBlockWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TimeBlockUpdateManyArgs>

export const TimeBlockDeleteManyArgsSchema: z.ZodType<Prisma.TimeBlockDeleteManyArgs> = z.object({
  where: TimeBlockWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TimeBlockDeleteManyArgs>

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.UserCreateArgs>

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.UserUpsertArgs>

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: UserCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.UserCreateManyArgs>

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserDeleteArgs>

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserUpdateArgs>

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UserUpdateManyArgs>

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UserDeleteManyArgs>

export const UserTaskCreateArgsSchema: z.ZodType<Prisma.UserTaskCreateArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  data: z.union([ UserTaskCreateInputSchema,UserTaskUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.UserTaskCreateArgs>

export const UserTaskUpsertArgsSchema: z.ZodType<Prisma.UserTaskUpsertArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  where: UserTaskWhereUniqueInputSchema,
  create: z.union([ UserTaskCreateInputSchema,UserTaskUncheckedCreateInputSchema ]),
  update: z.union([ UserTaskUpdateInputSchema,UserTaskUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.UserTaskUpsertArgs>

export const UserTaskCreateManyArgsSchema: z.ZodType<Prisma.UserTaskCreateManyArgs> = z.object({
  data: UserTaskCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.UserTaskCreateManyArgs>

export const UserTaskDeleteArgsSchema: z.ZodType<Prisma.UserTaskDeleteArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  where: UserTaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserTaskDeleteArgs>

export const UserTaskUpdateArgsSchema: z.ZodType<Prisma.UserTaskUpdateArgs> = z.object({
  select: UserTaskSelectSchema.optional(),
  include: UserTaskIncludeSchema.optional(),
  data: z.union([ UserTaskUpdateInputSchema,UserTaskUncheckedUpdateInputSchema ]),
  where: UserTaskWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UserTaskUpdateArgs>

export const UserTaskUpdateManyArgsSchema: z.ZodType<Prisma.UserTaskUpdateManyArgs> = z.object({
  data: z.union([ UserTaskUpdateManyMutationInputSchema,UserTaskUncheckedUpdateManyInputSchema ]),
  where: UserTaskWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UserTaskUpdateManyArgs>

export const UserTaskDeleteManyArgsSchema: z.ZodType<Prisma.UserTaskDeleteManyArgs> = z.object({
  where: UserTaskWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UserTaskDeleteManyArgs>

interface ApiKeyGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ApiKeyArgs
  readonly type: Prisma.ApiKeyGetPayload<this['_A']>
}

interface DailyLogGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.DailyLogArgs
  readonly type: Prisma.DailyLogGetPayload<this['_A']>
}

interface DailyLogItemGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.DailyLogItemArgs
  readonly type: Prisma.DailyLogItemGetPayload<this['_A']>
}

interface EquipmentGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.EquipmentArgs
  readonly type: Prisma.EquipmentGetPayload<this['_A']>
}

interface EquipmentPropertyGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.EquipmentPropertyArgs
  readonly type: Prisma.EquipmentPropertyGetPayload<this['_A']>
}

interface EquipmentPropertyValueGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.EquipmentPropertyValueArgs
  readonly type: Prisma.EquipmentPropertyValueGetPayload<this['_A']>
}

interface FeedbackGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.FeedbackArgs
  readonly type: Prisma.FeedbackGetPayload<this['_A']>
}

interface FileGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.FileArgs
  readonly type: Prisma.FileGetPayload<this['_A']>
}

interface FilePropertyGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.FilePropertyArgs
  readonly type: Prisma.FilePropertyGetPayload<this['_A']>
}

interface FilePropertyValueGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.FilePropertyValueArgs
  readonly type: Prisma.FilePropertyValueGetPayload<this['_A']>
}

interface ImageGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ImageArgs
  readonly type: Prisma.ImageGetPayload<this['_A']>
}

interface LocationEntryGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.LocationEntryArgs
  readonly type: Prisma.LocationEntryGetPayload<this['_A']>
}

interface ProjectGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ProjectArgs
  readonly type: Prisma.ProjectGetPayload<this['_A']>
}

interface ProjectPropertyGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ProjectPropertyArgs
  readonly type: Prisma.ProjectPropertyGetPayload<this['_A']>
}

interface ProjectPropertyValueGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ProjectPropertyValueArgs
  readonly type: Prisma.ProjectPropertyValueGetPayload<this['_A']>
}

interface TaskGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaskArgs
  readonly type: Prisma.TaskGetPayload<this['_A']>
}

interface TaskPropertyGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaskPropertyArgs
  readonly type: Prisma.TaskPropertyGetPayload<this['_A']>
}

interface TaskPropertyValueGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaskPropertyValueArgs
  readonly type: Prisma.TaskPropertyValueGetPayload<this['_A']>
}

interface TaskStatusGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaskStatusArgs
  readonly type: Prisma.TaskStatusGetPayload<this['_A']>
}

interface TenantGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TenantArgs
  readonly type: Prisma.TenantGetPayload<this['_A']>
}

interface TenantUserGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TenantUserArgs
  readonly type: Prisma.TenantUserGetPayload<this['_A']>
}

interface TimeBlockGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TimeBlockArgs
  readonly type: Prisma.TimeBlockGetPayload<this['_A']>
}

interface UserGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.UserArgs
  readonly type: Prisma.UserGetPayload<this['_A']>
}

interface UserTaskGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.UserTaskArgs
  readonly type: Prisma.UserTaskGetPayload<this['_A']>
}

export const tableSchemas = {
  ApiKey: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "tenantId",
        "TEXT"
      ],
      [
        "userId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("Tenant", "tenantId", "id", "Tenant", "ApiKeyToTenant", "one"),
      new Relation("User", "userId", "id", "User", "ApiKeyToUser", "one"),
    ],
    modelSchema: (ApiKeyCreateInputSchema as any)
      .partial()
      .or((ApiKeyUncheckedCreateInputSchema as any).partial()),
    createSchema: ApiKeyCreateArgsSchema,
    createManySchema: ApiKeyCreateManyArgsSchema,
    findUniqueSchema: ApiKeyFindUniqueArgsSchema,
    findSchema: ApiKeyFindFirstArgsSchema,
    updateSchema: ApiKeyUpdateArgsSchema,
    updateManySchema: ApiKeyUpdateManyArgsSchema,
    upsertSchema: ApiKeyUpsertArgsSchema,
    deleteSchema: ApiKeyDeleteArgsSchema,
    deleteManySchema: ApiKeyDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ApiKeyCreateInputSchema>,
    Prisma.ApiKeyCreateArgs['data'],
    Prisma.ApiKeyUpdateArgs['data'],
    Prisma.ApiKeyFindFirstArgs['select'],
    Prisma.ApiKeyFindFirstArgs['where'],
    Prisma.ApiKeyFindUniqueArgs['where'],
    Omit<Prisma.ApiKeyInclude, '_count'>,
    Prisma.ApiKeyFindFirstArgs['orderBy'],
    Prisma.ApiKeyScalarFieldEnum,
    ApiKeyGetPayload
  >,
  DailyLog: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "date",
        "DATE"
      ],
      [
        "status",
        "TEXT"
      ],
      [
        "note",
        "TEXT"
      ],
      [
        "rating",
        "INT4"
      ],
      [
        "ratingNote",
        "TEXT"
      ],
      [
        "managerNote",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "DailyLogToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "DailyLogToTenant", "one"),
      new Relation("DailyLogItem", "", "", "DailyLogItem", "DailyLogToDailyLogItem", "many"),
      new Relation("File", "", "", "File", "DailyLogToFile", "many"),
      new Relation("LocationEntry", "", "", "LocationEntry", "DailyLogToLocationEntry", "many"),
    ],
    modelSchema: (DailyLogCreateInputSchema as any)
      .partial()
      .or((DailyLogUncheckedCreateInputSchema as any).partial()),
    createSchema: DailyLogCreateArgsSchema,
    createManySchema: DailyLogCreateManyArgsSchema,
    findUniqueSchema: DailyLogFindUniqueArgsSchema,
    findSchema: DailyLogFindFirstArgsSchema,
    updateSchema: DailyLogUpdateArgsSchema,
    updateManySchema: DailyLogUpdateManyArgsSchema,
    upsertSchema: DailyLogUpsertArgsSchema,
    deleteSchema: DailyLogDeleteArgsSchema,
    deleteManySchema: DailyLogDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof DailyLogCreateInputSchema>,
    Prisma.DailyLogCreateArgs['data'],
    Prisma.DailyLogUpdateArgs['data'],
    Prisma.DailyLogFindFirstArgs['select'],
    Prisma.DailyLogFindFirstArgs['where'],
    Prisma.DailyLogFindUniqueArgs['where'],
    Omit<Prisma.DailyLogInclude, '_count'>,
    Prisma.DailyLogFindFirstArgs['orderBy'],
    Prisma.DailyLogScalarFieldEnum,
    DailyLogGetPayload
  >,
  DailyLogItem: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "note",
        "TEXT"
      ],
      [
        "isNoteVisible",
        "BOOL"
      ],
      [
        "itemType",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "taskId",
        "TEXT"
      ],
      [
        "dailyLogId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ],
      [
        "equipmentId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "DailyLogItemToUser", "one"),
      new Relation("DailyLog", "dailyLogId", "id", "DailyLog", "DailyLogToDailyLogItem", "one"),
      new Relation("Equipment", "equipmentId", "id", "Equipment", "DailyLogItemToEquipment", "one"),
      new Relation("Task", "taskId", "id", "Task", "DailyLogItemToTask", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "DailyLogItemToTenant", "one"),
      new Relation("TimeBlock", "", "", "TimeBlock", "DailyLogItemToTimeBlock", "many"),
    ],
    modelSchema: (DailyLogItemCreateInputSchema as any)
      .partial()
      .or((DailyLogItemUncheckedCreateInputSchema as any).partial()),
    createSchema: DailyLogItemCreateArgsSchema,
    createManySchema: DailyLogItemCreateManyArgsSchema,
    findUniqueSchema: DailyLogItemFindUniqueArgsSchema,
    findSchema: DailyLogItemFindFirstArgsSchema,
    updateSchema: DailyLogItemUpdateArgsSchema,
    updateManySchema: DailyLogItemUpdateManyArgsSchema,
    upsertSchema: DailyLogItemUpsertArgsSchema,
    deleteSchema: DailyLogItemDeleteArgsSchema,
    deleteManySchema: DailyLogItemDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof DailyLogItemCreateInputSchema>,
    Prisma.DailyLogItemCreateArgs['data'],
    Prisma.DailyLogItemUpdateArgs['data'],
    Prisma.DailyLogItemFindFirstArgs['select'],
    Prisma.DailyLogItemFindFirstArgs['where'],
    Prisma.DailyLogItemFindUniqueArgs['where'],
    Omit<Prisma.DailyLogItemInclude, '_count'>,
    Prisma.DailyLogItemFindFirstArgs['orderBy'],
    Prisma.DailyLogItemScalarFieldEnum,
    DailyLogItemGetPayload
  >,
  Equipment: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "organization",
        "TEXT"
      ],
      [
        "description",
        "TEXT"
      ],
      [
        "updatedAt",
        "TIMESTAMP"
      ],
      [
        "createdAt",
        "TIMESTAMP"
      ],
      [
        "archivedAt",
        "TIMESTAMP"
      ],
      [
        "deletedAt",
        "TIMESTAMP"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ],
      [
        "userId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("DailyLogItem", "", "", "DailyLogItem", "DailyLogItemToEquipment", "many"),
      new Relation("User_Equipment_createdByToUser", "createdBy", "id", "User", "Equipment_createdByToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "EquipmentToTenant", "one"),
      new Relation("User_Equipment_userIdToUser", "userId", "id", "User", "Equipment_userIdToUser", "one"),
      new Relation("EquipmentPropertyValue", "", "", "EquipmentPropertyValue", "EquipmentToEquipmentPropertyValue", "many"),
    ],
    modelSchema: (EquipmentCreateInputSchema as any)
      .partial()
      .or((EquipmentUncheckedCreateInputSchema as any).partial()),
    createSchema: EquipmentCreateArgsSchema,
    createManySchema: EquipmentCreateManyArgsSchema,
    findUniqueSchema: EquipmentFindUniqueArgsSchema,
    findSchema: EquipmentFindFirstArgsSchema,
    updateSchema: EquipmentUpdateArgsSchema,
    updateManySchema: EquipmentUpdateManyArgsSchema,
    upsertSchema: EquipmentUpsertArgsSchema,
    deleteSchema: EquipmentDeleteArgsSchema,
    deleteManySchema: EquipmentDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof EquipmentCreateInputSchema>,
    Prisma.EquipmentCreateArgs['data'],
    Prisma.EquipmentUpdateArgs['data'],
    Prisma.EquipmentFindFirstArgs['select'],
    Prisma.EquipmentFindFirstArgs['where'],
    Prisma.EquipmentFindUniqueArgs['where'],
    Omit<Prisma.EquipmentInclude, '_count'>,
    Prisma.EquipmentFindFirstArgs['orderBy'],
    Prisma.EquipmentScalarFieldEnum,
    EquipmentGetPayload
  >,
  EquipmentProperty: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "order",
        "INT4"
      ],
      [
        "createdAt",
        "TIMESTAMP"
      ],
      [
        "updatedAt",
        "TIMESTAMP"
      ],
      [
        "archivedAt",
        "TIMESTAMP"
      ],
      [
        "deletedAt",
        "TIMESTAMP"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "EquipmentPropertyToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "EquipmentPropertyToTenant", "one"),
      new Relation("EquipmentPropertyValue", "", "", "EquipmentPropertyValue", "EquipmentPropertyToEquipmentPropertyValue", "many"),
    ],
    modelSchema: (EquipmentPropertyCreateInputSchema as any)
      .partial()
      .or((EquipmentPropertyUncheckedCreateInputSchema as any).partial()),
    createSchema: EquipmentPropertyCreateArgsSchema,
    createManySchema: EquipmentPropertyCreateManyArgsSchema,
    findUniqueSchema: EquipmentPropertyFindUniqueArgsSchema,
    findSchema: EquipmentPropertyFindFirstArgsSchema,
    updateSchema: EquipmentPropertyUpdateArgsSchema,
    updateManySchema: EquipmentPropertyUpdateManyArgsSchema,
    upsertSchema: EquipmentPropertyUpsertArgsSchema,
    deleteSchema: EquipmentPropertyDeleteArgsSchema,
    deleteManySchema: EquipmentPropertyDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof EquipmentPropertyCreateInputSchema>,
    Prisma.EquipmentPropertyCreateArgs['data'],
    Prisma.EquipmentPropertyUpdateArgs['data'],
    Prisma.EquipmentPropertyFindFirstArgs['select'],
    Prisma.EquipmentPropertyFindFirstArgs['where'],
    Prisma.EquipmentPropertyFindUniqueArgs['where'],
    Omit<Prisma.EquipmentPropertyInclude, '_count'>,
    Prisma.EquipmentPropertyFindFirstArgs['orderBy'],
    Prisma.EquipmentPropertyScalarFieldEnum,
    EquipmentPropertyGetPayload
  >,
  EquipmentPropertyValue: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "value",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMP"
      ],
      [
        "updatedAt",
        "TIMESTAMP"
      ],
      [
        "archivedAt",
        "TIMESTAMP"
      ],
      [
        "deletedAt",
        "TIMESTAMP"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "equipmentId",
        "TEXT"
      ],
      [
        "equipmentPropertyId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "EquipmentPropertyValueToUser", "one"),
      new Relation("Equipment", "equipmentId", "id", "Equipment", "EquipmentToEquipmentPropertyValue", "one"),
      new Relation("EquipmentProperty", "equipmentPropertyId", "id", "EquipmentProperty", "EquipmentPropertyToEquipmentPropertyValue", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "EquipmentPropertyValueToTenant", "one"),
    ],
    modelSchema: (EquipmentPropertyValueCreateInputSchema as any)
      .partial()
      .or((EquipmentPropertyValueUncheckedCreateInputSchema as any).partial()),
    createSchema: EquipmentPropertyValueCreateArgsSchema,
    createManySchema: EquipmentPropertyValueCreateManyArgsSchema,
    findUniqueSchema: EquipmentPropertyValueFindUniqueArgsSchema,
    findSchema: EquipmentPropertyValueFindFirstArgsSchema,
    updateSchema: EquipmentPropertyValueUpdateArgsSchema,
    updateManySchema: EquipmentPropertyValueUpdateManyArgsSchema,
    upsertSchema: EquipmentPropertyValueUpsertArgsSchema,
    deleteSchema: EquipmentPropertyValueDeleteArgsSchema,
    deleteManySchema: EquipmentPropertyValueDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof EquipmentPropertyValueCreateInputSchema>,
    Prisma.EquipmentPropertyValueCreateArgs['data'],
    Prisma.EquipmentPropertyValueUpdateArgs['data'],
    Prisma.EquipmentPropertyValueFindFirstArgs['select'],
    Prisma.EquipmentPropertyValueFindFirstArgs['where'],
    Prisma.EquipmentPropertyValueFindUniqueArgs['where'],
    Omit<Prisma.EquipmentPropertyValueInclude, '_count'>,
    Prisma.EquipmentPropertyValueFindFirstArgs['orderBy'],
    Prisma.EquipmentPropertyValueScalarFieldEnum,
    EquipmentPropertyValueGetPayload
  >,
  Feedback: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "text",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "FeedbackToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "FeedbackToTenant", "one"),
    ],
    modelSchema: (FeedbackCreateInputSchema as any)
      .partial()
      .or((FeedbackUncheckedCreateInputSchema as any).partial()),
    createSchema: FeedbackCreateArgsSchema,
    createManySchema: FeedbackCreateManyArgsSchema,
    findUniqueSchema: FeedbackFindUniqueArgsSchema,
    findSchema: FeedbackFindFirstArgsSchema,
    updateSchema: FeedbackUpdateArgsSchema,
    updateManySchema: FeedbackUpdateManyArgsSchema,
    upsertSchema: FeedbackUpsertArgsSchema,
    deleteSchema: FeedbackDeleteArgsSchema,
    deleteManySchema: FeedbackDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof FeedbackCreateInputSchema>,
    Prisma.FeedbackCreateArgs['data'],
    Prisma.FeedbackUpdateArgs['data'],
    Prisma.FeedbackFindFirstArgs['select'],
    Prisma.FeedbackFindFirstArgs['where'],
    Prisma.FeedbackFindUniqueArgs['where'],
    Omit<Prisma.FeedbackInclude, '_count'>,
    Prisma.FeedbackFindFirstArgs['orderBy'],
    Prisma.FeedbackScalarFieldEnum,
    FeedbackGetPayload
  >,
  File: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "description",
        "TEXT"
      ],
      [
        "locationLabel",
        "TEXT"
      ],
      [
        "locationLatitude",
        "FLOAT8"
      ],
      [
        "locationLongitude",
        "FLOAT8"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "imageId",
        "TEXT"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ],
      [
        "projectId",
        "TEXT"
      ],
      [
        "dailyLogId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "FileToUser", "one"),
      new Relation("DailyLog", "dailyLogId", "id", "DailyLog", "DailyLogToFile", "one"),
      new Relation("Image", "imageId", "id", "Image", "FileToImage", "one"),
      new Relation("Project", "projectId", "id", "Project", "FileToProject", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "FileToTenant", "one"),
      new Relation("FilePropertyValue", "", "", "FilePropertyValue", "FileToFilePropertyValue", "many"),
    ],
    modelSchema: (FileCreateInputSchema as any)
      .partial()
      .or((FileUncheckedCreateInputSchema as any).partial()),
    createSchema: FileCreateArgsSchema,
    createManySchema: FileCreateManyArgsSchema,
    findUniqueSchema: FileFindUniqueArgsSchema,
    findSchema: FileFindFirstArgsSchema,
    updateSchema: FileUpdateArgsSchema,
    updateManySchema: FileUpdateManyArgsSchema,
    upsertSchema: FileUpsertArgsSchema,
    deleteSchema: FileDeleteArgsSchema,
    deleteManySchema: FileDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof FileCreateInputSchema>,
    Prisma.FileCreateArgs['data'],
    Prisma.FileUpdateArgs['data'],
    Prisma.FileFindFirstArgs['select'],
    Prisma.FileFindFirstArgs['where'],
    Prisma.FileFindUniqueArgs['where'],
    Omit<Prisma.FileInclude, '_count'>,
    Prisma.FileFindFirstArgs['orderBy'],
    Prisma.FileScalarFieldEnum,
    FileGetPayload
  >,
  FileProperty: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "order",
        "INT4"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "FilePropertyToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "FilePropertyToTenant", "one"),
      new Relation("FilePropertyValue", "", "", "FilePropertyValue", "FilePropertyToFilePropertyValue", "many"),
    ],
    modelSchema: (FilePropertyCreateInputSchema as any)
      .partial()
      .or((FilePropertyUncheckedCreateInputSchema as any).partial()),
    createSchema: FilePropertyCreateArgsSchema,
    createManySchema: FilePropertyCreateManyArgsSchema,
    findUniqueSchema: FilePropertyFindUniqueArgsSchema,
    findSchema: FilePropertyFindFirstArgsSchema,
    updateSchema: FilePropertyUpdateArgsSchema,
    updateManySchema: FilePropertyUpdateManyArgsSchema,
    upsertSchema: FilePropertyUpsertArgsSchema,
    deleteSchema: FilePropertyDeleteArgsSchema,
    deleteManySchema: FilePropertyDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof FilePropertyCreateInputSchema>,
    Prisma.FilePropertyCreateArgs['data'],
    Prisma.FilePropertyUpdateArgs['data'],
    Prisma.FilePropertyFindFirstArgs['select'],
    Prisma.FilePropertyFindFirstArgs['where'],
    Prisma.FilePropertyFindUniqueArgs['where'],
    Omit<Prisma.FilePropertyInclude, '_count'>,
    Prisma.FilePropertyFindFirstArgs['orderBy'],
    Prisma.FilePropertyScalarFieldEnum,
    FilePropertyGetPayload
  >,
  FilePropertyValue: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "value",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "fileId",
        "TEXT"
      ],
      [
        "propertyId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "FilePropertyValueToUser", "one"),
      new Relation("File", "fileId", "id", "File", "FileToFilePropertyValue", "one"),
      new Relation("FileProperty", "propertyId", "id", "FileProperty", "FilePropertyToFilePropertyValue", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "FilePropertyValueToTenant", "one"),
    ],
    modelSchema: (FilePropertyValueCreateInputSchema as any)
      .partial()
      .or((FilePropertyValueUncheckedCreateInputSchema as any).partial()),
    createSchema: FilePropertyValueCreateArgsSchema,
    createManySchema: FilePropertyValueCreateManyArgsSchema,
    findUniqueSchema: FilePropertyValueFindUniqueArgsSchema,
    findSchema: FilePropertyValueFindFirstArgsSchema,
    updateSchema: FilePropertyValueUpdateArgsSchema,
    updateManySchema: FilePropertyValueUpdateManyArgsSchema,
    upsertSchema: FilePropertyValueUpsertArgsSchema,
    deleteSchema: FilePropertyValueDeleteArgsSchema,
    deleteManySchema: FilePropertyValueDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof FilePropertyValueCreateInputSchema>,
    Prisma.FilePropertyValueCreateArgs['data'],
    Prisma.FilePropertyValueUpdateArgs['data'],
    Prisma.FilePropertyValueFindFirstArgs['select'],
    Prisma.FilePropertyValueFindFirstArgs['where'],
    Prisma.FilePropertyValueFindUniqueArgs['where'],
    Omit<Prisma.FilePropertyValueInclude, '_count'>,
    Prisma.FilePropertyValueFindFirstArgs['orderBy'],
    Prisma.FilePropertyValueScalarFieldEnum,
    FilePropertyValueGetPayload
  >,
  Image: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "bucketId",
        "TEXT"
      ],
      [
        "blurhash",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("File", "", "", "File", "FileToImage", "many"),
      new Relation("User_Image_createdByToUser", "createdBy", "id", "User", "Image_createdByToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "ImageToTenant", "one"),
      new Relation("User_User_imageIdToImage", "", "", "User", "User_imageIdToImage", "many"),
    ],
    modelSchema: (ImageCreateInputSchema as any)
      .partial()
      .or((ImageUncheckedCreateInputSchema as any).partial()),
    createSchema: ImageCreateArgsSchema,
    createManySchema: ImageCreateManyArgsSchema,
    findUniqueSchema: ImageFindUniqueArgsSchema,
    findSchema: ImageFindFirstArgsSchema,
    updateSchema: ImageUpdateArgsSchema,
    updateManySchema: ImageUpdateManyArgsSchema,
    upsertSchema: ImageUpsertArgsSchema,
    deleteSchema: ImageDeleteArgsSchema,
    deleteManySchema: ImageDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ImageCreateInputSchema>,
    Prisma.ImageCreateArgs['data'],
    Prisma.ImageUpdateArgs['data'],
    Prisma.ImageFindFirstArgs['select'],
    Prisma.ImageFindFirstArgs['where'],
    Prisma.ImageFindUniqueArgs['where'],
    Omit<Prisma.ImageInclude, '_count'>,
    Prisma.ImageFindFirstArgs['orderBy'],
    Prisma.ImageScalarFieldEnum,
    ImageGetPayload
  >,
  LocationEntry: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "latitude",
        "FLOAT8"
      ],
      [
        "longitude",
        "FLOAT8"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "dailyLogId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "LocationEntryToUser", "one"),
      new Relation("DailyLog", "dailyLogId", "id", "DailyLog", "DailyLogToLocationEntry", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "LocationEntryToTenant", "one"),
    ],
    modelSchema: (LocationEntryCreateInputSchema as any)
      .partial()
      .or((LocationEntryUncheckedCreateInputSchema as any).partial()),
    createSchema: LocationEntryCreateArgsSchema,
    createManySchema: LocationEntryCreateManyArgsSchema,
    findUniqueSchema: LocationEntryFindUniqueArgsSchema,
    findSchema: LocationEntryFindFirstArgsSchema,
    updateSchema: LocationEntryUpdateArgsSchema,
    updateManySchema: LocationEntryUpdateManyArgsSchema,
    upsertSchema: LocationEntryUpsertArgsSchema,
    deleteSchema: LocationEntryDeleteArgsSchema,
    deleteManySchema: LocationEntryDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof LocationEntryCreateInputSchema>,
    Prisma.LocationEntryCreateArgs['data'],
    Prisma.LocationEntryUpdateArgs['data'],
    Prisma.LocationEntryFindFirstArgs['select'],
    Prisma.LocationEntryFindFirstArgs['where'],
    Prisma.LocationEntryFindUniqueArgs['where'],
    Omit<Prisma.LocationEntryInclude, '_count'>,
    Prisma.LocationEntryFindFirstArgs['orderBy'],
    Prisma.LocationEntryScalarFieldEnum,
    LocationEntryGetPayload
  >,
  Project: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "progress",
        "FLOAT8"
      ],
      [
        "dueDate",
        "TIMESTAMPTZ"
      ],
      [
        "description",
        "TEXT"
      ],
      [
        "locationLabel",
        "TEXT"
      ],
      [
        "locationLatitude",
        "FLOAT8"
      ],
      [
        "locationLongitude",
        "FLOAT8"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("File", "", "", "File", "FileToProject", "many"),
      new Relation("User", "createdBy", "id", "User", "ProjectToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "ProjectToTenant", "one"),
      new Relation("ProjectPropertyValue", "", "", "ProjectPropertyValue", "ProjectToProjectPropertyValue", "many"),
      new Relation("Task", "", "", "Task", "ProjectToTask", "many"),
    ],
    modelSchema: (ProjectCreateInputSchema as any)
      .partial()
      .or((ProjectUncheckedCreateInputSchema as any).partial()),
    createSchema: ProjectCreateArgsSchema,
    createManySchema: ProjectCreateManyArgsSchema,
    findUniqueSchema: ProjectFindUniqueArgsSchema,
    findSchema: ProjectFindFirstArgsSchema,
    updateSchema: ProjectUpdateArgsSchema,
    updateManySchema: ProjectUpdateManyArgsSchema,
    upsertSchema: ProjectUpsertArgsSchema,
    deleteSchema: ProjectDeleteArgsSchema,
    deleteManySchema: ProjectDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ProjectCreateInputSchema>,
    Prisma.ProjectCreateArgs['data'],
    Prisma.ProjectUpdateArgs['data'],
    Prisma.ProjectFindFirstArgs['select'],
    Prisma.ProjectFindFirstArgs['where'],
    Prisma.ProjectFindUniqueArgs['where'],
    Omit<Prisma.ProjectInclude, '_count'>,
    Prisma.ProjectFindFirstArgs['orderBy'],
    Prisma.ProjectScalarFieldEnum,
    ProjectGetPayload
  >,
  ProjectProperty: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "order",
        "INT4"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "ProjectPropertyToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "ProjectPropertyToTenant", "one"),
      new Relation("ProjectPropertyValue", "", "", "ProjectPropertyValue", "ProjectPropertyToProjectPropertyValue", "many"),
    ],
    modelSchema: (ProjectPropertyCreateInputSchema as any)
      .partial()
      .or((ProjectPropertyUncheckedCreateInputSchema as any).partial()),
    createSchema: ProjectPropertyCreateArgsSchema,
    createManySchema: ProjectPropertyCreateManyArgsSchema,
    findUniqueSchema: ProjectPropertyFindUniqueArgsSchema,
    findSchema: ProjectPropertyFindFirstArgsSchema,
    updateSchema: ProjectPropertyUpdateArgsSchema,
    updateManySchema: ProjectPropertyUpdateManyArgsSchema,
    upsertSchema: ProjectPropertyUpsertArgsSchema,
    deleteSchema: ProjectPropertyDeleteArgsSchema,
    deleteManySchema: ProjectPropertyDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ProjectPropertyCreateInputSchema>,
    Prisma.ProjectPropertyCreateArgs['data'],
    Prisma.ProjectPropertyUpdateArgs['data'],
    Prisma.ProjectPropertyFindFirstArgs['select'],
    Prisma.ProjectPropertyFindFirstArgs['where'],
    Prisma.ProjectPropertyFindUniqueArgs['where'],
    Omit<Prisma.ProjectPropertyInclude, '_count'>,
    Prisma.ProjectPropertyFindFirstArgs['orderBy'],
    Prisma.ProjectPropertyScalarFieldEnum,
    ProjectPropertyGetPayload
  >,
  ProjectPropertyValue: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "value",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "projectId",
        "TEXT"
      ],
      [
        "projectPropertyId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "ProjectPropertyValueToUser", "one"),
      new Relation("Project", "projectId", "id", "Project", "ProjectToProjectPropertyValue", "one"),
      new Relation("ProjectProperty", "projectPropertyId", "id", "ProjectProperty", "ProjectPropertyToProjectPropertyValue", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "ProjectPropertyValueToTenant", "one"),
    ],
    modelSchema: (ProjectPropertyValueCreateInputSchema as any)
      .partial()
      .or((ProjectPropertyValueUncheckedCreateInputSchema as any).partial()),
    createSchema: ProjectPropertyValueCreateArgsSchema,
    createManySchema: ProjectPropertyValueCreateManyArgsSchema,
    findUniqueSchema: ProjectPropertyValueFindUniqueArgsSchema,
    findSchema: ProjectPropertyValueFindFirstArgsSchema,
    updateSchema: ProjectPropertyValueUpdateArgsSchema,
    updateManySchema: ProjectPropertyValueUpdateManyArgsSchema,
    upsertSchema: ProjectPropertyValueUpsertArgsSchema,
    deleteSchema: ProjectPropertyValueDeleteArgsSchema,
    deleteManySchema: ProjectPropertyValueDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ProjectPropertyValueCreateInputSchema>,
    Prisma.ProjectPropertyValueCreateArgs['data'],
    Prisma.ProjectPropertyValueUpdateArgs['data'],
    Prisma.ProjectPropertyValueFindFirstArgs['select'],
    Prisma.ProjectPropertyValueFindFirstArgs['where'],
    Prisma.ProjectPropertyValueFindUniqueArgs['where'],
    Omit<Prisma.ProjectPropertyValueInclude, '_count'>,
    Prisma.ProjectPropertyValueFindFirstArgs['orderBy'],
    Prisma.ProjectPropertyValueScalarFieldEnum,
    ProjectPropertyValueGetPayload
  >,
  Task: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "description",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "statusId",
        "TEXT"
      ],
      [
        "systemStatusId",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "projectId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ],
      [
        "parentId",
        "TEXT"
      ],
      [
        "taskStatusId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("DailyLogItem", "", "", "DailyLogItem", "DailyLogItemToTask", "many"),
      new Relation("User", "createdBy", "id", "User", "TaskToUser", "one"),
      new Relation("Task", "parentId", "id", "Task", "TaskToTask", "one"),
      new Relation("other_Task", "", "", "Task", "TaskToTask", "many"),
      new Relation("Project", "projectId", "id", "Project", "ProjectToTask", "one"),
      new Relation("TaskStatus", "taskStatusId", "id", "TaskStatus", "TaskToTaskStatus", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "TaskToTenant", "one"),
      new Relation("TaskPropertyValue", "", "", "TaskPropertyValue", "TaskToTaskPropertyValue", "many"),
      new Relation("UserTask", "", "", "UserTask", "TaskToUserTask", "many"),
    ],
    modelSchema: (TaskCreateInputSchema as any)
      .partial()
      .or((TaskUncheckedCreateInputSchema as any).partial()),
    createSchema: TaskCreateArgsSchema,
    createManySchema: TaskCreateManyArgsSchema,
    findUniqueSchema: TaskFindUniqueArgsSchema,
    findSchema: TaskFindFirstArgsSchema,
    updateSchema: TaskUpdateArgsSchema,
    updateManySchema: TaskUpdateManyArgsSchema,
    upsertSchema: TaskUpsertArgsSchema,
    deleteSchema: TaskDeleteArgsSchema,
    deleteManySchema: TaskDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaskCreateInputSchema>,
    Prisma.TaskCreateArgs['data'],
    Prisma.TaskUpdateArgs['data'],
    Prisma.TaskFindFirstArgs['select'],
    Prisma.TaskFindFirstArgs['where'],
    Prisma.TaskFindUniqueArgs['where'],
    Omit<Prisma.TaskInclude, '_count'>,
    Prisma.TaskFindFirstArgs['orderBy'],
    Prisma.TaskScalarFieldEnum,
    TaskGetPayload
  >,
  TaskProperty: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "order",
        "INT4"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "TaskPropertyToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "TaskPropertyToTenant", "one"),
      new Relation("TaskPropertyValue", "", "", "TaskPropertyValue", "TaskPropertyToTaskPropertyValue", "many"),
    ],
    modelSchema: (TaskPropertyCreateInputSchema as any)
      .partial()
      .or((TaskPropertyUncheckedCreateInputSchema as any).partial()),
    createSchema: TaskPropertyCreateArgsSchema,
    createManySchema: TaskPropertyCreateManyArgsSchema,
    findUniqueSchema: TaskPropertyFindUniqueArgsSchema,
    findSchema: TaskPropertyFindFirstArgsSchema,
    updateSchema: TaskPropertyUpdateArgsSchema,
    updateManySchema: TaskPropertyUpdateManyArgsSchema,
    upsertSchema: TaskPropertyUpsertArgsSchema,
    deleteSchema: TaskPropertyDeleteArgsSchema,
    deleteManySchema: TaskPropertyDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaskPropertyCreateInputSchema>,
    Prisma.TaskPropertyCreateArgs['data'],
    Prisma.TaskPropertyUpdateArgs['data'],
    Prisma.TaskPropertyFindFirstArgs['select'],
    Prisma.TaskPropertyFindFirstArgs['where'],
    Prisma.TaskPropertyFindUniqueArgs['where'],
    Omit<Prisma.TaskPropertyInclude, '_count'>,
    Prisma.TaskPropertyFindFirstArgs['orderBy'],
    Prisma.TaskPropertyScalarFieldEnum,
    TaskPropertyGetPayload
  >,
  TaskPropertyValue: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "value",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "taskPropertyId",
        "TEXT"
      ],
      [
        "taskId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "TaskPropertyValueToUser", "one"),
      new Relation("Task", "taskId", "id", "Task", "TaskToTaskPropertyValue", "one"),
      new Relation("TaskProperty", "taskPropertyId", "id", "TaskProperty", "TaskPropertyToTaskPropertyValue", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "TaskPropertyValueToTenant", "one"),
    ],
    modelSchema: (TaskPropertyValueCreateInputSchema as any)
      .partial()
      .or((TaskPropertyValueUncheckedCreateInputSchema as any).partial()),
    createSchema: TaskPropertyValueCreateArgsSchema,
    createManySchema: TaskPropertyValueCreateManyArgsSchema,
    findUniqueSchema: TaskPropertyValueFindUniqueArgsSchema,
    findSchema: TaskPropertyValueFindFirstArgsSchema,
    updateSchema: TaskPropertyValueUpdateArgsSchema,
    updateManySchema: TaskPropertyValueUpdateManyArgsSchema,
    upsertSchema: TaskPropertyValueUpsertArgsSchema,
    deleteSchema: TaskPropertyValueDeleteArgsSchema,
    deleteManySchema: TaskPropertyValueDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaskPropertyValueCreateInputSchema>,
    Prisma.TaskPropertyValueCreateArgs['data'],
    Prisma.TaskPropertyValueUpdateArgs['data'],
    Prisma.TaskPropertyValueFindFirstArgs['select'],
    Prisma.TaskPropertyValueFindFirstArgs['where'],
    Prisma.TaskPropertyValueFindUniqueArgs['where'],
    Omit<Prisma.TaskPropertyValueInclude, '_count'>,
    Prisma.TaskPropertyValueFindFirstArgs['orderBy'],
    Prisma.TaskPropertyValueScalarFieldEnum,
    TaskPropertyValueGetPayload
  >,
  TaskStatus: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "displayOrder",
        "INT4"
      ],
      [
        "iconColor",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("Task", "", "", "Task", "TaskToTaskStatus", "many"),
      new Relation("User", "createdBy", "id", "User", "TaskStatusToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "TaskStatusToTenant", "one"),
    ],
    modelSchema: (TaskStatusCreateInputSchema as any)
      .partial()
      .or((TaskStatusUncheckedCreateInputSchema as any).partial()),
    createSchema: TaskStatusCreateArgsSchema,
    createManySchema: TaskStatusCreateManyArgsSchema,
    findUniqueSchema: TaskStatusFindUniqueArgsSchema,
    findSchema: TaskStatusFindFirstArgsSchema,
    updateSchema: TaskStatusUpdateArgsSchema,
    updateManySchema: TaskStatusUpdateManyArgsSchema,
    upsertSchema: TaskStatusUpsertArgsSchema,
    deleteSchema: TaskStatusDeleteArgsSchema,
    deleteManySchema: TaskStatusDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaskStatusCreateInputSchema>,
    Prisma.TaskStatusCreateArgs['data'],
    Prisma.TaskStatusUpdateArgs['data'],
    Prisma.TaskStatusFindFirstArgs['select'],
    Prisma.TaskStatusFindFirstArgs['where'],
    Prisma.TaskStatusFindUniqueArgs['where'],
    Omit<Prisma.TaskStatusInclude, '_count'>,
    Prisma.TaskStatusFindFirstArgs['orderBy'],
    Prisma.TaskStatusScalarFieldEnum,
    TaskStatusGetPayload
  >,
  Tenant: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "settings",
        "JSONB"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("ApiKey", "", "", "ApiKey", "ApiKeyToTenant", "many"),
      new Relation("DailyLog", "", "", "DailyLog", "DailyLogToTenant", "many"),
      new Relation("DailyLogItem", "", "", "DailyLogItem", "DailyLogItemToTenant", "many"),
      new Relation("Equipment", "", "", "Equipment", "EquipmentToTenant", "many"),
      new Relation("EquipmentProperty", "", "", "EquipmentProperty", "EquipmentPropertyToTenant", "many"),
      new Relation("EquipmentPropertyValue", "", "", "EquipmentPropertyValue", "EquipmentPropertyValueToTenant", "many"),
      new Relation("Feedback", "", "", "Feedback", "FeedbackToTenant", "many"),
      new Relation("File", "", "", "File", "FileToTenant", "many"),
      new Relation("FileProperty", "", "", "FileProperty", "FilePropertyToTenant", "many"),
      new Relation("FilePropertyValue", "", "", "FilePropertyValue", "FilePropertyValueToTenant", "many"),
      new Relation("Image", "", "", "Image", "ImageToTenant", "many"),
      new Relation("LocationEntry", "", "", "LocationEntry", "LocationEntryToTenant", "many"),
      new Relation("Project", "", "", "Project", "ProjectToTenant", "many"),
      new Relation("ProjectProperty", "", "", "ProjectProperty", "ProjectPropertyToTenant", "many"),
      new Relation("ProjectPropertyValue", "", "", "ProjectPropertyValue", "ProjectPropertyValueToTenant", "many"),
      new Relation("Task", "", "", "Task", "TaskToTenant", "many"),
      new Relation("TaskProperty", "", "", "TaskProperty", "TaskPropertyToTenant", "many"),
      new Relation("TaskPropertyValue", "", "", "TaskPropertyValue", "TaskPropertyValueToTenant", "many"),
      new Relation("TaskStatus", "", "", "TaskStatus", "TaskStatusToTenant", "many"),
      new Relation("User_Tenant_createdByToUser", "createdBy", "id", "User", "Tenant_createdByToUser", "one"),
      new Relation("TenantUser", "", "", "TenantUser", "TenantToTenantUser", "many"),
      new Relation("TimeBlock", "", "", "TimeBlock", "TenantToTimeBlock", "many"),
      new Relation("User_User_currentTenantIdToTenant", "", "", "User", "User_currentTenantIdToTenant", "many"),
      new Relation("UserTask", "", "", "UserTask", "TenantToUserTask", "many"),
    ],
    modelSchema: (TenantCreateInputSchema as any)
      .partial()
      .or((TenantUncheckedCreateInputSchema as any).partial()),
    createSchema: TenantCreateArgsSchema,
    createManySchema: TenantCreateManyArgsSchema,
    findUniqueSchema: TenantFindUniqueArgsSchema,
    findSchema: TenantFindFirstArgsSchema,
    updateSchema: TenantUpdateArgsSchema,
    updateManySchema: TenantUpdateManyArgsSchema,
    upsertSchema: TenantUpsertArgsSchema,
    deleteSchema: TenantDeleteArgsSchema,
    deleteManySchema: TenantDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TenantCreateInputSchema>,
    Prisma.TenantCreateArgs['data'],
    Prisma.TenantUpdateArgs['data'],
    Prisma.TenantFindFirstArgs['select'],
    Prisma.TenantFindFirstArgs['where'],
    Prisma.TenantFindUniqueArgs['where'],
    Omit<Prisma.TenantInclude, '_count'>,
    Prisma.TenantFindFirstArgs['orderBy'],
    Prisma.TenantScalarFieldEnum,
    TenantGetPayload
  >,
  TenantUser: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "userRole",
        "TEXT"
      ],
      [
        "inviteEmail",
        "TEXT"
      ],
      [
        "inviteSentAt",
        "TIMESTAMPTZ"
      ],
      [
        "inviteStatus",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "userId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User_TenantUser_createdByToUser", "createdBy", "id", "User", "TenantUser_createdByToUser", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "TenantToTenantUser", "one"),
      new Relation("User_TenantUser_userIdToUser", "userId", "id", "User", "TenantUser_userIdToUser", "one"),
    ],
    modelSchema: (TenantUserCreateInputSchema as any)
      .partial()
      .or((TenantUserUncheckedCreateInputSchema as any).partial()),
    createSchema: TenantUserCreateArgsSchema,
    createManySchema: TenantUserCreateManyArgsSchema,
    findUniqueSchema: TenantUserFindUniqueArgsSchema,
    findSchema: TenantUserFindFirstArgsSchema,
    updateSchema: TenantUserUpdateArgsSchema,
    updateManySchema: TenantUserUpdateManyArgsSchema,
    upsertSchema: TenantUserUpsertArgsSchema,
    deleteSchema: TenantUserDeleteArgsSchema,
    deleteManySchema: TenantUserDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TenantUserCreateInputSchema>,
    Prisma.TenantUserCreateArgs['data'],
    Prisma.TenantUserUpdateArgs['data'],
    Prisma.TenantUserFindFirstArgs['select'],
    Prisma.TenantUserFindFirstArgs['where'],
    Prisma.TenantUserFindUniqueArgs['where'],
    Omit<Prisma.TenantUserInclude, '_count'>,
    Prisma.TenantUserFindFirstArgs['orderBy'],
    Prisma.TenantUserScalarFieldEnum,
    TenantUserGetPayload
  >,
  TimeBlock: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "duration",
        "INT4"
      ],
      [
        "entryType",
        "TEXT"
      ],
      [
        "rangeStartAt",
        "TIMESTAMPTZ"
      ],
      [
        "rangeEndAt",
        "TIMESTAMPTZ"
      ],
      [
        "timerStartLatitude",
        "FLOAT8"
      ],
      [
        "timerStartLongitude",
        "FLOAT8"
      ],
      [
        "timerStartAddress",
        "TEXT"
      ],
      [
        "timerStartAt",
        "TIMESTAMPTZ"
      ],
      [
        "timerEndAt",
        "TIMESTAMPTZ"
      ],
      [
        "timerEndLatitude",
        "FLOAT8"
      ],
      [
        "timerEndLongitude",
        "FLOAT8"
      ],
      [
        "timerEndAddress",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "dailyLogItemId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User", "createdBy", "id", "User", "TimeBlockToUser", "one"),
      new Relation("DailyLogItem", "dailyLogItemId", "id", "DailyLogItem", "DailyLogItemToTimeBlock", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "TenantToTimeBlock", "one"),
    ],
    modelSchema: (TimeBlockCreateInputSchema as any)
      .partial()
      .or((TimeBlockUncheckedCreateInputSchema as any).partial()),
    createSchema: TimeBlockCreateArgsSchema,
    createManySchema: TimeBlockCreateManyArgsSchema,
    findUniqueSchema: TimeBlockFindUniqueArgsSchema,
    findSchema: TimeBlockFindFirstArgsSchema,
    updateSchema: TimeBlockUpdateArgsSchema,
    updateManySchema: TimeBlockUpdateManyArgsSchema,
    upsertSchema: TimeBlockUpsertArgsSchema,
    deleteSchema: TimeBlockDeleteArgsSchema,
    deleteManySchema: TimeBlockDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TimeBlockCreateInputSchema>,
    Prisma.TimeBlockCreateArgs['data'],
    Prisma.TimeBlockUpdateArgs['data'],
    Prisma.TimeBlockFindFirstArgs['select'],
    Prisma.TimeBlockFindFirstArgs['where'],
    Prisma.TimeBlockFindUniqueArgs['where'],
    Omit<Prisma.TimeBlockInclude, '_count'>,
    Prisma.TimeBlockFindFirstArgs['orderBy'],
    Prisma.TimeBlockScalarFieldEnum,
    TimeBlockGetPayload
  >,
  User: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "email",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "preferredLanguage",
        "TEXT"
      ],
      [
        "settings",
        "JSONB"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "imageId",
        "TEXT"
      ],
      [
        "currentTenantId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("ApiKey", "", "", "ApiKey", "ApiKeyToUser", "many"),
      new Relation("DailyLog", "", "", "DailyLog", "DailyLogToUser", "many"),
      new Relation("DailyLogItem", "", "", "DailyLogItem", "DailyLogItemToUser", "many"),
      new Relation("Equipment_Equipment_createdByToUser", "", "", "Equipment", "Equipment_createdByToUser", "many"),
      new Relation("Equipment_Equipment_userIdToUser", "", "", "Equipment", "Equipment_userIdToUser", "many"),
      new Relation("EquipmentProperty", "", "", "EquipmentProperty", "EquipmentPropertyToUser", "many"),
      new Relation("EquipmentPropertyValue", "", "", "EquipmentPropertyValue", "EquipmentPropertyValueToUser", "many"),
      new Relation("Feedback", "", "", "Feedback", "FeedbackToUser", "many"),
      new Relation("File", "", "", "File", "FileToUser", "many"),
      new Relation("FileProperty", "", "", "FileProperty", "FilePropertyToUser", "many"),
      new Relation("FilePropertyValue", "", "", "FilePropertyValue", "FilePropertyValueToUser", "many"),
      new Relation("Image_Image_createdByToUser", "", "", "Image", "Image_createdByToUser", "many"),
      new Relation("LocationEntry", "", "", "LocationEntry", "LocationEntryToUser", "many"),
      new Relation("Project", "", "", "Project", "ProjectToUser", "many"),
      new Relation("ProjectProperty", "", "", "ProjectProperty", "ProjectPropertyToUser", "many"),
      new Relation("ProjectPropertyValue", "", "", "ProjectPropertyValue", "ProjectPropertyValueToUser", "many"),
      new Relation("Task", "", "", "Task", "TaskToUser", "many"),
      new Relation("TaskProperty", "", "", "TaskProperty", "TaskPropertyToUser", "many"),
      new Relation("TaskPropertyValue", "", "", "TaskPropertyValue", "TaskPropertyValueToUser", "many"),
      new Relation("TaskStatus", "", "", "TaskStatus", "TaskStatusToUser", "many"),
      new Relation("Tenant_Tenant_createdByToUser", "", "", "Tenant", "Tenant_createdByToUser", "many"),
      new Relation("TenantUser_TenantUser_createdByToUser", "", "", "TenantUser", "TenantUser_createdByToUser", "many"),
      new Relation("TenantUser_TenantUser_userIdToUser", "", "", "TenantUser", "TenantUser_userIdToUser", "many"),
      new Relation("TimeBlock", "", "", "TimeBlock", "TimeBlockToUser", "many"),
      new Relation("Tenant_User_currentTenantIdToTenant", "currentTenantId", "id", "Tenant", "User_currentTenantIdToTenant", "one"),
      new Relation("Image_User_imageIdToImage", "imageId", "id", "Image", "User_imageIdToImage", "one"),
      new Relation("UserTask_UserTask_createdByToUser", "", "", "UserTask", "UserTask_createdByToUser", "many"),
      new Relation("UserTask_UserTask_userIdToUser", "", "", "UserTask", "UserTask_userIdToUser", "many"),
    ],
    modelSchema: (UserCreateInputSchema as any)
      .partial()
      .or((UserUncheckedCreateInputSchema as any).partial()),
    createSchema: UserCreateArgsSchema,
    createManySchema: UserCreateManyArgsSchema,
    findUniqueSchema: UserFindUniqueArgsSchema,
    findSchema: UserFindFirstArgsSchema,
    updateSchema: UserUpdateArgsSchema,
    updateManySchema: UserUpdateManyArgsSchema,
    upsertSchema: UserUpsertArgsSchema,
    deleteSchema: UserDeleteArgsSchema,
    deleteManySchema: UserDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof UserCreateInputSchema>,
    Prisma.UserCreateArgs['data'],
    Prisma.UserUpdateArgs['data'],
    Prisma.UserFindFirstArgs['select'],
    Prisma.UserFindFirstArgs['where'],
    Prisma.UserFindUniqueArgs['where'],
    Omit<Prisma.UserInclude, '_count'>,
    Prisma.UserFindFirstArgs['orderBy'],
    Prisma.UserScalarFieldEnum,
    UserGetPayload
  >,
  UserTask: {
    fields: new Map([
      [
        "id",
        "TEXT"
      ],
      [
        "createdAt",
        "TIMESTAMPTZ"
      ],
      [
        "updatedAt",
        "TIMESTAMPTZ"
      ],
      [
        "archivedAt",
        "TIMESTAMPTZ"
      ],
      [
        "deletedAt",
        "TIMESTAMPTZ"
      ],
      [
        "createdBy",
        "TEXT"
      ],
      [
        "taskId",
        "TEXT"
      ],
      [
        "tenantId",
        "TEXT"
      ],
      [
        "userId",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("User_UserTask_createdByToUser", "createdBy", "id", "User", "UserTask_createdByToUser", "one"),
      new Relation("Task", "taskId", "id", "Task", "TaskToUserTask", "one"),
      new Relation("Tenant", "tenantId", "id", "Tenant", "TenantToUserTask", "one"),
      new Relation("User_UserTask_userIdToUser", "userId", "id", "User", "UserTask_userIdToUser", "one"),
    ],
    modelSchema: (UserTaskCreateInputSchema as any)
      .partial()
      .or((UserTaskUncheckedCreateInputSchema as any).partial()),
    createSchema: UserTaskCreateArgsSchema,
    createManySchema: UserTaskCreateManyArgsSchema,
    findUniqueSchema: UserTaskFindUniqueArgsSchema,
    findSchema: UserTaskFindFirstArgsSchema,
    updateSchema: UserTaskUpdateArgsSchema,
    updateManySchema: UserTaskUpdateManyArgsSchema,
    upsertSchema: UserTaskUpsertArgsSchema,
    deleteSchema: UserTaskDeleteArgsSchema,
    deleteManySchema: UserTaskDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof UserTaskCreateInputSchema>,
    Prisma.UserTaskCreateArgs['data'],
    Prisma.UserTaskUpdateArgs['data'],
    Prisma.UserTaskFindFirstArgs['select'],
    Prisma.UserTaskFindFirstArgs['where'],
    Prisma.UserTaskFindUniqueArgs['where'],
    Omit<Prisma.UserTaskInclude, '_count'>,
    Prisma.UserTaskFindFirstArgs['orderBy'],
    Prisma.UserTaskScalarFieldEnum,
    UserTaskGetPayload
  >,
}

export const schema = new DbSchema(tableSchemas, migrations)
export type Electric = ElectricClient<typeof schema>
export const JsonNull = { __is_electric_json_null__: true }
